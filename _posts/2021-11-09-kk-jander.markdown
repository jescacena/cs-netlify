---
layout: post
title:  kk jander
date:   2021-11-08T23:21:15.540Z
permalink: /fdfdfdfd/
icon: fdfdfdfd
categories: [snackpost]
---

> Information drawn from 
null


## Upgrading with *ngUpgrade*

**The ngUpgrade library in Angular is a very useful tool for upgrading** anything but the smallest of applications. With it **you can mix and match AngularJS and Angular components in the same application and have them interoperate seamlessly**. That means **you don't have to do the upgrade work all at once**, since there is a natural coexistence between the two frameworks during the transition period.

> The end of life of AngularJS is December 31st, 2021. With this event, ngUpgrade is now in a feature complete state. We will continue publishing security and bug fixes for ngUpgrade at least until December 31st, 2022.


### How ngUpgrade Works

**One of the primary tools provided by ngUpgrade is called the *UpgradeModule***. This is a module that contains utilities for **bootstrapping and managing hybrid applications** that support both Angular and AngularJS code.

When you use ngUpgrade, what you're really doing is **running both AngularJS and Angular at the same time**. All Angular code is running in the Angular framework, and AngularJS code in the AngularJS framework. Both of these are the actual, fully featured versions of the frameworks. **There is no emulation going on, so you can expect to have all the features and natural behavior of both frameworks**.

What happens **on top of this is that components and services managed by one framework can interoperate with those from the other framework**. This happens in *three main areas: Dependency injection, the DOM, and change detection*.


#### Dependency Injection

Dependency injection is front and center in both AngularJS and Angular, but there are some **key differences between the two frameworks** in how it actually works.

![angularjs-to-angular-di-compare](https://codersnack.com/assets/images/angularjs-to-angular-di-compare.png)

Even accounting for these differences you can still have dependency injection interoperability. ***upgrade/static* resolves the differences** and makes everything work seamlessly:

- **You can make AngularJS services available for injection to Angular code by upgrading them**. The same singleton instance of each service is shared between the frameworks. In Angular these services will always be in the root injector and available to all components.

- **You can also make Angular services available for injection to AngularJS code by downgrading them**. Only services from the Angular root injector can be downgraded. Again, the same singleton instances are shared between the frameworks. When you register a downgraded service, you must explicitly specify a string token that you want to use in AngularJS.

![The two injectors in a hybrid application](https://codersnack.com/assets/images/angularjs-to-angular-injectors.png)


### Components and the DOM

**In the DOM of a hybrid ngUpgrade application are components and directives from both AngularJS and Angular**. These components communicate with each other by using the input and output bindings of their respective frameworks, which *ngUpgrade bridges together*. They may also *communicate through shared injected dependencies*, as described above.

**The key thing to understand about a hybrid application is that every element in the DOM is owned by exactly one of the two frameworks**. The other framework ignores it. If an element is owned by AngularJS, Angular treats it as if it didn't exist, and vice versa.

**So normally a hybrid application begins life as an AngularJS application, and it is AngularJS that processes the root template, for example, the index.html. Angular then steps into the picture when an Angular component is used somewhere in an AngularJS template**. The template of that component will then be managed by Angular, and it may contain any number of Angular components and directives.

Beyond that, you may interleave the two frameworks. You always **cross the boundary between the two frameworks by one of two ways**:

- By **using a component from the other framework**: An AngularJS template using an Angular component, or an Angular template using an AngularJS component.

- By **transcluding or projecting content from the other framework**. ngUpgrade bridges the related concepts of AngularJS transclusion and Angular content projection together.


![DOM element ownership in a hybrid application](https://codersnack.com/assets/images/angularjs-to-angular-dom.png)

Whenever you use a component that belongs to the other framework, a switch between framework boundaries occurs. However, that **switch only happens to the elements in the template of that component**. 

Consider a situation where you use an Angular component from AngularJS like this:

```
<a-component></a-component>
```

The DOM element ```<a-component>```  will remain to be an **AngularJS managed element**, because it is defined in an AngularJS template. That also means you can apply additional AngularJS directives to it, but not Angular directives. It is only in the template of the ```<a-component>``` where Angular steps in. This same rule also applies when you use AngularJS component directives from Angular.



