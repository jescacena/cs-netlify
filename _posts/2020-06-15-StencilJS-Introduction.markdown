---
layout: post
title:  StencilJS Introduction
date:   2020-04-14T15:04:06.843Z
permalink: /stenciljs-introduction/
icon: https://codersnack.com/assets/images/stenciljs-icon.png
categories: [snackpost]
---

### References ---

- [stenciljs.com Introduction](https://stenciljs.com/docs/introduction)
- [stenciljs.com Goals](https://stenciljs.com/docs/goals-and-objectives)
---

**Stencil is a compiler that generates Web Components** (more specifically, Custom Elements). Stencil combines the best concepts of the most popular frameworks into a simple build-time tool.
Stencil takes features such as
	•	**Virtual DOM**
	•	**Async rendering (inspired by React Fiber)**
	•	**Reactive data-binding**
	•	**TypeScript**
	•	**JSX**
and then generates standards-based Web Components with these features baked in.

Since Stencil **generates standards-compliant web components**, they **can work with many popular frameworks right out of the box**, and can be used without a framework because they are just web components. Stencil also enables a number of key **capabilities on top of Web Components,** in particular, **pre-rendering**, and **objects-as-properties** (instead of just strings).

**Compared to using Custom Elements directly, Stencil provides extra APIs** that makes writing fast components simpler. APIs like **Virtual DOM**, **JSX**, and **async rendering** make fast, powerful components easy to create, while still maintaining 100% compatibility with Web Components.

The developer experience is also tuned, and comes with **live reload** and a **small dev server** baked in to the compiler.

### Why Stencil?

Stencil was **created by the Ionic Framework team** to help build faster, more capable components that worked across all major frameworks.

While Ionic primarily targeted Cordova apps, the emergence of Progressive Web Apps as a rapidly growing target for web developers demanded a different approach to web app development performance. With Ionic's classic use of traditional frameworks and bundling techniques, **the team was struggling to meet latency and code size demands for Progressive Web Apps** that ran equally well on fast and slow networks, across a diversity of platforms and devices.

Additionally, **framework fragmentation had created a web development interoperability nightmare**, where components built for one framework didn't work with another framework.

**Web Components offered a solution to both problems**, pushing more work to the browser for better performance, and targeting a standards-based component model that all frameworks could use.

However,**Web Components by themselves weren't enough**. Building fast web apps required innovations that were previously locked up inside of traditional web frameworks. **Stencil was built to pull these features out of traditional frameworks and bring them to the fast emerging Web Component standard**

## Stencil Goals And Objectives
Stencil aims to combine the best concepts of the most popular frontend frameworks into a compile-time tool rather than run-time tool. It's important to stress that **Stencil's goal is to not become or be seen as a "framework",** but rather our goal is to provide a great developer experience and tooling expected from a framework, while using web-standards within the browser at run-time. In many cases, Stencil can be used as a drop in replacement for traditional frontend frameworks given the capabilities now available in the browser, though using it as such is certainly not required.

#### Web Standards
**Components generated by Stencil in the end are built on top of web components**, so they work in any major framework or with no framework at all. Additionally, other standards heavily relied on include ES Modules and dynamic imports which have proven to replace traditional bundlers which add unnecessary complexities and run-time JavaScript. By using web-standards, developers can learn and adopt a standard API documented across the world, rather than custom framework APIs that continue to change.

#### Automatic Optimizations
There are countless optimizations and tweaks developers must do to improve performance of components and websites. With a compiler, **Stencil is able to analyze component code as an input, and generate optimized components as an output.**

#### Future-Friendly
As the world of software development continues to evolve, so too can the compiler. Instead of requiring complete rewrites of components, the compiler can continue to make optimizations using the standard component model as the common input. **The compiler allows developers to create future-friendly components, while still staying up-to-date on the latest optimizations without starting over again and again**. Additionally, if something changes about any API, the compiler is able to make automatic adjustments and notify the developer exactly what needs to be updated.

#### Run-time Performance
Instead of writing custom client-side JavaScript which every user needs to download and parse for the app to work, **Stencil instead prefers to use the already amazing APIs built directly within the browser**. These APIs include **Custom Elements**

#### Tiny API
**Stencil purposely does not come with a large custom API which needs to be learned and re-learned, but rather heavily relies on, you guessed it, web-standards**. Again, our goal is to not create yet-another-framework, but rather provide tooling for developers to generate future-friendly components using APIs already baked within the browser. The smaller the API, the easier to learn, and the less that can be broken.

#### Framework Features During Development
If you haven't noticed already we think web-standards are great and offer many benefits. While using web-standards without any structure is certainly possible, and there are actually many use-cases where this would be appropriate, we found that **as apps and teams scale it quickly becomes difficult to manage. Developers often gravitate to frameworks because of their great tooling, defined structure, and ability to allow developers to build apps quickly**. One of the largest goals of Stencil is to be that intersection of having great framework features and first-class tooling during development but generating future-proof web-standard code, rather than custom framework specific code.

#### Wide Browser Support
**For the small minority of browsers that do not support modern browser features and APIs, Stencil will automatically polyfill them on-demand**. What this means is that for browsers that already support the feature natively, they will not have to download and parse any unnecessary JavaScript. The great news is that in today's web landscape, most modern APIs are already shipping for what Stencil requires. Out-of-the-box browser support includes IE11 and up.
