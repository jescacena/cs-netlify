[{"id":97,"codersnack":{"id":98,"header":"GatsbyJS - Introduction","created_at":"2021-11-03T17:19:05.447Z","updated_at":"2021-11-03T17:46:52.760Z","explanation":"\n## What is Gatsby?\n\nIt's **another static site generator** like Hugo, Jekyll and so on. So what makes it special? Why are we talking specifically about it?\n\nGatsby can be used to build static sites that are **Progressive Web Apps**, follow the latest web standards, and are **optimized to be highly performant.** It makes use of the latest and popular technologies including **ReactJS**, Webpack, **GraphQL**, modern ES6+ JavaScript and CSS.\n\n![ReactJS + GraphQL + Webpack = i'm loving it](https://codersnack.com/assets/images/gatsbyjs-reactjs-graphql-webpack.png)\n*ReactJS + GraphQL + Webpack = i'm loving it*\n\nThis means **a lot of developers can jump in without much of a learning curve** as they already know or have at least used one piece of this tech stack Gatsby is built on.\n\n## Approach to development\n\nOn one side, we have users expecting an app-like smooth experience on the web. The other side is **developers, used to sites having pages with each being HTML files** or maybe using some templating — at the very base — sites as pages with internal linking.\n\nIf you’re getting started with any of the latest frameworks, let’s take the case of React. You could have an app up and running with minimal configuration with *create-react-app*. But if you take a look at the project structure it may not make much sense to a newbie or even some developers coming in from other tech stacks. *The pattern is pretty different from what you’ve ever seen before.* It’s because without additional setup they aim at building Single-Page Applications, SPAs. To add routing, pages or optimizing for SEO, it will require more tools and configuration.\n\nThat doesn’t seem very convenient when you want static sites, does it? So here we have **Gatsby, optimized for this specific use case**. This could be **more intuitive for developers**, as there are pages created from components that follow the root idea that sites are pages with internal linking.\n\n## Webpack bundling and latest tooling\n\nWebpack creates optimized, minified bundles of HTML, JavaScript, and CSS. When it’s pre-configured with Babel and more plugins, it allows you to use the latest ES6+ JavaScript and GraphQL.\n\n*Icing on the cake*: we’ve got hot reloading and code splitting built-in, giving a better development experience and better site performance. This is aimed at making the developer write minimal tooling configuration and focus more on the actual site development.\n\n## Gatsby plugins, starters and React packages\n\nYou can use any of the packages you’ve already been using with NPM, particularly the React ones as it’s built on the same thing. But that’s not all: there’s a **large number of ever-growing plugins, starters, and transformers by the Gatsby community**. You almost never come to the point where you actually have to build on your own tool or module, the community already offers a huge number to suit every need.\n\nUsing these, Gatsby **can be extended with additional functionality**. For instance, a couple of examples include *responsive images*, *offline functionality*, *source data from CMS* and *data markup formats*, adding third-party services (Google analytics etc), and so on.\n\n## Responsive Images\n\nResizing images for responsiveness on different devices, lazy-loading, using srcsets and picture…Already sounds tedious when it is to be done manually.\n\n![Different versions of the same image for responsiveness](https://codersnack.com/assets/images/gatsbyjs-responsive-images.png)\n*Different versions of the same image for responsiveness*\n\nAlthough it is a requirement for performance and app-like optimized interfaces these days, we don’t see many tools that we can directly jump into and use.\n\nMeanwhile, in Gatsby with just a plugin, particularly the **gatsby-plugin-sharp**, you can directly generate **fluid images, add filters, change formats**, blur up on load and a lot more. This saves a lot of work and time manually resizing images and writing explicit boilerplate code for responsive images. It also gives you way better performance along with a smoother user experience.\n\n## App-like experience\n\nWith the performance boost and features to add to the **smoothness of the user experience**, Gatsby aims at a full app-like experience borrowing from full PWAs. There are **no reloads between pages** when using **gatsby-link** instead of hyperlinks, and the app still appears smooth and performant thanks to **lazy-loading images and code-splitting**.\n\nFor sites following standards that you also want to be performant, we’ve got tons of things to do and guides to follow: minification and bundling, browser caching and async loading scripts or files, and so on. When working with a framework like React, you have more things to worry about even though it solves a couple of problems: **code-splitting, SEO, routing if required, responsive images**, and the list goes on.\n\n**Gatsby aims to solve all these problems**, with less time spent on tooling, configuration, and the environment and more time to actually design and develop the site.\n\n## Plugins\n\nGatsby was **built to be extensible and flexible — using plugins is one way to make it so**. They can be directly installed and be used for a variety of functionality including making the site offline, adding Google analytics, adding support for inline SVGs, you name it — the list is almost endless.\n\nOf the different types of Gatsby plugins, the **gatsby-source plugins in particular fetch data from a local or remote source and allow it to be usable via GraphQL**. These sources could be CMSs such as *Wordpress*, Drupal, Plone, *local markdown*, XML or such files, databases, APIs and *data formats as JSON*, CSV.\n\nThis implies that almost anything at all can be used as a source to work with Gatsby and generate static sites.\n\n***Note***: GraphQL is a query language for APIs that works on the philosophy of just asking for exactly what you require. Unlike REST APIs, you don’t look for endpoints to provide your data and process them from the structure that’s given from it, but rather ask for what you want and directly use this data. Read more about how it works and how to use it in their docs.\nAfter installation, some plugins can be used straight away by just listing them in *gatsby-config.js* and the others configured with an options object.\n\nGo check out the Gatsby plugin library, it’s already got quite a large number of plugins and more are being added still by the active community.\n\n## Starters\n\nThese are basically boilerplate Gatsby sites which help you kick-start development quickly depending on what kind of site it is. They help you directly get onto working on the development of a site, configuration and basic features you need already taken care of. Which means, less time on the tooling, more time for development.\n\nGatsby plugins often have their corresponding starters which show or serve a quick way to get started with using it. They also act as a reference covering all the features and showcase configurations of the plugin in use.\n\n[https://www.gatsbyjs.com/starters/](https://www.gatsbyjs.com/starters/)\n\n## Static Sites\n\nFirstly, let’s take a look at **how Gatsby works internally**. Unlike the SPAs that make API requests as you run the app, **Gatsby does all the data fetching, including data sourcing from local files, during build time**. All this data is then used to generate static HTML, JavaScript, and CSS files. This static rendering is what makes things work faster.\n\n![How GastbyJS works](https://codersnack.com/assets/images/gatsbyjs-how-it-works.png)\n*How GastbyJS works*\n\nThat was a lot about Gatsby, its ecosystem and how it helps you create amazing static sites. **But why would we want static sites? Doesn’t it sound like a step back from dynamic ones?**\n\n- They **do not require complex server setup with databases, maintenance, and don’t have any scaling issues**.\n- Data is **fully secure**. CMSs and APIs have private features but the data is still present in the server which can be exploited. Gatsby only takes the required data to display from the source and the private or secured data is not even present in the final build. Which is the safest it can possibly get.\n- Rather than relying on servers to generate pages dynamically, **pre-render all of them on build and use CDNs for a blazing fast** and smooth experience for users all around the globe.\n- Gatsby does static rendering. Which makes content available as HTML, and **search engine optimized, no long initial load time**.\n","references":"- [Why you should use GatsbyJS to build static sites](https://www.freecodecamp.org/news/why-you-should-use-gatsbyjs-to-build-static-sites-4f90eb6d1a7b/)","featured_image_url":"https://codersnack.com/assets/images/gatsbyjs-logo.png","slug":"gatsbyjs-introduction","weblink":"https://codersnack.com/gatsbyjs-introduction","featured_image_preview":{"id":134,"name":"gatsbyjs-logo.png","hash":"88d8647b64d746bfa0e26e30739956a5","sha256":"JwaZ8RhB9I9yyZjBISjAU_qdgFuutP8x7hrsrDZYAx0","ext":".png","mime":"image/png","size":15.48,"url":"/uploads/88d8647b64d746bfa0e26e30739956a5.png","provider":"local","provider_metadata":null,"created_at":"2021-11-03T17:19:05.459Z","updated_at":"2021-11-03T17:19:05.459Z"}},"codersnacks_category":{"id":19,"header":"GatsbyJS","description":"Gatsby enables developers to build **fast**, **secure**, and powerful websites using a **React-based framework** and innovative data layer that makes integrating different content, APIs, and services into one web experience incredibly simple.","snacks_by_cat_json_filename":"gatsbyjs.snacks.json","key":"gatsbyjs","image_url":"https://codersnack.com/assets/images/gatsbyjs-logo.png","created_at":"2021-11-03T16:40:35.871Z","updated_at":"2021-11-03T16:40:35.871Z","image_preview":{"id":133,"name":"gatsbyjs-logo.png","hash":"43be89681abd44d1b57a0727c51f44b4","sha256":"JwaZ8RhB9I9yyZjBISjAU_qdgFuutP8x7hrsrDZYAx0","ext":".png","mime":"image/png","size":15.48,"url":"/uploads/43be89681abd44d1b57a0727c51f44b4.png","provider":"local","provider_metadata":null,"created_at":"2021-11-03T16:40:35.913Z","updated_at":"2021-11-03T16:40:35.913Z"}},"title":"Gatsbyjs - Introduction","created_at":"2021-11-03T17:19:52.479Z","updated_at":"2021-11-03T17:19:52.483Z"},{"id":98,"codersnack":{"id":99,"header":"GatsbyJS - Use and Style React Components","created_at":"2021-11-03T20:02:39.083Z","updated_at":"2021-11-03T20:02:39.083Z","explanation":"To build out the basic page structure for your blog site, you’ll need to know about React components and how Gatsby uses them.\n\nBy the end of this part of the Tutorial, you will be able to:\n\n- Create page components to add new pages to your site.\n- Import and use a pre-built component from another package.\n- Create your own reusable “building block” component.\n- Use component props to change the way a component renders.\n- Use the children prop to create a wrapper component.\n \n## What is React?\n\n**React is the JavaScript library that Gatsby uses under the hood to create user interfaces (UIs)**. With React, you can **break down your UI into smaller, reusable pieces called components**.\n\nFor example, imagine the UI for an online store’s Products page:\n\n![gatsbyjs-ui-built-from-componentst](https://codersnack.com/assets/images/gatsbyjs-ui-built-from-components.png)\n\nTo build this page in React, you might have a ```<Navbar>``` component for the navigation menu, a ```<Sidebar>``` component for extra information displayed to the side of the main content, and a ```<ProductGrid>``` component to display all of the products for sale.\n\nYou can also create components from other components. For example, you might decide to break down the ```<ProductGrid>``` component into a list of multiple ```<ProductCard>``` components, which each display the details about a single product. This pattern is called composition, since your larger ```<ProductGrid>``` component is composed of smaller ```<ProductCard>``` components.\n\n## What is a React component?\n\nUnder the hood, **a React component is a function that returns a React element**. A **React element is an object that React uses to render DOM elements**.\n\n**A component is a function that outputs a React component, written in JSX**.\n\nThe simplest way to write React elements is with JSX. JSX is a JavaScript syntax extension that describes the DOM structure for your component. It looks a bit like having HTML in your JavaScript files:\n\n```\nconst hello = <h1>Hello world!</h1>\n```\n\nSo a simple React component might look something like this:\n\n```\nconst Greeting = () => {\n  return (\n    <h1>Hello world!</h1>\n  )\n}\n```\n\n\n### Create a page component\n\nThere are two main types of components in a Gatsby site. The first type you’ll create are page components. **A page component contains all the UI elements for a specific page of your site.**\n\nIn this section, you’ll create two new page components: one for the Home page and one for an About page.\n\nThe Home Page content is in ```src/index.js```.\n\n### Task: Create a new page component for an About page\n\nNow that you’ve updated the existing Home page, try creating a new page from scratch. Make an About page, so that you can tell people a little about yourself.\n\nCreate a new file: src/pages/about.js. Use the code below as a starting point for your About page. \n\n*src/pages/about.js*\n```\n// Step 1: Import React\nimport * as React from 'react'\n// Step 2: Define your component\nconst AboutPage = () => {\n  return (\n    <main>\n      <title>About Me</title>\n      <h1>About Me</h1>\n      <p>Hi there! I'm the proud creator of this site, which I built with Gatsby.</p>\n    </main>\n  )\n}\n// Step 3: Export your component\nexport default AboutPage\n```\n\n## Use the ```<Link>``` component\n\nSo far, your blog site has two separate pages (Home and About), but the only way to get from one page to the other is to update the URL manually. It would be nice to add links to make it easier to switch between pages on your site.\n\nThe **Link** component is an example of a **pre-built component** that you can use in your site. In other words, the Link component is defined and maintained by another package (in this case, the Gatsby package). That means you can import it and use it in your own components without knowing too much about how it works under the hood.\n\n**The Link component lets you add a link to another page in your Gatsby site**. It’s similar to an HTML ```<a>``` tag, but with some extra **performance benefits**. The Link component takes a **prop called to**, which is similar to the ```<a>``` tag's href attribute. The value should be the URL path to the page on your site you want to link to.\n\n*-- Key Gatsby Concept --* 💡\n\nThe Gatsby Link component provides a **performance feature called preloading**. **This means that the resources for the linked page are requested when the link scrolls into view or when the mouse hovers on it. That way, when the user actually clicks on the link, the new page can load super quickly**.\n\nUse the Link component for linking between pages within your site. For external links to pages not created by your Gatsby site, use the regular HTML ```<a>``` tag.\n\n*--*\n\nFollow the steps below to add Link components to your Home and About pages.\n\nOn the Home page, import the Link component from the Gatsby package and add a link to your About page.\n\n*src/pages/index.js*\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\nconst IndexPage = () => {\n  return (\n    <main>\n      <title>Home Page</title>\n      <h1>Welcome to my Gatsby site!</h1>\n      <Link to=\"/about\">About</Link>\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n    </main>\n  )\n}\nexport default IndexPage\n```\n\nOn the About page, import the Link component from the Gatsby package and add a link to your Home page.\n\n*src/pages/about.js*\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\nconst AboutPage = () => {\n  return (\n    <main>\n      <title>About Me</title>\n      <h1>About Me</h1>\n      <Link to=\"/\">Back to Home</Link>\n      <p>Hi there! I'm the proud creator of this site, which I built with Gatsby.</p>\n    </main>\n  )\n}\nexport default AboutPage\n```\n\n## Create a reusable layout component\n\nIf you take another look at the finished example blog, you might notice that there are some repeated parts of the UI across each page, like the site title and the navigation menu.\n\nYou could copy those elements into each page of your site separately. But imagine your site had dozens (or even thousands) of pages. If you wanted to make a change to the structure of your navigation menu, you’d have to go and update every one of those files separately. Yuck.\n\nInstead, it would be better to create one common **Layout component** that groups all the shared elements to **reuse across multiple pages**. That way, when you need to make updates to the layout, you can make the change in one place and it will automatically be applied to all the pages using that component.\n\nIn this section, you’ll create your first custom building-block component: Layout. To do that, you’ll need to use a special React prop called children.\n\nFollow the steps below to create a Layout component and add it to your Home and About pages.\n\nCreate a new file called **src/components/layout.js**. Insert the following code to define your Layout component. This component will render a dynamic page title and heading (from the **pageTitle prop**), a list of navigation links, and the contents passed in with the children prop. To improve accessibility, there's also a ```<main>``` element wrapping the page-specific elements (the ```<h1>``` heading and the contents from children).\n\n*src/components/layout.js*\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    <div>\n      <title>{pageTitle}</title>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/about\">About</Link></li>\n        </ul>\n      </nav>\n      <main>\n        <h1>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\nexport default Layout\n```\n\n*Syntax Hint*: You might have noticed that the Layout component uses a slightly different syntax for its props.\n\nNow instead of looking like this:\n\n```\nconst Layout = (props) => {\n  ...\n}\n```\n…it looks like this:\n\n```\nconst Layout = ({ pageTitle, children }) => {\n  ...\n}\n```\n\nThis is a JavaScript technique called **destructuring**.\n\n\nUpdate your Home page component to use the Layout component instead of the hard-coded Link component you added in the previous section.\n\n*src/pages/index.js*\n```\nimport * as React from 'react'\nimport Layout from '../components/layout'\nconst IndexPage = () => {\n  return (\n    <Layout pageTitle=\"Home Page\">\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n    </Layout>\n  )\n}\nexport default IndexPage\n```\nUpdate your About page component to use the Layout component as well.\n*src/pages/about.js*\n```\nimport * as React from 'react'\nimport Layout from '../components/layout'\nconst AboutPage = () => {\n  return (\n    <Layout pageTitle=\"About Me\">\n      <p>Hi there! I'm the proud creator of this site, which I built with Gatsby.</p>\n    </Layout>\n  )\n}\nexport default AboutPage\n```\n\n## Style components with CSS Modules\n\nNow that you’ve got your page structure set up, it’s time to add some style and make it cute!\n\n**Gatsby isn’t strict about what styling approach you use.** You can pick whatever system you’re most comfortable with.\n\nIn this Tutorial, you’ll use **CSS Modules to style your components**. This means that **styles will be scoped to components, which helps avoid class naming collisions between components**. **Gatsby is automatically configured to handle CSS Modules** - no extra setup necessary!\n\nFollow the steps below to style your Layout component using CSS Modules.\n\nCreate a new file: *src/components/layout.module.css*. (**The .module.css part at the end is important!** That’s what tells Gatsby that these styles are using CSS Modules.)\n\nStart by adding a single **.container class**:\n\n*src/components/layout.module.css*\n```\n.container {\n  margin: auto;\n  max-width: 500px;\n  font-family: sans-serif;\n}\n```\n\nThen **import that class into your Layout component .js file**, and use the **className prop** to assign it to the top-level ```<div>``` element:\n*src/components/layout.js*\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\nimport { container } from './layout.module.css'\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    <div className={container}>\n      <title>{pageTitle}</title>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/about\">About</Link></li>\n        </ul>\n      </nav>\n      <main>\n        <h1>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\nexport default Layout\n\n```\nSyntax Hint: To apply classes to React components, use the className prop. (This is another example of a built-in prop that React automatically knows how to handle.)\n\nThis might be confusing if you’re used to using the class attribute on HTML elements. Do your best to not mix them up!\n\nNow that you’ve seen how to style a single element for your component, add some more styles to apply to the other elements in your Layout component.\n*src/components/layout.module.css*\n```\n.container {\n  margin: auto;\n  max-width: 500px;\n  font-family: sans-serif;\n}\n.heading {\n  color: rebeccapurple;\n}\n.nav-links {\n  display: flex;\n  list-style: none;\n  padding-left: 0;\n}\n.nav-link-item {\n  padding-right: 2rem;\n}\n.nav-link-text {\n  color: black;\n}\n```\n\nImport the new classes into your Layout component, and apply each class to the corresponding element.\n*src/components/layout.js*\n```\nimport * as React from 'react'\nimport { Link } from 'gatsby'\nimport {\n  container,\n  heading,\n  navLinks,\n  navLinkItem,\n  navLinkText\n} from './layout.module.css'\nconst Layout = ({ pageTitle, children }) => {\n  return (\n    <div className={container}>\n      <title>{pageTitle}</title>\n      <nav>\n        <ul className={navLinks}>\n          <li className={navLinkItem}>\n            <Link to=\"/\" className={navLinkText}>\n              Home\n            </Link>\n          </li>\n          <li className={navLinkItem}>\n            <Link to=\"/about\" className={navLinkText}>\n              About\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <h1 className={heading}>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\nexport default Layout\n```\n\n*Syntax Hint*: In CSS, the convention is to name classes using kebab case (like .nav-links). But in JavaScript, the convention is to name variables using camel case (like navLinks).\n\nLuckily, when you use CSS Modules with Gatsby, you can have both! **Your kebab-case class names in your .module.css files will automatically be converted to camel-case variables that you can import in your .js files.**\n\n## Key takeaways\n\n- React is a library that helps you break down your UI into smaller pieces called components. A component is a function that returns a React element. React elements can be written in JSX.\n- **Page components** contain all the UI elements for a specific page of your site. Gatsby automatically creates pages for components that are the default exports of files in the src/pages directory. The name of the file will be used as the route for the page.\n- **Building-block components** are smaller reusable parts of your UI. They can be imported into page components or other building block components.\n- You **can import pre-built components (like Link) **from other packages, or you can write your own custom components from scratch (like Layout).\n- You can use **props to change how a component renders**. You can define your own props when you build a component. **React also has some built-in props, like *children* and *className***.\n- Gatsby isn’t opinionated about what styling approach you want to use, but it works with CSS Modules by default.\n\n","references":"- [Use and Style React Components](https://www.gatsbyjs.com/docs/tutorial/part-2/)","featured_image_url":"https://codersnack.com/assets/images/gatsbyjs-logo.png","slug":"gatsbyjs-use-react-components","weblink":"https://codersnack.com/gatsbyjs-use-react-components","featured_image_preview":{"id":135,"name":"gatsbyjs-logo.png","hash":"ea8f1f34862a4e29a0e2a777accbaa3e","sha256":"JwaZ8RhB9I9yyZjBISjAU_qdgFuutP8x7hrsrDZYAx0","ext":".png","mime":"image/png","size":15.48,"url":"/uploads/ea8f1f34862a4e29a0e2a777accbaa3e.png","provider":"local","provider_metadata":null,"created_at":"2021-11-03T20:02:39.096Z","updated_at":"2021-11-03T20:02:39.096Z"}},"codersnacks_category":{"id":19,"header":"GatsbyJS","description":"Gatsby enables developers to build **fast**, **secure**, and powerful websites using a **React-based framework** and innovative data layer that makes integrating different content, APIs, and services into one web experience incredibly simple.","snacks_by_cat_json_filename":"gatsbyjs.snacks.json","key":"gatsbyjs","image_url":"https://codersnack.com/assets/images/gatsbyjs-logo.png","created_at":"2021-11-03T16:40:35.871Z","updated_at":"2021-11-03T16:40:35.871Z","image_preview":{"id":133,"name":"gatsbyjs-logo.png","hash":"43be89681abd44d1b57a0727c51f44b4","sha256":"JwaZ8RhB9I9yyZjBISjAU_qdgFuutP8x7hrsrDZYAx0","ext":".png","mime":"image/png","size":15.48,"url":"/uploads/43be89681abd44d1b57a0727c51f44b4.png","provider":"local","provider_metadata":null,"created_at":"2021-11-03T16:40:35.913Z","updated_at":"2021-11-03T16:40:35.913Z"}},"title":"gatsbyjs - use react components","created_at":"2021-11-03T20:03:14.305Z","updated_at":"2021-11-03T20:03:14.310Z"},{"id":99,"codersnack":{"id":100,"header":"GatsbyJS - Add Features with Plugins","created_at":"2021-11-03T20:33:43.718Z","updated_at":"2021-11-03T20:33:43.718Z","explanation":"It can be a lot of work to build new features for a website. Luckily, **by using Gatsby plugins, you can quickly add new functionality to your site without needing to build it from scratch yourself**. Gatsby’s plugin ecosystem has thousands of prebuilt packages for you to choose from.\n\nIn this part of the Tutorial, you’ll learn what Gatsby plugins are and how to use them in your site.\n\nBy the end of this part of the Tutorial, you will be able to:\n\n- Use the Gatsby Plugin Library to browse all the available plugins.\n- Add a plugin to your Gatsby site.\n- Configure your plugins in your gatsby-config.js file.\n\n \n## What is a plugin?\n\nIn Gatsby terms, **a plugin is a separate npm package that you install to add extra features to your site.**\n\nThere are a variety of plugins that each have different use cases. Some plugins provide pre-built components, others add analytics, others let you pull data into your site. **Some plugins are built by Gatsby employees, while other plugins are built and maintained by community members**. So far, there are more than 2,600 plugins to choose from. You can look through all the available plugins using the [Gatsby Plugin Library](https://www.gatsbyjs.com/plugins).\n\nYou can think of a plugin as an accessory for your site. **You don’t need to use plugins - you could build out the same functionality from scratch yourself - but they save you time**. They’re like those fancy single-purpose cooking gadgets that peel apples or crush garlic. You could accomplish the same task using a regular knife, but it’s often faster to use a tool that’s built to do that one specific job really well.\n\n**You will likely use plugins in almost every Gatsby site you build**. While working through the rest of the Tutorial, you’ll have many opportunities to practice installing and using plugins.\n\n## Add a plugin to your site\n\nTo add a plugin to your site, you’ll use the following process:\n\n- Install the plugin using npm.\n- Configure the plugin in your site’s **gatsby-config.js** file.\n- Use the plugin features in your site, as needed.\n\n![gatsbyj-plugin-process](https://codersnack.com/assets/images/gatsbyj-plugin-process.png)\n\nThe next few sections will walk you through the process of adding a plugin to your site. You’ll use the **gatsby-plugin-image** plugin to **add performant images to your site**.\n\n### Task: Use gatsby-plugin-image to add a static image to your home page\n\nYou can use the gatsby-plugin-image plugin to **add responsive images to your site** while maintaining high performance scores. **gatsby-plugin-image exports a component called *StaticImage***, which you can **use to load images from a remote URL or your local filesystem**.\n\nFollow the steps below to use the *StaticImage* component to add an image from a URL to your home page.\n\nIn the terminal, run the following command to install gatsby-plugin-image and its dependencies.\n```\nnpm install gatsby-plugin-image gatsby-plugin-sharp gatsby-source-filesystem\n```\n\nThe *StaticImage* component requires a few additional plugins to work. These extra plugins are called peer dependencies, and you’ll need to install them along with the gatsby-plugin-image package:\n\n- **gatsby-plugin-sharp**: **Handles the actual image processing** that is used by gatsby-plugin-image.\n- **gatsby-source-filesystem**: Lets you **pull in data from your computer’s filesystem**. (You’ll learn more about this plugin later. Just install it for now.)\n*Tip*: When adding a new plugin to your site, check the plugin README in the Gatsby Plugin Library to see if there are any special setup instructions.\n\nNext, add the gatsby-plugin-image and gatsby-plugin-sharp plugins to your gatsby-config.js file. (Don’t worry about gatsby-source-filesystem just yet. You’ll come back to it later.)\n*gatsby-config.js*\n```\nmodule.exports = {\n  siteMetadata: {\n    title: \"My First Gatsby Site\",\n  },\n  plugins: [\n    \"gatsby-plugin-image\",\n    \"gatsby-plugin-sharp\",\n  ],\n};\n```\n\n*-- Key Gatsby Concept 💡 --*\n\nThe **gatsby-config.js** file is a special file that **Gatsby recognizes automatically**. It’s **where you add plugins and other site configuration**.\n\n**After you update your gatsby-config.js file, your local development server has to restart in order to pick up the new changes**. Sometimes it will restart itself automatically, but if you’re seeing unexpected behavior, try stopping and restarting it yourself.\n*--.--*\n\nNow that your plugins have been installed and configured, you can use the *StaticImage* component in your Gatsby site! You can use the StaticImage component similarly to the way you’d use an HTML ```<img>`` tag.\n\nThe StaticImage component expects the following props:\n\n- **src** (string): The URL to the image you want to load. (This is the same as what you put in the src attribute of an <img> HTML element.)\n- **alt** (string): The alt text to describe the image. This gets used by screen readers or if there’s a problem loading the image.\n\nFind an image URL online, and then use the StaticImage component to add that image to your home page:\n\n*src/pages/index.js*\n```\nimport * as React from 'react'\nimport Layout from '../components/layout'\nimport { StaticImage } from 'gatsby-plugin-image'\nconst IndexPage = () => {\n  return (\n    <Layout pageTitle=\"Home Page\">\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n      <StaticImage\n        alt=\"Clifford, a reddish-brown pitbull, posing on a couch and looking stoically at the camera\"\n        src=\"https://pbs.twimg.com/media/E1oMV3QVgAIr1NT?format=jpg&name=large\"\n      />\n    </Layout>\n  )\n}\nexport default IndexPage\n``\n\n### Task: Update the static image to use a photo from your local filesystem\n\nSo far, you’ve used the StaticImage component to add an image from an external URL. But what happens if you want to use a photo that isn’t on the internet yet?\n\nYou can also use the **StaticImage component to render images from your local filesystem**.\n\nDownload a photo to your computer, and move it into your project folder. To keep things organized, put it in the **src/images directory**.\nUpdate the src prop in your home page to be a relative path to your file instead of a URL. \n*src/pages/index.js*\n```\nimport * as React from 'react'\nimport Layout from '../components/layout'\nimport { StaticImage } from 'gatsby-plugin-image'\nconst IndexPage = () => {\n  return (\n    <Layout pageTitle=\"Home Page\">\n      <p>I'm making this by following the Gatsby Tutorial.</p>\n      <StaticImage\n        alt=\"Clifford, a reddish-brown pitbull, dozing in a bean bag chair\"\n        src=\"../images/clifford.jpg\"\n      />\n    </Layout>\n  )\n}\nexport default IndexPage\n```\n\n## Key takeaways\n\n- A plugin is a package that lets you add new features to your site.\n- Using plugins saves you development time, since it’s faster to install and configure a plugin than it is to recreate the same functionality from scratch.\n- The general process for using a plugin is to install it, configure it in your gatsby-config.js file, and then use it in your site as needed.\n- You can use the Gatsby Plugin Library to browse all the available plugins and learn more about how each one works.\n","references":"- [Add Features with Plugins](https://www.gatsbyjs.com/docs/tutorial/part-3/)","featured_image_url":"https://codersnack.com/assets/images/gatsbyjs-logo.png","slug":"gatsbyjs-add-features-plugin","weblink":"https://codersnack.com/gatsbyjs-add-features-plugin","featured_image_preview":{"id":136,"name":"gatsbyjs-logo.png","hash":"d5c7695a7e414e2092c1fa04adade080","sha256":"JwaZ8RhB9I9yyZjBISjAU_qdgFuutP8x7hrsrDZYAx0","ext":".png","mime":"image/png","size":15.48,"url":"/uploads/d5c7695a7e414e2092c1fa04adade080.png","provider":"local","provider_metadata":null,"created_at":"2021-11-03T20:33:43.733Z","updated_at":"2021-11-03T20:33:43.733Z"}},"codersnacks_category":{"id":19,"header":"GatsbyJS","description":"Gatsby enables developers to build **fast**, **secure**, and powerful websites using a **React-based framework** and innovative data layer that makes integrating different content, APIs, and services into one web experience incredibly simple.","snacks_by_cat_json_filename":"gatsbyjs.snacks.json","key":"gatsbyjs","image_url":"https://codersnack.com/assets/images/gatsbyjs-logo.png","created_at":"2021-11-03T16:40:35.871Z","updated_at":"2021-11-03T16:40:35.871Z","image_preview":{"id":133,"name":"gatsbyjs-logo.png","hash":"43be89681abd44d1b57a0727c51f44b4","sha256":"JwaZ8RhB9I9yyZjBISjAU_qdgFuutP8x7hrsrDZYAx0","ext":".png","mime":"image/png","size":15.48,"url":"/uploads/43be89681abd44d1b57a0727c51f44b4.png","provider":"local","provider_metadata":null,"created_at":"2021-11-03T16:40:35.913Z","updated_at":"2021-11-03T16:40:35.913Z"}},"title":"gatsbyjs - add new features with plugins","created_at":"2021-11-03T20:34:14.631Z","updated_at":"2021-11-03T20:34:14.639Z"}]