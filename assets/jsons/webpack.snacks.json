[{"id":57,"codersnack":{"id":58,"header":"Webpack Concepts","created_at":"2020-03-17T10:52:14.133Z","updated_at":"2020-03-17T10:52:14.133Z","explanation":"At its core, **webpack is a static module bundler** for modern JavaScript applications. When webpack processes your application, it **internally builds a ```dependency graph``` which maps every module your project needs and generates one or more bundles**.\n\n> Since version 4.0.0, webpack does not require a configuration file to bundle your project. Nevertheless, it is incredibly configurable to better fit your needs.\n\nTo get started you only **need to understand its Core Concepts**:\n\n- Entry\n- Output\n- Loaders\n- Plugins\n- Mode\n- Browser Compatibility\n- \nThis document is intended to give a high-level overview of these concepts, while providing links to detailed concept-specific use cases.\n\n### Entry\n**An ```entry``` point indicates which module webpack should use to begin building out its internal dependency graph. webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly)**.\n\nBy default its value is ```./src/index.js```, but you can specify a different (or multiple entry points) by setting an entry property in the webpack configuration. For example:\n\n**webpack.config.js**\n```\nmodule.exports = {\n  entry: './path/to/my/entry/file.js'\n};\n```\n\n### Output\n**The ```output``` property tells webpack where to emit the bundles it creates and how to name these files**. It defaults to ```./dist/main.js``` for the main output file and to the ```./dist``` folder for any other generated file.\n\nYou can configure this part of the process by specifying an output field in your configuration:\n\n**webpack.config.js**\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js'\n  }\n};\n```\nIn the example above, we use the *output.filename* and the *output.path* properties to tell webpack the name of our bundle and where we want it to be emitted to. In case you're wondering about the path module being imported at the top, it is a core Node.js module that gets used to manipulate file paths.\n\nThe output property has many more configurable features. \n\n### Loaders\nOut of the box, **webpack only understands JavaScript and JSON files**. **```Loaders``` allow webpack to process other types of files and convert them into valid modules that can be consumed by your application and added to the dependency graph**.\n\n> Note that the ability to import any type of module, e.g. *.css* files, is a feature specific to webpack and may not be supported by other bundlers or task runners. We feel this extension of the language is warranted as it allows developers to build a more accurate dependency graph.\n\nAt a high level, **loaders have two properties in your webpack configuration**:\n\n- The ```test``` property identifies **which file or files** should be transformed.\n- The ```use``` property indicates **which loader** should be used to do the transforming.\n\n**webpack.config.js**\n```\nconst path = require('path');\n\nmodule.exports = {\n  output: {\n    filename: 'my-first-webpack.bundle.js'\n  },\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  }\n};\n```\nThe configuration above has defined a rules property for a single module with two required properties: test and use. This tells webpack's compiler the following:\n\n\"Hey webpack compiler, when you come across a path that resolves to a '.txt' file inside of a require()/import statement, use the raw-loader to transform it before you add it to the bundle.\"\n\nIt is important to remember that when defining rules in your webpack config, you are defining them under module.rules and not rules. For your benefit, webpack will warn you if this is done incorrectly.\n\n> Keep in mind that when using regex to match files, you may not quote it. i.e /\\.txt$/ is not the same as '/\\.txt$/' or \"/\\.txt$/\". The former instructs webpack to match any file that ends with .txt and the latter instructs webpack to match a single file with an absolute path '.txt'; this is likely not your intention.\n\nYou can check further customization when including loaders in the loaders section.\n\n### Plugins\nWhile loaders are used to transform certain types of modules, **```plugins``` can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables**.\n\nCheck out the plugin interface and how to use it to extend webpack's capabilities.\n\nIn order to use a plugin, you need to require() it and add it to the plugins array. Most plugins are customizable through options. Since you can use a plugin multiple times in a configuration for different purposes, you need to create an instance of it by calling it with the new operator.\n\nwebpack.config.js\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm\nconst webpack = require('webpack'); //to access built-in plugins\n\nmodule.exports = {\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n};\n```\nIn the example above, the ```html-webpack-plugin``` **generates an HTML file for your application by injecting automatically all your generated bundles**.\n\nThere are many plugins that webpack provides out of the box! Check out the list of plugins.\n\nUsing plugins in your webpack configuration is straightforward. However, there are many use cases that are worth further exploration. Learn more about them here.\n\n### Mode\n**By setting the mode parameter to either development, production or none, you can enable webpack's built-in optimizations that correspond to each environment**. The default value is production.\n```\nmodule.exports = {\n  mode: 'production'\n};\n```\nLearn more about the mode configuration here and what optimizations take place on each value.\n\n### Browser Compatibility\nwebpack supports all browsers that are ES5-compliant (IE8 and below are not supported). webpack needs Promise for import() and require.ensure(). If you want to support older browsers, you will need to load a polyfill before using these expressions.\n\n### Environment\nwebpack runs on Node.js version 8.x and higher.\n","references":"- [Webpack.js.org Concepts](https://webpack.js.org/concepts/)","featured_image_url":"https://codersnack.com/assets/images/webpack-icon.png","slug":"webpack-concepts","weblink":"https://codersnack.com/webpack-concepts","featured_image_preview":{"id":76,"name":"webpack-icon.png","hash":"d171cd91ae10458eb7ecac92ac008121","sha256":"MLiPpyi7gDpLT2rlV4VFsL85AQdLPT5T22YtAr-6kx0","ext":".png","mime":"image/png","size":78.12,"url":"/uploads/d171cd91ae10458eb7ecac92ac008121.png","provider":"local","provider_metadata":null,"created_at":"2020-03-17T10:52:14.160Z","updated_at":"2020-03-17T10:52:14.160Z"}},"codersnacks_category":{"id":13,"header":"Webpack","description":"webpack is used to compile JavaScript modules","snacks_by_cat_json_filename":"webpack.snacks.json","key":"webpack","image_url":"https://codersnack.com/assets/images/webpack-icon.png","created_at":"2020-03-17T10:37:18.804Z","updated_at":"2020-03-17T10:37:18.804Z","image_preview":{"id":75,"name":"webpack-icon.png","hash":"b18f2e50556b448385495ae3c25635d7","sha256":"MLiPpyi7gDpLT2rlV4VFsL85AQdLPT5T22YtAr-6kx0","ext":".png","mime":"image/png","size":78.12,"url":"/uploads/b18f2e50556b448385495ae3c25635d7.png","provider":"local","provider_metadata":null,"created_at":"2020-03-17T10:37:18.836Z","updated_at":"2020-03-17T10:37:18.836Z"}},"title":"Webpack - concepts","created_at":"2020-03-17T10:52:36.601Z","updated_at":"2020-03-17T10:52:36.698Z"}]