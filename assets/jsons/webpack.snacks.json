[{"id":57,"codersnack":{"id":58,"header":"Webpack Concepts","created_at":"2020-03-17T10:52:14.133Z","updated_at":"2020-03-17T10:52:14.133Z","explanation":"At its core, **webpack is a static module bundler** for modern JavaScript applications. When webpack processes your application, it **internally builds a ```dependency graph``` which maps every module your project needs and generates one or more bundles**.\n\n> Since version 4.0.0, webpack does not require a configuration file to bundle your project. Nevertheless, it is incredibly configurable to better fit your needs.\n\nTo get started you only **need to understand its Core Concepts**:\n\n- Entry\n- Output\n- Loaders\n- Plugins\n- Mode\n- Browser Compatibility\n- \nThis document is intended to give a high-level overview of these concepts, while providing links to detailed concept-specific use cases.\n\n### Entry\n**An ```entry``` point indicates which module webpack should use to begin building out its internal dependency graph. webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly)**.\n\nBy default its value is ```./src/index.js```, but you can specify a different (or multiple entry points) by setting an entry property in the webpack configuration. For example:\n\n**webpack.config.js**\n```\nmodule.exports = {\n  entry: './path/to/my/entry/file.js'\n};\n```\n\n### Output\n**The ```output``` property tells webpack where to emit the bundles it creates and how to name these files**. It defaults to ```./dist/main.js``` for the main output file and to the ```./dist``` folder for any other generated file.\n\nYou can configure this part of the process by specifying an output field in your configuration:\n\n**webpack.config.js**\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './path/to/my/entry/file.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'my-first-webpack.bundle.js'\n  }\n};\n```\nIn the example above, we use the *output.filename* and the *output.path* properties to tell webpack the name of our bundle and where we want it to be emitted to. In case you're wondering about the path module being imported at the top, it is a core Node.js module that gets used to manipulate file paths.\n\nThe output property has many more configurable features. \n\n### Loaders\nOut of the box, **webpack only understands JavaScript and JSON files**. **```Loaders``` allow webpack to process other types of files and convert them into valid modules that can be consumed by your application and added to the dependency graph**.\n\n> Note that the ability to import any type of module, e.g. *.css* files, is a feature specific to webpack and may not be supported by other bundlers or task runners. We feel this extension of the language is warranted as it allows developers to build a more accurate dependency graph.\n\nAt a high level, **loaders have two properties in your webpack configuration**:\n\n- The ```test``` property identifies **which file or files** should be transformed.\n- The ```use``` property indicates **which loader** should be used to do the transforming.\n\n**webpack.config.js**\n```\nconst path = require('path');\n\nmodule.exports = {\n  output: {\n    filename: 'my-first-webpack.bundle.js'\n  },\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  }\n};\n```\nThe configuration above has defined a rules property for a single module with two required properties: test and use. This tells webpack's compiler the following:\n\n\"Hey webpack compiler, when you come across a path that resolves to a '.txt' file inside of a require()/import statement, use the raw-loader to transform it before you add it to the bundle.\"\n\nIt is important to remember that when defining rules in your webpack config, you are defining them under module.rules and not rules. For your benefit, webpack will warn you if this is done incorrectly.\n\n> Keep in mind that when using regex to match files, you may not quote it. i.e /\\.txt$/ is not the same as '/\\.txt$/' or \"/\\.txt$/\". The former instructs webpack to match any file that ends with .txt and the latter instructs webpack to match a single file with an absolute path '.txt'; this is likely not your intention.\n\nYou can check further customization when including loaders in the loaders section.\n\n### Plugins\nWhile loaders are used to transform certain types of modules, **```plugins``` can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables**.\n\nCheck out the plugin interface and how to use it to extend webpack's capabilities.\n\nIn order to use a plugin, you need to require() it and add it to the plugins array. Most plugins are customizable through options. Since you can use a plugin multiple times in a configuration for different purposes, you need to create an instance of it by calling it with the new operator.\n\nwebpack.config.js\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm\nconst webpack = require('webpack'); //to access built-in plugins\n\nmodule.exports = {\n  module: {\n    rules: [\n      { test: /\\.txt$/, use: 'raw-loader' }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: './src/index.html'})\n  ]\n};\n```\nIn the example above, the ```html-webpack-plugin``` **generates an HTML file for your application by injecting automatically all your generated bundles**.\n\nThere are many plugins that webpack provides out of the box! Check out the list of plugins.\n\nUsing plugins in your webpack configuration is straightforward. However, there are many use cases that are worth further exploration. Learn more about them here.\n\n### Mode\n**By setting the mode parameter to either development, production or none, you can enable webpack's built-in optimizations that correspond to each environment**. The default value is production.\n```\nmodule.exports = {\n  mode: 'production'\n};\n```\nLearn more about the mode configuration here and what optimizations take place on each value.\n\n### Browser Compatibility\nwebpack supports all browsers that are ES5-compliant (IE8 and below are not supported). webpack needs Promise for import() and require.ensure(). If you want to support older browsers, you will need to load a polyfill before using these expressions.\n\n### Environment\nwebpack runs on Node.js version 8.x and higher.\n","references":"- [Webpack.js.org Concepts](https://webpack.js.org/concepts/)","featured_image_url":"https://codersnack.com/assets/images/webpack-icon.png","slug":"webpack-concepts","weblink":"https://codersnack.com/webpack-concepts","featured_image_preview":{"id":76,"name":"webpack-icon.png","hash":"d171cd91ae10458eb7ecac92ac008121","sha256":"MLiPpyi7gDpLT2rlV4VFsL85AQdLPT5T22YtAr-6kx0","ext":".png","mime":"image/png","size":78.12,"url":"/uploads/d171cd91ae10458eb7ecac92ac008121.png","provider":"local","provider_metadata":null,"created_at":"2020-03-17T10:52:14.160Z","updated_at":"2020-03-17T10:52:14.160Z"}},"codersnacks_category":{"id":13,"header":"Webpack","description":"webpack is used to compile JavaScript modules","snacks_by_cat_json_filename":"webpack.snacks.json","key":"webpack","image_url":"https://codersnack.com/assets/images/webpack-icon.png","created_at":"2020-03-17T10:37:18.804Z","updated_at":"2020-03-17T10:37:18.804Z","image_preview":{"id":75,"name":"webpack-icon.png","hash":"b18f2e50556b448385495ae3c25635d7","sha256":"MLiPpyi7gDpLT2rlV4VFsL85AQdLPT5T22YtAr-6kx0","ext":".png","mime":"image/png","size":78.12,"url":"/uploads/b18f2e50556b448385495ae3c25635d7.png","provider":"local","provider_metadata":null,"created_at":"2020-03-17T10:37:18.836Z","updated_at":"2020-03-17T10:37:18.836Z"}},"title":"Webpack - concepts","created_at":"2020-03-17T10:52:36.601Z","updated_at":"2020-03-17T10:52:36.698Z"},{"id":167,"codersnack":{"id":163,"header":"Webpack - Intro to Federated Modules and Micro-frontends","created_at":"2022-03-25T15:15:34.888Z","updated_at":"2022-03-25T15:15:34.888Z","explanation":"\n## What are Micro Frontends?\n\nThe term Micro Frontends first came up in ThoughtWorks Technology Radar at the end of 2016. **It extends the concepts of micro services to the frontend world**. \n\nThe current trend is to build a feature-rich and powerful browser application, aka single page app, which sits on top of a micro service architecture. Over time the frontend layer, often developed by a separate team, grows and gets more difficult to maintain. That’s what we call a Frontend Monolith.\n\n![frontend monolith](https://codersnack.com/assets/images/monolith-frontback-microservices.png)\n\n**The idea behind Micro Frontends is to think about a website or web app as a composition of features which are owned by independent teams**. Each team has a distinct area of business or mission it cares about and specialises in. A team is cross functional and develops its features end-to-end, from database to user interface.\n\n![frontend monolith](https://codersnack.com/assets/images/verticals-headline.png)\n.\nHowever, this idea is not new. It has a lot in common with the Self-contained Systems concept. In the past approaches like this went by the name of Frontend Integration for Verticalised Systems. But Micro Frontends is clearly a more friendly and less bulky term.\n\n##  Core Ideas behind Micro Frontends\n\n####   Be Technology Agnostic\n\n**Each team should be able to choose and upgrade their stack without having to coordinate with other teams**. Custom Elements are a great way to hide implementation details while providing a neutral interface to others.\n\n####   Isolate Team Code\n\nDon’t share a runtime, even if all teams use the same framework. Build independent apps that are self contained. **Don’t rely on shared state or global variables**.\n\n####   Establish Team Prefixes\n\n**Agree on naming conventions where isolation is not possible yet.** Namespace CSS, Events, Local Storage and Cookies to avoid collisions and clarify ownership.\n\n####   Favor Native Browser Features over Custom APIs\n\n**Use Browser Events for communication instead of building a global PubSub system**. If you really have to build a cross team API, try keeping it as simple as possible.\n\n####   Build a Resilient Site\n\n**Your feature should be useful, even if JavaScript failed or hasn’t executed yet**. Use Universal Rendering and Progressive Enhancement to improve perceived performance.\n\n##  Module Federation\n\nA scalable solution to sharing code between independent applications has never been convenient, and near impossible at scale. The closest we had was externals or DLLPlugin, forcing centralized dependency on a external file. **It was a hassle to share code, the separate applications were not truly standalone and usually, a limited number of dependencies are shared**. Moreover, sharing actual feature code or components between separately bundled applications is unfeasible, unproductive, and unprofitable.\n\n**We need a scalable solution to sharing node modules and feature/application code**. It needs to happen at runtime in order to be adaptive and dynamic. Externals doesn’t do an efficient or flexible job. Import maps do not solve scale problems. I’m not trying to download code and share dependencies alone, **I need an orchestration layer that dynamically shares modules at runtime, with fallbacks**.\n\n***Module Federation* is a type of JavaScript architecture Zack Jackson invented** and prototyped. Then with the help of co-creator and the founder of Webpack — it was turned into one of the **most exciting features in the Webpack 5 core** (there’s some cool stuff in there, and the new API is really powerful and clean).\n\n***Module Federation* allows a JavaScript application to dynamically load code from another application  and  in the process, share dependencies**. \n\n**If an application consuming a federated module does not have a dependency needed by the federated code,  Webpack will download the missing dependency from that federated build origin.**\n\n**Code is shared if it can be, but fallbacks exist in each case. Federated code can always load its dependencies but will attempt to use the consumers’ dependencies before downloading more payload**. This means less code duplication and dependency sharing just like a monolithic Webpack build. \n\n\n##  Terminology\n- **Module federation:** the same idea as Apollo GraphQL federation — but applied to JavaScript modules. In the browser and in node.js. *Universal Module Federation*\n- **A host**: a Webpack **build** that is **initialized first during a page load **(when the onLoad event is triggered)\n- **A remote**: another Webpack **build**, where **part of it is being consumed by a “host”**\n- **Bidirectional-hosts**: when a **bundle or Webpack build can work as a host or as a remote**. Either consuming other applications or being consumed by others — at runtime\n\n> It’s important to note that this system is designed so that **each completely standalone build/app can be in its own repository, deployed independently, and run as its own independent SPA**.\n\n**These applications are all bi-directional hosts**. Any application that’s l**oaded first, becomes a host**.  As you **change routes and move through an application, it loads federated modules in the same way you would implement dynamic imports**. However if you were to refresh the page, whatever application first starts on that load, becomes a host.\n\n\n> **Let’s say each page of a website is deployed and compiled independently**. I want this micro-frontend style architecture but **do not want page reloads** when changing route. I also want to **dynamically share code & vendors between them so it’s just as efficient as if it was one large Webpack build**, with code splitting.\n\nLanding on the home page app would make the “home” page the “host”. If you browse to an “about” page, the host (home page spa) is actually dynamically importing a module from another independent application (the about page spa). It doesn’t load the main entry point and another entire application: only a few kilobytes of code. If I am on the “about” page and refresh the browser. The “about” page becomes the “host” and browsing back to the home page again would be a case of the about page “host” Fetching a fragment of runtime from a “remote” — the home page. **All applications are both remote and host, consumable and consumers of any other federated module in the system**.\n","references":"- [https://module-federation.github.io/blog/get-started](Getting Started With Federated Modules)\n- [https://micro-frontends.org/](https://micro-frontends.org/)\n- [https://indepth.dev/posts/1173/webpack-5-module-federation-a-game-changer-in-javascript-architecture](Zack Jackson's Article)","featured_image_url":"https://codersnack.com/assets/images/webpack-icon.png","slug":"webpack-getting-started-module-federation","weblink":"https://codersnack.com/webpack-getting-started-module-federation","featured_image_preview":{"id":203,"name":"webpack-icon.png","hash":"3550831758a841b3b42280c23f19a863","sha256":"MLiPpyi7gDpLT2rlV4VFsL85AQdLPT5T22YtAr-6kx0","ext":".png","mime":"image/png","size":78.12,"url":"/uploads/3550831758a841b3b42280c23f19a863.png","provider":"local","provider_metadata":null,"created_at":"2022-03-25T15:15:34.927Z","updated_at":"2022-03-25T15:15:34.927Z"}},"codersnacks_category":{"id":13,"header":"Webpack","description":"webpack is used to compile JavaScript modules","snacks_by_cat_json_filename":"webpack.snacks.json","key":"webpack","image_url":"https://codersnack.com/assets/images/webpack-icon.png","created_at":"2020-03-17T10:37:18.804Z","updated_at":"2020-03-17T10:37:18.804Z","image_preview":{"id":75,"name":"webpack-icon.png","hash":"b18f2e50556b448385495ae3c25635d7","sha256":"MLiPpyi7gDpLT2rlV4VFsL85AQdLPT5T22YtAr-6kx0","ext":".png","mime":"image/png","size":78.12,"url":"/uploads/b18f2e50556b448385495ae3c25635d7.png","provider":"local","provider_metadata":null,"created_at":"2020-03-17T10:37:18.836Z","updated_at":"2020-03-17T10:37:18.836Z"}},"title":"Webpack - module federation introduction","created_at":"2022-03-25T15:16:05.319Z","updated_at":"2022-03-25T15:16:05.327Z"}]