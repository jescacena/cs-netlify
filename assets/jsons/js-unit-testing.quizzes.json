[{"id":31,"codersnack":{"id":33,"header":"What is Unit Testing and TDD?","created_at":"2020-01-28T19:17:01.851Z","updated_at":"2021-11-29T21:50:29.915Z","explanation":"**A unit test runs some code over a segment of your program checking the input and output**. These tests allow developers to check individual areas of a program **to see where (and why) errors occur**.\n\nThis comes with an inherent understanding of what you’re trying to test for and how the code should function.\n\n>Every developer knows we should write unit tests in order to prevent defects from being deployed to production.\n\n#### Why Bother with Test Discipline?\n**Your tests are your first and best line of defense against software defects**. Your tests are more important than linting & static analysis (which can only find a subclass of errors, not problems with your actual program logic). Tests are as important as the implementation itself (all that matters is that the code meets the requirement — how it’s implemented doesn’t matter at all unless it’s implemented poorly).\n\nUnit tests combine many **features** that make them your secret weapon to application success:\n\n- **Design aid**: Writing tests first gives you a clearer perspective on the ideal API design.\n- **Feature documentation (for developers)**: Test descriptions enshrine in code every implemented feature requirement.\n- **Test your developer understanding**: Does the developer understand the problem enough to articulate in code all critical component requirements?\n- **Quality Assurance**: Manual QA is error prone. In my experience, it’s impossible for a developer to remember all features that need testing after making a change to refactor, add new features, or remove features.\n- **Continuous Delivery Aid**: Automated QA affords the opportunity to automatically prevent broken builds from being deployed to production.\n\nUnit tests don’t need to be twisted or manipulated to serve all of those broad-ranging goals. Rather, it is in the essential nature of a unit test to satisfy all of those needs. These benefits are all side-effects of a well-written test suite with good coverage.\n\n#### The Science of TDD\n**Test-driven development (TDD) is a software development process** that relies on the repetition of a very short development cycle: \n- requirements are turned into very specific test cases, \n- then the code is improved so that the tests pass\n\n>This is opposed to software development that allows code to be added that is not proven to meet requirements.\n\nThe evidence says:\n- **TDD can reduce bug density**.\n- **TDD can encourage more modular designs** (enhancing software agility/team velocity).\n- **TDD can reduce code complexity**.\n\nSays science: *There is significant empirical evidence that TDD works*.\n\n#### Write Tests First\nStudies from Microsoft Research, IBM, and Springer tested the efficacy of test-first vs test-after methodologies and consistently found that a test-first process produces better results than adding tests later. It is resoundingly clear: Before you implement, write the test.\n>Before you implement,write the test.\n\n#### How unit tests are used\n- **Design aid**: written during design phase, prior to implementation.\n- **Feature documentation & test of developer understanding**: The test should provide a clear description of the feature being tested.\n- **QA/Continuous Delivery**: The tests should halt the delivery pipeline on failure and produce a good bug report when they fail.\n","references":"- [Medium - What Every Unit Test needs](https://medium.com/javascript-scene/what-every-unit-test-needs-f6cd34d9836d)","featured_image_url":"https://codersnack.com/assets/images/js-unit-testing-icon.png","slug":"js-unit-testing-whatis-tdd","weblink":"https://codersnack.com/js-unit-testing-whatis-tdd","featured_image_preview":{"id":43,"name":"js-unit-testing-icon.png","hash":"de5b1b99548e4980ad07ab40ada046cd","sha256":"SdZK7F_99qiud4oti+JJfUnRK+0U8Dd3QZNg9MrAWG8","ext":".png","mime":"image/png","size":52.94,"url":"/uploads/de5b1b99548e4980ad07ab40ada046cd.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T19:17:01.864Z","updated_at":"2020-01-28T19:17:01.864Z"}},"codersnacks_quiz":{"id":31,"question":"One of the things unit test are used for is ...","response_valid":"Feature documentation & test of developer understanding","response_invalid1":"print source code documentation","response_invalid2":"being a helpful tool for manual testing","created_at":"2020-01-28T19:21:09.527Z","updated_at":"2020-01-28T19:21:09.527Z"},"codersnacks_category":{"id":8,"header":"Javascript Unit Testing","description":"All about testing single js artifacts","snacks_by_cat_json_filename":"js-unit-testing.snacks.json","key":"js-unit-testing","image_url":"https://codersnack.com/assets/images/js-unit-testing-icon.png","created_at":"2020-01-28T18:52:32.193Z","updated_at":"2020-01-28T18:52:32.193Z","image_preview":{"id":42,"name":"js-unit-testing-icon.png","hash":"d3bdf132b6614e11ac16237a1c36b0c7","sha256":"SdZK7F_99qiud4oti+JJfUnRK+0U8Dd3QZNg9MrAWG8","ext":".png","mime":"image/png","size":52.94,"url":"/uploads/d3bdf132b6614e11ac16237a1c36b0c7.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T18:52:32.207Z","updated_at":"2020-01-28T18:52:32.207Z"}},"title":"Js unit testing one of the things used for","created_at":"2020-01-28T19:22:09.358Z","updated_at":"2020-01-28T19:22:09.362Z"}]