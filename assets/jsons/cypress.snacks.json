[{"id":161,"codersnack":{"id":157,"header":"Cypress - Introduction","created_at":"2022-03-04T11:27:34.033Z","updated_at":"2022-03-04T11:27:34.033Z","explanation":"Cypress is a next generation **front end testing tool built for the modern web**. We address the key pain points developers and QA engineers face when testing modern applications.\n\nWe make it possible to:\n\n- Set up tests\n- Write tests\n- Run tests\n- Debug Tests\n\nCypress is most often compared to Selenium; however Cypress is both fundamentally and architecturally different. **Cypress is not constrained by the same restrictions as Selenium.**\n\nThis enables you to **write faster, easier and more reliable tests**.\n\n\n###  Who uses Cypress?\n\n**Our users are typically developers or QA engineers** building web applications using modern JavaScript frameworks.\n\nCypress enables you to write all types of tests:\n\n- End-to-end tests\n- Integration tests\n- Unit tests\n\nCypress can test anything that runs in a browser.\n\n\n###  Cypress ecosystem\n\nCypress consists of a free, open source, **locally installed Test Runner and a Dashboard Service for recording your tests**.\n\n- **First**: Cypress helps you set up and start writing tests every day while you build your application locally. **TDD** at its best!\n- **Later**: After building up a suite of tests and **integrating Cypress with your CI** Provider, our Dashboard Service can record your test runs. You'll never have to wonder: Why did this fail?\n\n\n###  Our mission\n\nOur mission is to build a thriving, open source ecosystem that enhances productivity, makes testing an enjoyable experience, and generates developer happiness. We hold ourselves accountable to champion a testing process that actually works.\n\nWe believe our documentation should be approachable. This means enabling our readers to understand fully not just the what but the why as well.\n\nWe want to help developers build a new generation of modern applications faster, better, and without the stress and anxiety associated with managing tests.\n\nWe know that in order for us to be successful we must enable, nurture, and foster an ecosystem that thrives on open source. Every line of test code is an investment in your codebase, it will never be coupled to us as a paid service or company. Tests will be able to run and work independently, always.\n\nWe believe testing needs a lot of  and we are here to build a tool, a service, and a community that everyone can learn and benefit from. We're solving the hardest pain points shared by every developer working on the web. We believe in this mission and hope that you will join us to make Cypress a lasting ecosystem that makes everyone happy.\n\n\n###   Features\n\nCypress comes fully baked, batteries included. Here is a list of things it can do that no other testing framework can:\n\n- **Time Travel:** Cypress takes snapshots as your tests run. Hover over commands in the Command Log to see exactly what happened at each step.\n\n- **Debuggability**: Stop guessing why your tests are failing. Debug directly from familiar tools like Developer Tools. Our readable errors and stack traces make debugging lightning fast.\n\n- **Automatic Waiting:** Never add waits or sleeps to your tests. Cypress automatically waits for commands and assertions before moving on. No more async hell.\n\n- **Spies, Stubs, and Clocks**: Verify and control the behavior of functions, server responses, or timers. The same functionality you love from unit testing is right at your fingertips.\n\n- **Network Traffic Control**: Easily control, stub, and test edge cases without involving your server. You can stub network traffic however you like.\n\n- **Consistent Results**: Our architecture doesnâ€™t use Selenium or WebDriver. Say hello to fast, consistent and reliable tests that are flake-free.\n\n- **Screenshots and Videos**: View screenshots taken automatically on failure, or videos of your entire test suite when run from the CLI.\n\n- **Cross browser Testing**: Run tests within Firefox and Chrome-family browsers (including Edge and Electron) locally and optimally in a Continuous Integration pipeline.\n\n\n\n###  Architecture\n\nMost testing tools (like Selenium) operate by running outside of the browser and executing remote commands across the network. Cypress is the exact opposite. **Cypress is executed in the same run loop as your application.**\n\n**Behind Cypress is a Node server process**. Cypress and the Node process constantly communicate, synchronize, and perform tasks on behalf of each other. Having access to both parts (front and back) gives us the ability to respond to your application's events in real time, while at the same time work outside of the browser for tasks that require a higher privilege.\n\n**Cypress also operates at the network layer by reading and altering web traffic on the fly.** This enables Cypress to not only modify everything coming in and out of the browser, but also to change code that may interfere with its ability to automate the browser.\n\nCypress ultimately controls the entire automation process from top to bottom, which puts it in the unique position of being able to understand everything happening in and outside of the browser. This means Cypress is capable of delivering more consistent results than any other testing tool.\n\n**Because Cypress is installed locally on your machine, it can additionally tap into the operating system for automation tasks**. This makes performing tasks such as **taking screenshots, recording videos,** general file system operations and network operations possible.\n\n\n###  Native access\n\n**Because Cypress operates within your application, that means it has native access to every single object**. Whether it is the window, the document, a DOM element, your application instance, a function, a timer, a service worker, or anything else - you have access to it in your Cypress tests. There is no object serialization, there is no over-the-wire protocol - you have access to everything. Your test code can access all the same objects that your application code can.\n\n\n###  New kind of testing\n\nHaving ultimate control over your application, the network traffic, and native access to every host object unlocks a new way of testing that has never been possible before. Instead of being 'locked out' of your application and not being able to easily control it - Cypress instead lets you alter any aspect of how your application works. Instead of slow and expensive tests, such as creating the state required for a given situation, you can create these states artificially like you would in an unit test. For instance you can:\n\n- **Stub the browser** or your application's functions and force them to behave as needed in your test case.\n- **Expose data store**s (like in Redux) so you can programmatically alter the state of your application directly from your test code.\n- **Test edge cases like 'empty views'** by forcing your server to send empty responses.\n- **Test how your application responds to errors** on your server by modifying response status codes to be 500.\n- **Modify DOM elements directly** - like forcing hidden elements to be shown.\n- **Use 3rd party plugins programmatically**. Instead of fussing with complex UI widgets like multi selects, autocompletes, drop downs, tree views or calendars, you can call methods directly from your test code to control them.\n- **Prevent Google Analytics from loading** before any of your application code executes when testing.\n- **Get synchronous notification**s whenever your application transitions to a new page or when it begins to unload.\n- **Control time by moving forward or backward** so that timers or polls automatically fire without having to wait for the required time in your tests.\n- **Add your own event listeners to respond to your application**. You could update your application code to behave differently when under tests in Cypress. You can control WebSocket messages from within Cypress, conditionally load 3rd party scripts, or call functions directly on your application.\n\n\n###   Shortcuts\n\nTrying to test hard to reach areas of your application? Don't like the side effects an action creates? **Tired of repeating the same repetitive and slow actions** over and over again? **You can skip them for most test cases.**\n\n**Cypress prevents you from being forced to always 'act like a user' to generate the state of a given situation**. With Cypress you can programmatically interact and control your application. You no longer have to use your UI to build up state.\n\n**That means you do not have to visit a login page, type in a username and password and wait for the page to load and/or redirect for every test you run**. Cypress gives you the ability to take shortcuts and programmatically log in. With commands like **cy.request()**, you can send HTTP requests directly, yet have those requests synchronized with the browser. Cookies are automatically sent and applied back. **Worried about CORS? Don't be, it is completely bypassed**. The power to choose when to test like a user and when to skip slow and repetitive parts is yours.\n\n\n### Flake resistant\n\n**Cypress knows and understands everything that happens in your application synchronously. It is notified the moment the page loads and the moment the page unloads.** It is impossible for Cypress to miss elements when it fires events. Cypress even knows how fast an element is animating and will wait for it to stop animating. Additionally, it automatically waits for elements to become visible, to become enabled, and to stop being covered. When pages begin to transition, Cypress will pause command execution until the following page is fully loaded. You can even tell Cypress to wait on specific network requests to finish.\n\n**Cypress executes the vast majority of its commands inside the browser, so there is no network lag**. Commands execute and drive your application as fast as it is capable of rendering. To deal with modern JavaScript frameworks with complex UIs, you use assertions to tell Cypress what the desired state of your application should be. Cypress will automatically wait for your application to reach this state before moving on. You are completely insulated from fussing with manual waits or retries. Cypress automatically waits for elements to exist and will never yield you stale elements that have been detached from the DOM.\n\n\n###  Debuggability\n\nAbove all else Cypress has been built for usability.\n\nThere are hundreds of **custom error messages describing the exact reason Cypress failed **your test.\n\nThere is a **rich UI which visually shows you the command execution**, assertions, network requests, spies, stubs, page loads, or URL changes.\n\n**Cypress takes snapshots of your application** and enables you to time travel back to the state it was in when commands ran.\n\n**You can use the Developer Tools while your tests run, you can see every console message, every network request**. You can inspect elements, and you can even use debugger statements in your spec code or your application code. There is no fidelity loss - you can use all the tools you're already comfortable with. This enables you to test and develop all at the same time.\n","references":"- [Cypress in a nutshell](https://docs.cypress.io/guides/overview/why-cypress#In-a-nutshell)\n","featured_image_url":"https://codersnack.com/assets/images/cypress-logo.png","slug":"cypress-introduction","weblink":"https://codersnack.com/cypress-introduction","featured_image_preview":{"id":196,"name":"cypress-logo.png","hash":"d5116861a0734d01bbbb0aef4c5485f7","sha256":"6vIM6WGd37VfNLL_XcyQ01BQFK+JNcWYz1MBTGPQeqE","ext":".png","mime":"image/png","size":27.78,"url":"/uploads/d5116861a0734d01bbbb0aef4c5485f7.png","provider":"local","provider_metadata":null,"created_at":"2022-03-04T11:27:34.043Z","updated_at":"2022-03-04T11:27:34.043Z"}},"codersnacks_category":{"id":23,"header":"Cypress","description":"Cypress is a next generation front end testing tool built for the modern web","snacks_by_cat_json_filename":"cypress.snacks.json","key":"cypress","image_url":"https://codersnack.com/assets/images/cypress-logo.png","created_at":"2022-03-04T10:52:53.732Z","updated_at":"2022-03-04T10:52:53.732Z","image_preview":{"id":195,"name":"cypress-logo.png","hash":"449100d88da641c39075e760cee18562","sha256":"6vIM6WGd37VfNLL_XcyQ01BQFK+JNcWYz1MBTGPQeqE","ext":".png","mime":"image/png","size":27.78,"url":"/uploads/449100d88da641c39075e760cee18562.png","provider":"local","provider_metadata":null,"created_at":"2022-03-04T10:52:53.748Z","updated_at":"2022-03-04T10:52:53.748Z"}},"title":"Cypress Introduction","created_at":"2022-03-04T11:27:59.163Z","updated_at":"2022-03-04T11:27:59.168Z"},{"id":162,"codersnack":{"id":158,"header":"Cypress - Install","created_at":"2022-03-07T19:33:25.896Z","updated_at":"2022-03-07T19:33:25.896Z","explanation":"###  System requirements\n\n\n####   Operating System\n**Cypress is a desktop application that is installed on your computer.** The desktop application supports these operating systems:\n\n- macOS 10.9 and above (64-bit only)\n- Linux Ubuntu 12.04 and above, Fedora 21 and Debian 8 (64-bit only)\n- Windows 7 and above (64-bit only)\n\n####  Node.js\nIf you're using npm to install Cypress, we support:\n\n- Node.js 12 or 14 and above\n\n####Â   Docker\n\nDocker images with all of the required dependencies installed are available under **cypress/base**\n\nIf you're running your projects in containers, then you'll want Cypress in the container with the Node.js process.\n``` \n  ui:\n    image: cypress/base:latest\n    # if targeting a specific node version, use e.g.\n    # image: cypress/base:14\n```\n**cypress/base** is a drop-in replacement for base docker node images.\n\n\n###   Installing\n\nInstall Cypress via npm:\n\n``` \ncd /your/project/path\nnpm install cypress --save-dev\n``` \n**This will install Cypress locally as a dev dependency for your project**.\n\n> Make sure that you have already run npm init or have a node_modules folder or package.json file in the root of your project to ensure cypress is installed in the correct directory.\n\n------------------------------------------------------------------------\n\n> Notice that the **Cypress npm package is a wrapper around the Cypress binary.** The version of the npm package determines the version of the binary downloaded. As of version 3.0, the **binary is downloaded to a global cache directory to be used across projects.**\n\n------------------------------------------------------------------------\n\n> System proxy properties http_proxy, https_proxy and no_proxy are respected for the download of the Cypress binary. You can also use the npm properties npm_config_proxy and npm_config_https_proxy. Those have lower priority, so they will only be used if the system properties are being resolved to not use a proxy.\n\n------------------------------------------------------------------------\n\n\n> Best Practice:\nThe recommended approach is to install Cypress with npm because :\nCypress is versioned like any other dependency.\nIt simplifies running Cypress in Continuous Integration.\n\n###  Continuous integration\nPlease read our [Continuous Integration](https://docs.cypress.io/guides/continuous-integration/introduction) docs for help installing Cypress in CI. When running in linux you'll need to install some [system dependencies](https://docs.cypress.io/guides/continuous-integration/introduction#Dependencies) or you can use our Docker images which have everything you need prebuilt.\n\n\n###  Opening Cypress\n\nIf you used npm to install, Cypress has now been installed to your ./node_modules directory, with its **binary executable accessible from *./node_modules/.bin***.\n\nNow you can open Cypress from your project root one of the following ways:\n\nThe long way with the full path\n\n```\n./node_modules/.bin/cypress open\n```\nOr with the shortcut using npm bin\n\n```\n$(npm bin)/cypress open\n```\nOr by using npx\n\nnote: npx is included with npm > v5.2 or can be installed separately.\n\n```\nnpx cypress open\n```\nOr by using yarn\n\n```\nyarn run cypress open\n```\nAfter a moment, the Cypress Test Runner will launch.\n\n\n###  Switching browsers\n**The Cypress Test Runner attempts to find all compatible browsers on the user's machine**. The drop down to select a different browser is in the top right corner of the Test Runner.\n\nRead Launching Browsers for more information on how Cypress controls a real browser during end-to-end tests.\n\n####  Cross Browser Support\n\n**Cypress currently supports Firefox and Chrome-family browsers (including Edge and Electron)**. To run tests optimally across these browsers in CI, check out the strategies demonstrated in the cross browser Testing guide.\n\n\n###  Adding npm scripts\n\nWhile there's nothing wrong with writing out the full path to the Cypress executable each time, **it's much easier and clearer to add Cypress commands to the scripts field in your package.json file**.\n\n```\n{\n  \"scripts\": {\n    \"cypress:open\": \"cypress open\"\n  }\n}\n```\nNow you can invoke the command from your project root like so:\n\n```\nnpm run cypress:open\n```\n...and Cypress will open right up for you.","references":"- [Install Cypressl](https://docs.cypress.io/guides/getting-started/installing-cypress#System-requirements)\n","featured_image_url":"https://codersnack.com/assets/images/cypress-logo.png","slug":"cypress-install-write-first-test","weblink":"https://codersnack.com/cypress-install-write-first-test","featured_image_preview":{"id":197,"name":"cypress-logo.png","hash":"9b0a324cb58944008e8b67fe757bf8d1","sha256":"6vIM6WGd37VfNLL_XcyQ01BQFK+JNcWYz1MBTGPQeqE","ext":".png","mime":"image/png","size":27.78,"url":"/uploads/9b0a324cb58944008e8b67fe757bf8d1.png","provider":"local","provider_metadata":null,"created_at":"2022-03-07T19:33:25.914Z","updated_at":"2022-03-07T19:33:25.914Z"}},"codersnacks_category":{"id":23,"header":"Cypress","description":"Cypress is a next generation front end testing tool built for the modern web","snacks_by_cat_json_filename":"cypress.snacks.json","key":"cypress","image_url":"https://codersnack.com/assets/images/cypress-logo.png","created_at":"2022-03-04T10:52:53.732Z","updated_at":"2022-03-04T10:52:53.732Z","image_preview":{"id":195,"name":"cypress-logo.png","hash":"449100d88da641c39075e760cee18562","sha256":"6vIM6WGd37VfNLL_XcyQ01BQFK+JNcWYz1MBTGPQeqE","ext":".png","mime":"image/png","size":27.78,"url":"/uploads/449100d88da641c39075e760cee18562.png","provider":"local","provider_metadata":null,"created_at":"2022-03-04T10:52:53.748Z","updated_at":"2022-03-04T10:52:53.748Z"}},"title":"Cypress - Install","created_at":"2022-03-07T19:33:46.685Z","updated_at":"2022-03-07T19:33:46.721Z"},{"id":163,"codersnack":{"id":159,"header":"Cypress - Writing your first test","created_at":"2022-03-07T20:22:28.435Z","updated_at":"2022-03-07T20:22:28.435Z","explanation":"\n###  Add a test file\n\nAssuming you've successfully installed the Test Runner and opened the Cypress app, now it's time to write our first test. We're going to:\n\n- Create a sample_spec.js file.\n- Watch Cypress update our list of specs.\n- Launch the Cypress Test Runner.\n\n**Let's create a new file in the *cypress/integration* folder** that was created for us:\n```\ntouch {your_project}/cypress/integration/sample_spec.js\n```\nOnce we've created that file, **we should see the Cypress Test Runner immediately display it in the list of Integration Tests**. **Cypress monitors your spec files for any changes and automatically displays any changes**.\n\nEven though we haven't written any tests yet - that's okay - **let's click on sample_spec.js and watch Cypress launch your browser.**\n\n**Cypress opens the test in a browser installed on your system**. You can read more about how we do this in Launching Browsers.\n\nWe are now officially in the Cypress Test Runner. This is where we will spend the majority of your time testing.\n\n**Notice Cypress displays the message that it couldn't find any tests**. This is normal - we haven't written any tests! Sometimes you'll also see this message if there was an error parsing your test file. **You can always open your Dev Tools to inspect the Console for any syntax or parsing errors that prevented Cypress from reading your tests**.\n\n\n###  Write your first test\n\nNow it's time to write our first test. We're going to:\n\n- Write our first passing test.\n- Write our first failing test.\n- Watch Cypress reload in real time.\nAs we continue to save our new test file we'll see the browser auto reloading in real time.\n\nOpen up your favorite IDE and add the code below to our sample_spec.js test file.\n\n```\ndescribe('My First Test', () => {\n  it('Does not do much!', () => {\n    expect(true).to.equal(true)\n  })\n})\n```\nOnce you save **this file you should see the browser reload.**\n\nAlthough it doesn't do anything useful, this is our first passing test! âœ…\n\nOver in the Command Log you'll see Cypress display the suite, the test and your first assertion (which should be passing in green).\n\n**Notice Cypress displays a message about this being the default page on the righthand side. Cypress assumes you'll want to go out and visit a URL on the internet** - but it can also work just fine without that.\n\nNow let's write **our first failing test**.\n\n```\ndescribe('My First Test', () => {\n  it('Does not do much!', () => {\n    expect(true).to.equal(false)\n  })\n})\n```\nOnce you save again, you'll see Cypress display the failing test in red since true does not equal false.\n\nCypress also displays the stack trace and the code frame where the assertion failed (when available). **You can click on the blue file link to open the file where the error occurred in your preferred file opener**. To read more about the error's display, read about Debugging Errors.\n\nCypress provides a nice Test Runner that gives you a visual structure of suites, tests, and assertions. Soon you'll also see commands, page events, network requests, and more.\n\n> What are describe, it, and expect?\nAll of these functions come from Bundled Tools that Cypress bakes in.\ndescribe and it come from Mocha\nexpect comes from Chai\nCypress builds on these popular tools and frameworks that you hopefully already have some familiarity and knowledge of. If not, that's okay too.\n\n###  Write a real test\n\nA solid test generally covers 3 phases:\n\n- Set up the application state.\n- Take an action.\n- Make an assertion about the resulting application state.\n\nYou might also see this phrased as **\"Given, When, Then\", or \"Arrange, Act, Assert\"**. But the idea is: First you put the application into a specific state, then you take some action in the application that causes it to change, and finally you check the resulting application state.\n\nToday, **we'll take a narrow view of these steps and map them cleanly to Cypress commands**:\n\n- Visit a web page.\n- Query for an element.\n- Interact with that element.\n- Assert about the content on the page.\n \n####   Step 1: Visit a page\n\nFirst, let's visit a web page. We will visit our Kitchen Sink application in this example so that you can try Cypress out without needing to worry about finding a page to test.\n\n**We can pass the URL we want to visit to *cy.visit()***. Let's replace our previous test with the one below that actually visits a page:\n\n```\ndescribe('My First Test', () => {\n  it('Visits the Kitchen Sink', () => {\n    cy.visit('https://example.cypress.io')\n  })\n})\n```\nSave the file and switch back over to the Cypress Test Runner. You might notice a few things:\n\n- The Command Log now shows the new VISIT action.\n- The Kitchen Sink application has been loaded into the App Preview pane.\n- The test is green, even though we made no assertions.\n- The VISIT displays a blue pending state until the page finishes loading.\n\n> Had this request come back with a non 2xx status code such as 404 or 500, or if there was a JavaScript error in the application's code, the test would have failed.\n\n\n####  Step 2: Query for an element\n\n**Now that we've got a page loaded, we need to take some action on it. Why don't we click a link on the page?** Sounds easy enough, let's go look for one we like... how about type?\n\nTo find this element by its contents, **we'll use *cy.contains()***.\n\nLet's add it to our test and see what happens:\n\n```\ndescribe('My First Test', () => {\n  it('finds the content \"type\"', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type')\n  })\n})\n```\n\nOur test should now display CONTAINS in the Command Log and still be green.\n\nEven without adding an assertion, we know that everything is okay! This is because **many of Cypress' commands are built to fail if they don't find what they're expecting to find. This is known as a *Default Assertion*.**\n\nTo verify this, replace type with something not on the page, like hype. You'll notice the test goes red, but only after about 4 seconds!\n\nCan you see what Cypress is doing under the hood? It's automatically waiting and retrying because it expects the content to eventually be found in the DOM. It doesn't immediately fail!\n\n\n> **Error Messages**\nWe've taken care at Cypress to write hundreds of custom error messages that attempt to clearly explain what went wrong. In this case, Cypress timed out retrying to find the content hype within the entire page. To read more about the error's display, read about Debugging Errors.\n\nBefore we add another command - let's get this test back to passing. Replace hype with type.\n\n####  Step 3: Click an element\nOk, now we want to click on the link we found. How do we do that? **Add a .click() command to the end of the previous command**, like so:\n\n```\ndescribe('My First Test', () => {\n  it('clicks the link \"type\"', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n  })\n})\n```\n\nYou can almost read it like a little story! Cypress calls this \"chaining\" and we chain together commands to build tests that really express what the app does in a declarative way.\n\nAlso note that the App Preview pane has updated further after the click, following the link and showing the destination page.\n\nNow we can assert something about this new page!\n\n####   Step 4: Make an assertion\n\n**Let's make an assertion about something on the new page we clicked into**. Perhaps we'd like to **make sure the new URL is the expected URL**. We can do that by looking up the URL and **chaining an assertion to it with* .should()***.\n\nHere's what that looks like:\n\n```\ndescribe('My First Test', () => {\n  it('clicking \"type\" navigates to a new url', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n  })\n})\n```\n\n####  Adding more commands and assertions\n\nWe are not limited to a single interaction and assertion in a given test. In fact, many interactions in an application may require multiple steps and are likely to change your application state in more than one way.\n\n**We can continue the interactions and assertions in this test by adding another chain to interact with and verify the behavior of elements on this new page.**\n\n**We can use *cy.get()* to select an element based on a CSS class**. Then **we can use the *.type()* command to enter text into the selected input**. Finally, **we can verify that the value of the input reflects the text that was typed with another *.should()***.\n\n```\ndescribe('My First Test', () => {\n  it('Gets, types and asserts', () => {\n    cy.visit('https://example.cypress.io')\n\n    cy.contains('type').click()\n\n    // Should be on a new URL which includes '/commands/actions'\n    cy.url().should('include', '/commands/actions')\n\n    // Get an input, type into it and verify that the value has been updated\n    cy.get('.action-email')\n      .type('fake@email.com')\n      .should('have.value', 'fake@email.com')\n  })\n})\n```\n\nAnd there you have it: a short test in Cypress that visits a page, finds and clicks a link, verifies the URL and then verifies the behavior of an element on the new page. If we read it out loud, it might sound like:\n```\nVisit: https://example.cypress.io\nFind the element with content: type\nClick on it\nGet the URL\nAssert it includes: /commands/actions\nGet the input with the .action-email class\nType fake@email.com into the input\nAssert the input reflects the new value\n```\n\nOr in the Given, When, Then syntax:\n\n```\nGiven a user visits https://example.cypress.io\nWhen they click the link labeled type\nAnd they type \"fake@email.com\" into the .action-email input\nThen the URL should include /commands/actions\nAnd the .action-email input has \"fake@email.com\" as its value\n```\n\nAnd hey, this is a very clean test! We didn't have to say anything about how things work, just that we'd like to verify a particular series of events and outcomes.\n\n####  Page Transitions\n\nWorth noting is that **this test transitioned across two different pages**.\n\nThe initial cy.visit()\nThe .click() to a new page\n**Cypress automatically detects things like a page transition event and will automatically halt running commands until the next page has finished loading**.\n\nHad the next page not finished its loading phase, Cypress would have ended the test and presented an error.\n\nUnder the hood - this means you don't have to worry about commands accidentally running against a stale page, nor do you have to worry about running commands against a partially loaded page.\n\nWe mentioned previously that Cypress waited 4 seconds before timing out finding a DOM element - but in this case, when Cypress detects a page transition event it automatically increases the timeout to 60 seconds for the single PAGE LOAD event.\n\nIn other words, based on the commands and the events happening, **Cypress automatically alters its expected timeouts to match web application behavior**.\n\nThese various timeouts are defined in the Configuration document.\n\n\n\n","references":"- [Cypress - Write your first test](https://docs.cypress.io/guides/getting-started/writing-your-first-test#Write-your-first-test)\n","featured_image_url":"https://codersnack.com/assets/images/cypress-logo.png","slug":"cypress-write-your-first-test","weblink":"https://codersnack.com/cypress-write-your-first-test","featured_image_preview":{"id":198,"name":"cypress-logo.png","hash":"2d9d2407d41349e9af0c1e9dade80c75","sha256":"6vIM6WGd37VfNLL_XcyQ01BQFK+JNcWYz1MBTGPQeqE","ext":".png","mime":"image/png","size":27.78,"url":"/uploads/2d9d2407d41349e9af0c1e9dade80c75.png","provider":"local","provider_metadata":null,"created_at":"2022-03-07T20:22:28.453Z","updated_at":"2022-03-07T20:22:28.453Z"}},"codersnacks_category":{"id":23,"header":"Cypress","description":"Cypress is a next generation front end testing tool built for the modern web","snacks_by_cat_json_filename":"cypress.snacks.json","key":"cypress","image_url":"https://codersnack.com/assets/images/cypress-logo.png","created_at":"2022-03-04T10:52:53.732Z","updated_at":"2022-03-04T10:52:53.732Z","image_preview":{"id":195,"name":"cypress-logo.png","hash":"449100d88da641c39075e760cee18562","sha256":"6vIM6WGd37VfNLL_XcyQ01BQFK+JNcWYz1MBTGPQeqE","ext":".png","mime":"image/png","size":27.78,"url":"/uploads/449100d88da641c39075e760cee18562.png","provider":"local","provider_metadata":null,"created_at":"2022-03-04T10:52:53.748Z","updated_at":"2022-03-04T10:52:53.748Z"}},"title":"Cypress - Writing your first test","created_at":"2022-03-07T20:22:58.652Z","updated_at":"2022-03-07T20:22:58.661Z"}]