[{"id":87,"codersnack":{"id":88,"header":"NextJS - Create a Next.js App","created_at":"2021-03-21T21:37:57.000Z","updated_at":"2021-03-21T21:54:40.755Z","explanation":"To build a complete web application with React from scratch, there are many important details you need to consider:\n- **Code has to be bundled using a bundler like webpack** and transformed using a compiler like Babel.\n- You need to do production optimizations such as **code splitting**\n- You might want to **statically pre-render some pages for performance and SEO**. You might also want to use server-side rendering or client-side rendering\n- You might have to write some **server-side code to connect your React app to your data store.**\n\nA framework can solve these problems. But such a framework must have the right level of abstraction — otherwise it won’t be very useful. It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code.\n\n## Next.js: The React Framework\nEnter Next.js, the React Framework. Next.js provides a solution to all of the above problems. But more importantly, it puts you and your team in the pit of success when building React applications.\nNext.js has the best-in-class \"Developer Experience\" and many built-in features; a sample of them are:\n- An intuitive **page-based routing system** (with support for dynamic routes)\n- **Pre-rendering, both static generation (SSG)** and server-side rendering (SSR) are supported on a per-page basis\n- **Automatic code splitting** for faster page loads\n- **Client-side routing** with optimized prefetching\n- **Built-in CSS and Sass support**, and support for any CSS-in-JS library\n- Development environment with **Fast Refresh support**\n- **API routes to build API endpoints with Serverless Functions**\n- Fully extendable\n\nNext.js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands.\n\n**Image Optimization**\n```<Image>``` and Automatic Image Optimization with instant builds.\n\n**Internationalization**\nBuilt-in Domain and Subdomain Routing and Automatic Language detection.\n\n**Next.js Analytics**\nA true lighthouse score based on real visitor data & page-by-page insights\n\n**Zero Config**\nAutomatic compilation and bundling. Optimized for production from the start.\n\n**Hybrid: SSG and SSR**\nPre-render pages at build time (SSG) or request time (SSR) in a single project.\n\n**Incremental Static Generation**\nAdd and update statically pre-rendered pages incrementally after build time.\n\n**TypeScript Support**\nAutomatic TypeScript configuration and compilation.\n\n**Fast Refresh**\nFast, reliable live-editing experience, as proven at Facebook scale.\n\n**File-system Routing**\nEvery component in the pages directory becomes a route.\n\n**API Routes**\nOptionally create API endpoints to provide backend functionality.\n\n**Built-in CSS Support**\n\n**Code-splitting and Bundling**\nOptimized bundle splitting algorithm created by the Google Chrome team.\n","references":"[NextJS - Create NextJS App](https://nextjs.org/learn/basics/create-nextjs-app)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-creating-an-app","weblink":"https://codersnack.com/nextjs-creating-an-app/","featured_image_preview":{"id":120,"name":"nextjs-logo.png","hash":"a72971e6d13c44179e28e3eeb113c5de","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/a72971e6d13c44179e28e3eeb113c5de.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:37:57.010Z","updated_at":"2021-03-21T21:37:57.010Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Create an NextJS App","created_at":"2021-03-21T21:40:24.403Z","updated_at":"2021-03-21T21:40:24.409Z"},{"id":88,"codersnack":{"id":89,"header":"NextJS - Creating a NextJS App - Setup","created_at":"2021-03-21T22:25:27.933Z","updated_at":"2021-03-21T22:25:27.933Z","explanation":"## Create a Next.js App - Setup\n\nFirst, let’s make sure that your development environment is ready.\n\nIf you don’t have Node.js installed, install it from here. You’ll need **Node.js version 10.13 or later**.\n\nYou’ll be using your own text editor and terminal app for this tutorial.\n\nIf you are on Windows, we recommend downloading Git for Windows and use Git Bash that comes with it, which supports the UNIX-specific commands in this tutorial. Windows Subsystem for Linux (WSL) is another option.\n\nTo create a Next.js app, open your terminal, cd into the directory you’d like to create the app in, and run the following command:\n```\nnpx create-next-app nextjs-blog --use-npm --example \"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\"\n``` \nUnder the hood, this uses the tool called create-next-app, which bootstraps a Next.js app for you. It uses this template through the ```--example```  flag.\n\n\n**Run the development server**\nYou now have a new directory called nextjs-blog. Let’s cd into it:\n```\ncd nextjs-blog\n``` \nThen, run the following command:\n``` \nnpm run dev\n``` \n\nThis starts your Next.js app’s \"development server\" (more on this later) on port 3000.\n\nLet’s check to see if it’s working. Open ```http://localhost:3000```  from your browser.\n\n## Editing the Page\nLet’s try editing the starter page.\n\nMake sure the Next.js development server is still running.\nOpen ```pages/index.js```  with your text editor.\nFind the text that says “Welcome to” under the ```<h1>```  tag and change it to \"Learn\".\nSave the file.\nAs soon as you save the file, the browser automatically updates the page with the new text\n\nThe Next.js development server has **Fast Refresh** enabled. When you make changes to files, Next.js automatically applies the changes in the browser almost instantly. No refresh needed! This will help you iterate on your app quickly.\n\n\n\n\n","references":"[NextJs - Creating NextJS App](https://nextjs.org/learn/basics/create-nextjs-app/setup)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-creating-an-app-setup","weblink":"https://codersnack.com/nextjs-creating-an-app-setup/","featured_image_preview":{"id":121,"name":"nextjs-logo.png","hash":"f25168e769144ec69a23dddad0c79c53","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/f25168e769144ec69a23dddad0c79c53.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T22:25:27.966Z","updated_at":"2021-03-21T22:25:27.966Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Creating a NextJs App - Setup","created_at":"2021-03-21T22:26:49.470Z","updated_at":"2021-03-21T22:26:49.490Z"},{"id":89,"codersnack":{"id":90,"header":"NextJs - Navigating between pages","created_at":"2021-03-22T21:52:11.631Z","updated_at":"2021-03-22T21:52:11.631Z","explanation":"In this lesson, you will:\n\n- Create a new page using the integrated **file system routing**.\n- Learn how to use the **Link** component to enable client-side navigation between pages.\n- Learn about built-in support for code splitting and prefetching.\n\nIf you’re looking for detailed documentation on Next.js routing, take a look at the routing documentation.\n\n## Pages in Next.js\nIn Next.js, **a page is a React Component exported from a file in the pages directory**.\n\n**Pages are associated with a route based on their file name**. For example, in development:\n\n- ```pages/index.js``` is associated with the ```/``` route.\n- ```pages/posts/first-post.js``` is associated with the ```/posts/first-post``` route.\n\nWe already have the ```pages/index.js``` file, so let’s create ```pages/posts/first-post.js``` to see how it works.\n\n## Create a New Page\nCreate the posts directory under pages.\n\nCreate a file called first-post.js inside the posts directory with the following content:\n\n```\nexport default function FirstPost() {\n  return <h1>First Post</h1>\n}\n```\nThe component can have any name, but you must export it as a default export.\n\nNow, make sure that the development server is running and visit ```http://localhost:3000/posts/first-post```. You should see the page:\n\nFirst Post\n\nThis is how you can create different pages in Next.js.\n\nSimply create a JS file under the pages directory, and the path to the file becomes the URL path.\n\nIn a way, this is similar to building websites using HTML or PHP files. Instead of writing HTML you write JSX and use React Components.\n\nLet's add a link to the newly added page so that we can navigate to it from the homepage.\n\n## Link Component\nWhen linking between pages on websites, you use the ```<a>``` HTML tag.\n\nIn Next.js, you use the **Link** Component from ```next/link``` to wrap the ```<a>``` tag. ```<Link>``` allows you to do client-side navigation to a different page in the application.\n\n### Using Link\nFirst, open ```pages/index.js```, and import the Link component from next/link by adding this line at the top:\n\n```\nimport Link from 'next/link'\n```\nThen find the h1 tag that looks like this:\n\n```\n<h1 className=\"title\">\n  Learn <a href=\"https://nextjs.org\">Next.js!</a>\n</h1>\n```\n\nAnd change it to:\n\n```\n<h1 className=\"title\">\n  Read{' '}\n  <Link href=\"/posts/first-post\">\n    <a>this page!</a>\n  </Link>\n</h1>\n```\n{' '} adds an empty space, which is used to divide text over multiple lines.\n\nNext, open **pages/posts/first-post.js** and replace its content with the following:\n\n```\nimport Link from 'next/link'\n\nexport default function FirstPost() {\n  return (\n    <>\n      <h1>First Post</h1>\n      <h2>\n        <Link href=\"/\">\n          <a>Back to home</a>\n        </Link>\n      </h2>\n    </>\n  )\n}\n```\n\nAs you can see, the Link component is similar to using ```<a>``` tags, but instead of ```<a href=\"…\">```, you use ```<Link href=\"…\">``` and put an ```<a>``` tag inside.\n\nLet’s check to see if it works. You should now have a link on each page, allowing you to go back and forth.\n\n## Client-Side Navigation\nThe **Link component enables client-side navigation between two pages** in the same Next.js app.\n\nClient-side navigation means that the page transition **happens using JavaScript**, which is faster than the default navigation done by the browser.\n\nHere’s a simple way you can verify it:\n\nUse the browser’s developer tools to change the background CSS property of ```<html>``` to yellow.\nClick on the links to go back and forth between the two pages.\nYou’ll see that the yellow background persists between page transitions.\nThis shows that the browser does not load the full page and client-side navigation is working.\n\n## Links\nIf you’ve used ```<a href=\"…\">``` instead of ```<Link href=\"…\">``` and did this, the background color will be cleared on link clicks because the browser does a full refresh.\n\n## Code splitting and prefetching\nNext.js does code splitting **automatically**, so **each page only loads what’s necessary for that page**. That means when the homepage is rendered, the code for other pages is not served initially.\n\nThis ensures that the **homepage loads quickly even if you have hundreds of pages**.\n\nOnly loading the code for the page you request also means that pages become isolated. If a certain page throws an error, the rest of the application would still work.\n\nFurthermore, in a production build of Next.js, whenever Link components appear in the browser’s viewport, **Next.js automatically prefetches the code for the linked page in the background**. By the time you click the link, the code for the destination page will already be loaded in the background, and the page transition will be near-instant!\n\n## Summary\nNext.js automatically optimizes your application for the best performance by code splitting, client-side navigation, and prefetching (in production).\n\nYou create routes as files under pages and use the built-in Link component. No routing libraries are required.\n\nYou can learn more about the Link component in the API reference for ```next/link``` and routing in general in the routing documentation.\n\nNote: If you need to link to an external page outside the Next.js app, just use an ```<a>``` tag without Link.\n\nIf you need to add attributes like, for example, **className**, **add it to the a tag, not to the Link tag.** Here’s an example.\n\n\n\n","references":"[NextJs - Navigating between pages - Client side](https://nextjs.org/learn/basics/navigate-between-pages/client-side)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-navigating-between-pages","weblink":"https://codersnack.com/nextjs-navigating-between-pages/","featured_image_preview":{"id":122,"name":"nextjs-logo.png","hash":"79f644b29b884d70a547bcd887e5dedf","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/79f644b29b884d70a547bcd887e5dedf.png","provider":"local","provider_metadata":null,"created_at":"2021-03-22T21:52:11.648Z","updated_at":"2021-03-22T21:52:11.648Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Navigating between pages","created_at":"2021-03-22T21:52:45.238Z","updated_at":"2021-03-22T21:52:45.240Z"},{"id":155,"codersnack":{"id":151,"header":"NextJS - Assets, Metadata, and CSS - I","created_at":"2022-02-14T10:42:05.804Z","updated_at":"2022-02-14T12:28:40.151Z","explanation":"In this lesson, you’ll learn:\n\n- How to add static files (images, etc) to Next.js.\n- How to customize what goes inside the <head> for each page.\n- How to create a reusable React component which is styled using CSS Modules.\n- How to add global CSS in pages/_app.js.\n- Some useful tips for styling in Next.js.\n\n\n\n###   Assets\n\nNext.js can **serve static assets, like images, under the top-level *public* directory**. Files inside public can be referenced from the root of the application similar to pages.\n\nThe public directory is also useful for robots.txt, Google Site Verification, and any other static assets. Check out the documentation for Static File Serving to learn more.\n\n\n####  Download Your Profile Picture\n\nFirst, let's retrieve your profile picture.\n\n- Download your profile picture in .jpg format (or use this file).\n- Create an images directory inside of the public directory.\n- Save the picture as profile.jpg in the public/images directory.\n- The image size can be around 400px by 400px.\n- You may remove the unused SVG logo file directly under the public directory.\n\n\n####  Unoptimized Image\n\nWith regular HTML, you would add your profile picture as follows:\n\n```\n<img src=\"/images/profile.jpg\" alt=\"Your Name\" />\n```\n\nHowever, this means you have to manually handle:\n\n- Ensuring your image is responsive on different screen sizes\n- Optimizing your images with a third-party tool or library\n- Only loading images when they enter the viewport\n\nAnd more. Instead, Next.js **provides an *Image* component out of the box to handle this for you.**\n\n####  Image Component and Image Optimization\n\n***next/image* is an extension of the HTML ```<img>```  element, evolved for the modern web.**\n\n**Next.js also has support for Image Optimization by default. This allows for resizing, optimizing, and serving images in modern formats like *WebP* when the browser supports it.** This avoids shipping large images to devices with a smaller viewport. It also allows Next.js to automatically adopt future image formats and serve them to browsers that support those formats.\n\n**Automatic Image Optimization works with any image source.** Even if the image is hosted by an external data source, like a CMS, it can still be optimized.\n\n####  Using the Image Component\n\n**Instead of optimizing images at build time, *Next.js optimizes images on-demand*, as users request them**. Unlike static site generators and static-only solutions, your build times aren't increased, whether shipping 10 images or 10 million images.\n\n**Images are lazy loaded by default. That means your page speed isn't penalized for images outside the viewport. Images load as they are scrolled into viewport.**\n\nImages are always rendered in such a way as to avoid [Cumulative Layout Shift](https://web.dev/cls/), a Core Web Vital that Google is going to use in search ranking.\n\n**Here's an example using *next/image* to display our profile picture**. The height and width props should be the desired rendering size, with an aspect ratio identical to the source image.\n\n> **Note**: We'll use this component later in \"Polishing Layout\", no need to copy it yet.\n\n```\nimport Image from 'next/image'\n\nconst YourComponent = () => (\n  <Image\n    src=\"/images/profile.jpg\" // Route of the image file\n    height={144} // Desired size with correct aspect ratio\n    width={144} // Desired size with correct aspect ratio\n    alt=\"Your Name\"\n  />\n)\n```\n\n> To learn more about Automatic Image Optimization, check out the [documentation](https://nextjs.org/docs/basic-features/image-optimization).\nTo learn more about the Image component, check out the API reference for [next/image](https://nextjs.org/docs/api-reference/next/image).\n\n\n\n###  Metadata\n\nWhat if we wanted to modify the metadata of the page, such as the ```<title>``` HTML tag?\n\n```<title>``` is part of the ```<head>``` HTML tag, so let's dive into **how we can modify the ```<head>``` tag in a Next.js page.**\n\nOpen pages/index.js in your editor and find the following lines:\n\n```\n<Head>\n  <title>Create Next App</title>\n  <link rel=\"icon\" href=\"/favicon.ico\" />\n</Head>\n```\nNotice that ```<Head>``` is used instead of the lowercase ```<head>```. ```<Head>``` is a React Component that is built into Next.js. It allows you to modify the ```<head>``` of a page.\n\nYou can import the Head component from the next/head module.\n\n\n###  Adding Head to first-post.js\n\nWe haven't added a ```<title>``` to our **/posts/first-post** route. Let's add one.\n\nOpen the **pages/posts/first-post.js** file and add an import for *Head* from next/head at the beginning of the file:\n\n```\nimport Head from 'next/head'\n```\nThen, update the exported FirstPost component to include the Head component. For now, we‘ll add just the title tag:\n\n```\nexport default function FirstPost() {\n  return (\n    <>\n      <Head>\n        <title>First Post</title>\n      </Head>\n      <h1>First Post</h1>\n      <h2>\n        <Link href=\"/\">\n          <a>Back to home</a>\n        </Link>\n      </h2>\n    </>\n  )\n}\n```\nTry accessing *http://localhost:3000/posts/first-post*. The browser tab should now say “First Post”. By using your browser’s developer tools, you should see that the title tag is added to ```<head>```.\n\n> To learn more about the Head component, check out the API reference for next/head.\n\nIf you want to **customize the ```<html>``` tag**, for example to add the lang attribute, you can do so by creating a **pages/_document.js** file. Learn more in the custom Document documentation.\n\n\n###   Third-Party JavaScript\n\nThird-party JavaScript refers to any scripts that are added from a third-party source. Usually, third-party scripts are included in order to introduce newer functionality into a site that does not need to be written from scratch, such as analytics, ads, and customer support widgets.\n\n####  Adding Third-Party JavaScript\n\nLet's dive into how we can add a third-party script to a Next.js page.\n\nOpen **pages/posts/first-post.js** in your editor and find the following lines:\n\n```\n<Head>\n  <title>First Post</title>\n</Head>\n```\nIn addition to metadata, **scripts that need to load and execute as soon as possible are usually added within the ```<head>``` of a page**. Using a regular HTML ```<script>``` element, an external script would be added as follows:\n\n```\n<Head>\n  <title>First Post</title>\n  <script src=\"https://connect.facebook.net/en_US/sdk.js\" />\n</Head>\n```\n\nThis script contains the Facebook SDK which is commonly used to introduce Facebook social plugins and other functionality. **Although this approach works, including scripts in this manner does not give a clear idea of when it would load with respect to the other JavaScript code fetched on the same page**. If a particular script is render-blocking and can delay page content from loading, this can signficiantly impact performance.\n\n\n#### Using the Script Component\n\n**next/script** is an extension of the HTML ```<script>``` element and **optimizes when additional scripts are fetched and executed.**\n\nIn the same file, add an import for Script from next/script at the beginning of the file:\n\n```\nimport Script from 'next/script'\n```\nNow, update the FirstPost component to include the Script component:\n\n```\nexport default function FirstPost() {\n  return (\n    <>\n      <Head>\n        <title>First Post</title>\n      </Head>\n      <Script\n        src=\"https://connect.facebook.net/en_US/sdk.js\"\n        strategy=\"lazyOnload\"\n        onLoad={() =>\n          console.log(`script loaded correctly, window.FB has been populated`)\n        }\n      />\n      <h1>First Post</h1>\n      <h2>\n        <Link href=\"/\">\n          <a>Back to home</a>\n        </Link>\n      </h2>\n    </>\n  )\n}\n```\n\nNotice that a few additional properties have been defined in the Script component:\n\n- **strategy** controls **when the third-party script should load**. A value of ***lazyOnload*** tells Next.js to load this particular script **lazily during browser idle time**\n\n- **onLoad** is used to **run any JavaScript code immediately after the script has finished loading**. In this example, we log a message to the console that mentions that the script has loaded correctly\n\nTry accessing http://localhost:3000/posts/first-post. By using your browser’s developer tools, you should see the message above logged in the Console panel. In addition, you can run window.FB to see that the script has populated this global variable.\n\n> **Note**: The Facebook SDK was only used as a contrived example to show how to add third-party scripts to your application in a performant way. Now that you understand the basics of including third-party functionality in Next.js, you can remove the Script component from FirstPost before proceeding.\n\nTo learn more about the Script component, check out the documentation.","references":"[NextJS - Assets, Metadata, and CSS](https://nextjs.org/learn/basics/assets-metadata-css)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-assets-metadata-css-1","weblink":"https://codersnack.com/nextjs-assets-metadata-css-1","featured_image_preview":{"id":189,"name":"nextjs-logo.png","hash":"3cfb5c5904b7458e87cf8b9c519e923a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3cfb5c5904b7458e87cf8b9c519e923a.png","provider":"local","provider_metadata":null,"created_at":"2022-02-14T10:42:05.828Z","updated_at":"2022-02-14T10:42:05.828Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Assets , metadata 1","created_at":"2022-02-14T10:42:45.435Z","updated_at":"2022-02-14T16:51:07.243Z"},{"id":156,"codersnack":{"id":152,"header":"NextJS - Assets, Metadata, and CSS - II","created_at":"2022-02-14T12:43:34.061Z","updated_at":"2022-02-14T16:41:37.864Z","explanation":"\n###  CSS Styling\n\nLet’s now talk about CSS styling.\n\nAs you can see, our index page (http://localhost:3000) already has some styles. If you take a look at **pages/index.js**, you should see code like this:\n\n```\n<style jsx>{`\n  …\n`}</style>\n```\n\nThis page is using a **library called *styled-jsx***. **It’s a “CSS-in-JS” library — it lets you write CSS within a React component, and the CSS styles will be scoped (other components won’t be affected)**.\n\n**Next.js has built-in support for styled-jsx**, but you **can also use other popular CSS-in-JS libraries** such as styled-components or emotion.\n\n\n####  Writing and Importing CSS\n\n**Next.js has built-in support for CSS and Sass** which allows you to import .css and .scss files.\n\n**Using popular CSS libraries like Tailwind CSS** is also supported.\n\n\n###  Layout Component\n\nFirst,**Let’s create a Layout component** which will be shared across all pages.\n\n- Create a top-level directory called components.\n- Inside components, create a file called **layout.js** with the following content:\n```\nexport default function Layout({ children }) {\n  return <div>{children}</div>\n}\n```\nThen, open **pages/posts/first-post.js**, add an import for the Layout component, and make it the outermost component:\n\n```\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport Layout from '../../components/layout'\n\nexport default function FirstPost() {\n  return (\n    <Layout>\n      <Head>\n        <title>First Post</title>\n      </Head>\n      <h1>First Post</h1>\n      <h2>\n        <Link href=\"/\">\n          <a>Back to home</a>\n        </Link>\n      </h2>\n    </Layout>\n  )\n}\n```\n\n\n####   Adding CSS\n\nNow, let’s add some styles to the Layout component. To do so, **we’ll use CSS Modules**, which lets you import CSS files in a React component.\n\nCreate a file called components/layout.module.css with the following content:\n\n```\n.container {\n  max-width: 36rem;\n  padding: 0 1rem;\n  margin: 3rem auto 6rem;\n}\n```\n> **Important**: To use CSS Modules, the CSS file name must end with .module.css.\n\nTo use this container class inside components/layout.js, you need to:\n\n- Import the CSS file and assign a name to it, like styles\n- Use styles.container as the className\n\nOpen **components/layout.js** and replace its content with the following:\n\n```\nimport styles from './layout.module.css'\n\nexport default function Layout({ children }) {\n  return <div className={styles.container}>{children}</div>\n}\n```\nIf you go to http://localhost:3000/posts/first-post now, you should see that the text is now inside a centered container:\n\n\n\n####  Automatically Generates Unique Class Names\n\nNow, if you take a look at the HTML in your browser’s devtools, **you’ll notice that the div rendered by the Layout component has a class name that looks like *layout_container__*...:**\n\n\n**This is what CSS Modules does: It automatically generates unique class names**. As long as you use CSS Modules, you don’t have to worry about class name collisions.\n\nFurthermore, **Next.js’s code splitting feature works on CSS Modules as well**. It ensures the minimal amount of CSS is loaded for each page. This results in smaller bundle sizes.\n\nCSS Modules are extracted from the JavaScript bundles at build time and generate .css files that are loaded automatically by Next.js.\n\n\n###  Global Styles\n\nCSS Modules are useful for component-level styles. But **if you want some CSS to be loaded by every page**, Next.js has support for that as well.\n\n**To load global CSS files, create a file called *pages/_app.js*** with the following content:\n\n```\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n**This App component is the top-level component which will be common across all the different pages**. You can use this App component to **keep state when navigating between pages**, for example.\n\n> **Important**: You need to restart the development server when you add pages/_app.js. \n\n\n####   Adding Global CSS\n\n**In Next.js, you can add global CSS files by importing them from pages/_app.js**. You cannot import global CSS anywhere else.\n\nThe reason that global CSS can't be imported outside of pages/_app.js is that global CSS affects all elements on the page.\n\nIf you were to navigate from the homepage to the /posts/first-post page, global styles from the homepage would affect /posts/first-post unintentionally.\n\n**You can place the global CSS file anywhere and use any name**. So let’s do the following:\n\n- Create a **top-level styles directory** and create **global.css** inside.\n- Add the following content to **styles/global.css**. It resets some styles and changes the color of the a tag:\n```\nhtml,\nbody {\n  padding: 0;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu,\n    Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n  line-height: 1.6;\n  font-size: 18px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\na {\n  color: #0070f3;\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\nimg {\n  max-width: 100%;\n  display: block;\n}\n```\n\nFinally, open **pages/_app.js** add import the CSS file like so:\n\n```\nimport '../styles/global.css'\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\nNow, if you access http://localhost:3000/posts/first-post, you’ll see that the styles are applied:\n\n> If it didn’t work: Make sure you restart the development server when you add pages/_app.js.\n\n\n###  Polishing Layout\n\nSo far, we’ve only added minimal React and CSS code just to illustrate concepts such as CSS Modules. Before we move on to our next lesson about data fetching, **let’s polish our page styling and code.**\n\n####  Update components/layout.module.css\n\nFirst, open **components/layout.module.css **and replace its content with the following more polished styles for the layout and profile picture:\n\n```\n.container {\n  max-width: 36rem;\n  padding: 0 1rem;\n  margin: 3rem auto 6rem;\n}\n\n.header {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.backToHome {\n  margin: 3rem 0 0;\n}\n```\n\n####   Create styles/utils.module.css\n\nSecond, **let’s create a set of utility CSS classes for typography and others** that will be useful across multiple components.\n\nLet’s add **a new CSS file called *styles/utils.module.css*** with the following content:\n\n```\n.heading2Xl {\n  font-size: 2.5rem;\n  line-height: 1.2;\n  font-weight: 800;\n  letter-spacing: -0.05rem;\n  margin: 1rem 0;\n}\n\n.headingXl {\n  font-size: 2rem;\n  line-height: 1.3;\n  font-weight: 800;\n  letter-spacing: -0.05rem;\n  margin: 1rem 0;\n}\n\n.headingLg {\n  font-size: 1.5rem;\n  line-height: 1.4;\n  margin: 1rem 0;\n}\n\n.headingMd {\n  font-size: 1.2rem;\n  line-height: 1.5;\n}\n\n.borderCircle {\n  border-radius: 9999px;\n}\n\n.colorInherit {\n  color: inherit;\n}\n\n.padding1px {\n  padding-top: 1px;\n}\n\n.list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.listItem {\n  margin: 0 0 1.25rem;\n}\n\n.lightText {\n  color: #666;\n}\n```\n\n\n####  Update components/layout.js\n\nThird, **open components/layout.js and replace its content **with the following code, changing Your Name to an actual name:\n\n```\nimport Head from 'next/head'\nimport Image from 'next/image'\nimport styles from './layout.module.css'\nimport utilStyles from '../styles/utils.module.css'\nimport Link from 'next/link'\n\nconst name = 'Your Name'\nexport const siteTitle = 'Next.js Sample Website'\n\nexport default function Layout({ children, home }) {\n  return (\n    <div className={styles.container}>\n      <Head>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n        <meta\n          name=\"description\"\n          content=\"Learn how to build a personal website using Next.js\"\n        />\n        <meta\n          property=\"og:image\"\n          content={`https://og-image.vercel.app/${encodeURI(\n            siteTitle\n          )}.png?theme=light&md=0&fontSize=75px&images=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Ffront%2Fassets%2Fdesign%2Fnextjs-black-logo.svg`}\n        />\n        <meta name=\"og:title\" content={siteTitle} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      </Head>\n      <header className={styles.header}>\n        {home ? (\n          <>\n            <Image\n              priority\n              src=\"/images/profile.jpg\"\n              className={utilStyles.borderCircle}\n              height={144}\n              width={144}\n              alt={name}\n            />\n            <h1 className={utilStyles.heading2Xl}>{name}</h1>\n          </>\n        ) : (\n          <>\n            <Link href=\"/\">\n              <a>\n                <Image\n                  priority\n                  src=\"/images/profile.jpg\"\n                  className={utilStyles.borderCircle}\n                  height={108}\n                  width={108}\n                  alt={name}\n                />\n              </a>\n            </Link>\n            <h2 className={utilStyles.headingLg}>\n              <Link href=\"/\">\n                <a className={utilStyles.colorInherit}>{name}</a>\n              </Link>\n            </h2>\n          </>\n        )}\n      </header>\n      <main>{children}</main>\n      {!home && (\n        <div className={styles.backToHome}>\n          <Link href=\"/\">\n            <a>← Back to home</a>\n          </Link>\n        </div>\n      )}\n    </div>\n  )\n}\n```\nHere’s what’s new:\n\n- **meta tags (like og:image)**, which are used to describe a page's content\n- **Boolean home *prop* which will adjust the size** of the title and the image\n- **“Back to home” link** at the bottom if home is false\n- **Added images with next/image**, which are preloaded with the priority attribute\n\n####  Update pages/index.js\n\nFinally, let's update the homepage.\n\nOpen **pages/index.js** and replace its content with:\n\n```\nimport Head from 'next/head'\nimport Layout, { siteTitle } from '../components/layout'\nimport utilStyles from '../styles/utils.module.css'\n\nexport default function Home() {\n  return (\n    <Layout home>\n      <Head>\n        <title>{siteTitle}</title>\n      </Head>\n      <section className={utilStyles.headingMd}>\n        <p>[Your Self Introduction]</p>\n        <p>\n          (This is a sample website - you’ll be building a site like this on{' '}\n          <a href=\"https://nextjs.org/learn\">our Next.js tutorial</a>.)\n        </p>\n      </section>\n    </Layout>\n  )\n}\n```\n\nThen replace [Your Self Introduction] with your self introduction. Here’s an example with the author’s profile:\n\nThat’s it! We now have the polished layout code in place to move onto our data fetching lessons.\n\n\n###  Styling Tips\n\nHere are some styling tips that might be helpful.\n>You can just read through the following sections. No need to make changes to our app!\n\n\n####  Using classnames library to toggle classes\n\n**classnames** is a simple **library that lets you toggle class names easily**. You can install it using ```npm install classnames```  or ```yarn add classnames```.\n\nPlease take a look at its [documentation](https://github.com/JedWatson/classnames) for more details, but here’s the basic usage:\n\n- Suppose that you want to create an **Alert component which accepts type, which can be 'success' or 'error'.**\n- **If it’s 'success', you want the text color to be green. If it’s 'error', you want the text color to be red**.\n\nYou can first write a CSS module (e.g. alert.module.css) like this:\n```\n.success {\n  color: green;\n}\n.error {\n  color: red;\n}\n```\n\nAnd use **classnames** like this:\n\n```\nimport styles from './alert.module.css'\nimport cn from 'classnames'\n\nexport default function Alert({ children, type }) {\n  return (\n    <div\n      className={cn({\n        [styles.success]: type === 'success',\n        [styles.error]: type === 'error'\n      })}\n    >\n      {children}\n    </div>\n  )\n}\n```\n\n\n####  Customizing PostCSS Config\n\nOut of the box, with no configuration, **Next.js compiles CSS using *PostCSS***.\n\n**To customize PostCSS config, you can create a top-level file called postcss.config.js**. This is useful if you’re using libraries like Tailwind CSS.\n\nHere are the **steps to add Tailwind CSS**. We recommend using **postcss-preset-env** and **postcss-flexbugs-fixes** to match Next.js’s default behavior. First, install the packages:\n\n```\nnpm install tailwindcss postcss-preset-env postcss-flexbugs-fixes\n```\nThen write the following for postcss.config.js:\n\n```\nmodule.exports = {\n  plugins: [\n    'tailwindcss',\n    'postcss-flexbugs-fixes',\n    [\n      'postcss-preset-env',\n      {\n        autoprefixer: {\n          flexbox: 'no-2009'\n        },\n        stage: 3,\n        features: {\n          'custom-properties': false\n        }\n      }\n    ]\n  ]\n}\n```\nWe also **recommend removing unused CSS** by specifying the purge option on **tailwind.config.js**:\n```\n// tailwind.config.js\nmodule.exports = {\n  purge: [\n    // Use *.tsx if using TypeScript\n    './pages/**/*.js',\n    './components/**/*.js'\n  ]\n  // ...\n}\n```\n\nTo learn more about custom PostCSS configuration, check out the documentation for PostCSS.\n\n\n####  Using Sass\n\nOut of the box, **Next.js allows you to import Sass using both the .scss and .sass extensions**. You can use component-level Sass **via CSS Modules and the .module.scss or .module.sass extension**.\n\nBefore you can use Next.js' built-in Sass support, **be sure to install sass**: ```npm install sass```\n\n\n","references":"[NextJS - Assets, Metadata, and CSS](https://nextjs.org/learn/basics/assets-metadata-css)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-assets-metadata-css-2","weblink":"https://codersnack.com/nextjs-assets-metadata-css-2","featured_image_preview":{"id":190,"name":"nextjs-logo.png","hash":"b7dbdb9dfb1e4ae8b5561f1bf9708ad3","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/b7dbdb9dfb1e4ae8b5561f1bf9708ad3.png","provider":"local","provider_metadata":null,"created_at":"2022-02-14T12:43:34.076Z","updated_at":"2022-02-14T12:43:34.076Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Assets , metadata 2","created_at":"2022-02-14T16:51:20.325Z","updated_at":"2022-02-14T16:51:20.329Z"},{"id":157,"codersnack":{"id":153,"header":"NextJS - Pre-rendering and Data Fetching 1","created_at":"2022-02-14T17:45:29.740Z","updated_at":"2022-02-14T17:45:29.740Z","explanation":"We’d like to create a blog (here’s the desired result), but so far we’ve added no blog content. In this lesson, we’ll learn how to fetch external blog data into our app. We’ll store the blog content in the file system, but it’ll work if the content is stored elsewhere (e.g. database or Headless CMS).\n\nWhat You’ll Learn in This Lesson\nIn this lesson, you’ll learn about:\n\n- Next.js’ pre-rendering feature.\n- The two forms of pre-rendering: Static Generation and Server-side Rendering.\n- Static Generation with data, and without data.\n- getStaticProps and how to use it to import external blog data into the index page.\n- Some useful information on getStaticProps.\n\n\n\n###  Pre-rendering\n\nBefore we talk about data fetching, let’s talk about one of the most important concepts in Next.js: Pre-rendering.\n\n**By default, Next.js pre-renders every page**. This means that **Next.js generates HTML for each page in advance, instead of having it all done by client-side JavaScript**. Pre-rendering can result in **better performance and SEO**.\n\nEach generated HTML is associated with minimal JavaScript code necessary for that page. **When a page is loaded by the browser, its JavaScript code runs and makes the page fully interactive. (This process is called *hydration*.)**\n\n####  Check That Pre-rendering Is Happening\nYou can check that pre-rendering is happening by taking the following steps:\n\n- Disable JavaScript in your browser ([here’s how in Chrome](https://developer.chrome.com/docs/devtools/javascript/disable/)) and…\n- Try accessing [this page](https://next-learn-starter.vercel.app/) (the final result of this tutorial).\n\n**You should see that your app is rendered without JavaScript**. That’s because Next.js has pre-rendered the app into static HTML, allowing you to see the app UI without running JavaScript.\n\n> **Note**: You can also try the above steps on localhost, but CSS won’t be loaded if you disable JavaScript.\n\n**If your app is a plain React.js app (without Next.js), there’s no pre-rendering, so you won’t be able to see the app if you disable JavaScript**. For example:\n\n- Enable JavaScript in your browser and check out [this page](https://create-react-app.examples.vercel.com/). This is a plain React.js app built with Create React App.\n- Now, disable JavaScript and access the same page again.\n- You won’t see the app anymore — instead, it’ll say “You need to enable JavaScript to run this app.” This is because the app is not pre-rendered into static HTML.\n\n\n####  Summary: Pre-rendering vs No Pre-rendering\n\nHere’s a quick graphical summary:\n\n![pre-rendering](https://codersnack.com/assets/images/pre-rendering.png)\n*Pre-rendering*\n\n![pre-rendering](https://codersnack.com/assets/images/no-pre-rendering.png)\nNo pre-rendering\n\nNext, let’s talk about two forms of pre-rendering in Next.js.\n\n\n###  Two Forms of Pre-rendering\n\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when it generates the HTML for a page**.\n\n- Static Generation is the pre-rendering method that **generates the HTML at *build* time**. The pre-rendered HTML is then **reused on each request**.\n- **Server-side Rendering** is the pre-rendering method that **generates the HTML on each request**.\n\n\n####  Static Generation\n\n![static-generation](https://codersnack.com/assets/images/static-generation.png)\n\n![server-side-rendering](https://codersnack.com/assets/images/server-side-rendering.png)\n\n> In development mode (when you run npm run dev or yarn dev), every page is pre-rendered on each request — even for pages that use Static Generation.\n\n\n####  Per-page Basis\n\nImportantly, **Next.js lets you choose which pre-rendering form to use for each page**. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n\n![server-side-rendering](https://codersnack.com/assets/images/per-page-basis.png)\n\n####  When to Use Static Generation v.s. Server-side Rendering\n\n**We recommend using *Static Generation* (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request**.\n\nYou can use Static Generation for many types of pages, including:\n\n- Marketing pages\n- Blog posts\n- E-commerce product listings\n- Help and documentation\n\n**You should ask yourself: *\"Can I pre-render this page ahead of a user's request?\"*** If the answer is yes, then you should choose Static Generation.\n\n**On the other hand**, Static Generation is not a good idea if you cannot pre-render a page ahead of a user's request. **Maybe your page shows frequently updated data, and the page content changes on every request**. In that case, you can use **Server-side Rendering.** It will be **slower**, but the pre-rendered **page will always be up-to-date**. **Or you can skip pre-rendering and use client-side JavaScript to populate frequently updated data**.\n\nWe’ll Focus on Static Generation. In this lesson, we’ll focus on Static Generation. On the next page, we’ll talk about Static Generation with and without data.\n\n\n###  Static Generation with and without Data\n\nStatic Generation can be done with and without data.\n\nSo far, all the pages we’ve created do not require fetching external data. Those pages will automatically be statically generated when the app is built for production.\n\nHowever, for some pages, you might not be able to render the HTML without first fetching some external data. Maybe you need to access the file system, fetch external API, or query your database at build time. Next.js supports this case — Static Generation with data — out of the box.\n\n\n\n####  Static Generation with Data using *getStaticProps*\n\nHow does it work? Well, in **Next.js, when you export a page component, you can also export an async function called getStaticProps**. If you do this, then:\n\n- getStaticProps runs at build time in production, and…\n- Inside the function, you can fetch external data and send it as props to the page.\n\n```\nexport default function Home(props) { ... }\n\nexport async function getStaticProps() {\n  // Get external data from the file system, API, DB, etc.\n  const data = ...\n\n  // The value of the `props` key will be\n  //  passed to the `Home` component\n  return {\n    props: ...\n  }\n}\n```\n\nEssentially, getStaticProps allows you to tell Next.js: “Hey, this page has some data dependencies — so when you pre-render this page at build time, make sure to resolve them first!”\n\n> **Note**: In development mode, getStaticProps runs on each request instead.\n\nLet’s Use getStaticProps. It’s easier to learn by doing, so starting from the next page, we’ll use getStaticProps to implement our blog.\n\n\n###  Blog Data\n\n**We’ll now add blog data to our app using the file system. Each blog post will be a markdown file.**\n\n- Create a new **top-level directory called *posts*** (this is not the same as pages/posts).\n- Inside posts, create two files: **pre-rendering.md** and **ssg-ssr.md**.\n\nNow, copy the following code to **posts/pre-rendering.md**:\n\n```\n---\ntitle: 'Two Forms of Pre-rendering'\ndate: '2020-01-01'\n---\n\nNext.js has two forms of pre-rendering: **Static Generation** and **Server-side Rendering**. The difference is in **when** it generates the HTML for a page.\n\n- **Static Generation** is the pre-rendering method that generates the HTML at **build time**. The pre-rendered HTML is then _reused_ on each request.\n- **Server-side Rendering** is the pre-rendering method that generates the HTML on **each request**.\n\nImportantly, Next.js lets you **choose** which pre-rendering form to use for each page. You can create a \"hybrid\" Next.js app by using Static Generation for most pages and using Server-side Rendering for others.\n```\n\nThen, copy the following code to **posts/ssg-ssr.md**:\n\n```\n---\ntitle: 'When to Use Static Generation v.s. Server-side Rendering'\ndate: '2020-01-02'\n---\n\nWe recommend using **Static Generation** (with and without data) whenever possible because your page can be built once and served by CDN, which makes it much faster than having a server render the page on every request.\n\nYou can use Static Generation for many types of pages, including:\n\n- Marketing pages\n- Blog posts\n- E-commerce product listings\n- Help and documentation\n\nYou should ask yourself: \"Can I pre-render this page **ahead** of a user's request?\" If the answer is yes, then you should choose Static Generation.\n\nOn the other hand, Static Generation is **not** a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\nIn that case, you can use **Server-Side Rendering**. It will be slower, but the pre-rendered page will always be up-to-date. Or you can skip pre-rendering and use client-side JavaScript to populate data.\n```\n\nYou might have noticed that **each markdown file has a *metadata section* at the top containing title and date. This is called *YAML Front Matter*, which can be parsed using a library called *[gray-matter](https://github.com/jonschlinkert/gray-matter)***.\n\n\n####  Parsing the Blog Data on getStaticProps\n\nNow, **let’s update our index page (pages/index.js) using this data**. We’d like to:\n\n- Parse each markdown file and get title, date, and file name (which will be used as id for the post URL).\n- List the data on the index page, sorted by date.\n\nTo do this on pre-render, **we need to implement *getStaticProps***.\n\n![nextjs-data-fetching-index-page.png](https://codersnack.com/assets/images/nextjs-data-fetching-index-page.png)\n\n\nLet’s do it on the next page!","references":"- [nextjs.org - Pre-rendering and Data Fetching](https://nextjs.org/learn/basics/data-fetching)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-prerrendering-data-fetching-1","weblink":"https://codersnack.com/nextjs-prerrendering-data-fetching-1","featured_image_preview":{"id":191,"name":"nextjs-logo.png","hash":"01010d19dffd4a43af71538b73465009","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/01010d19dffd4a43af71538b73465009.png","provider":"local","provider_metadata":null,"created_at":"2022-02-14T17:45:29.758Z","updated_at":"2022-02-14T17:45:29.758Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJs - Data Fetching - 1","created_at":"2022-02-14T17:45:39.839Z","updated_at":"2022-02-14T17:46:02.347Z"},{"id":158,"codersnack":{"id":154,"header":"NextJS - Pre-rendering and Data Fetching 2","created_at":"2022-02-14T18:18:47.303Z","updated_at":"2022-02-14T18:18:47.303Z","explanation":"\n###  Implement getStaticProps\n\nFirst, **install gray-matter** which lets us parse the metadata in each markdown file.\n\n```\nnpm install gray-matter\n```\nNext, we’ll create a simple library for fetching data from the file system.\n\n- Create a **top-level directory called *lib***, and…\n- Inside lib, create a file called **posts.js** with the following content:\n\n```\nimport fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getSortedPostsData() {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory)\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, '')\n\n    // Read markdown file as string\n    const fullPath = path.join(postsDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n\n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data\n    }\n  })\n  // Sort posts by date\n  return allPostsData.sort(({ date: a }, { date: b }) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n}\n```\n\nNow, **we need to add an import for *getSortedPostsData* and call it inside *getStaticProps* in *pages/index.js***.\n\nOpen **pages/index.js** in your editor and add the following code above the exported Home component:\n\n```\nimport { getSortedPostsData } from '../lib/posts'\n\nexport async function getStaticProps() {\n  const allPostsData = getSortedPostsData()\n  return {\n    props: {\n      allPostsData\n    }\n  }\n}\n```\n**By returning *allPostsData* inside the props object in *getStaticProps*, the blog posts will be passed to the *Home* component as a prop**. Now you can access the blog posts like so:\n\n```\nexport default function Home ({ allPostsData }) { ... }\n```\n\nTo display the blog posts, let's update the Home component to add another ```<section>```  tag with the data below the section with your self introduction. Don't forget to also change the props from () to ({ allPostsData }):\n\n```\nexport default function Home({ allPostsData }) {\n  return (\n    <Layout home>\n      {/* Keep the existing code here */}\n\n      {/* Add this <section> tag below the existing <section> tag */}\n      <section className={`${utilStyles.headingMd} ${utilStyles.padding1px}`}>\n        <h2 className={utilStyles.headingLg}>Blog</h2>\n        <ul className={utilStyles.list}>\n          {allPostsData.map(({ id, date, title }) => (\n            <li className={utilStyles.listItem} key={id}>\n              {title}\n              <br />\n              {id}\n              <br />\n              {date}\n            </li>\n          ))}\n        </ul>\n      </section>\n    </Layout>\n  )\n}\n```\n\nYou should now see the blog data if you access http://localhost:3000.\nCongratulations! We’ve successfully fetched external data (from the file system) and pre-rendered the index page with this data.\n\n\n###  getStaticProps Details\n\nHere is some essential information you should know about **getStaticProps**.\n\n\n####  Fetch External API or Query Database\n\nIn **lib/posts.js**, we’ve implemented **getSortedPostsData** which fetches data from the file system. But **you can fetch the data from other sources, like an external API endpoint,** and it’ll work just fine:\n\n```\nexport async function getSortedPostsData() {\n  // Instead of the file system,\n  // fetch post data from an external API endpoint\n  const res = await fetch('..')\n  return res.json()\n}\n```\n> **Note**: Next.js polyfills fetch() on both the client and server. You don't need to import it.\n\nYou can also query the database directly:\n\n```\nimport someDatabaseSDK from 'someDatabaseSDK'\n\nconst databaseClient = someDatabaseSDK.createClient(...)\n\nexport async function getSortedPostsData() {\n  // Instead of the file system,\n  // fetch post data from a database\n  return databaseClient.query('SELECT posts...')\n}\n```\nThis is possible because **getStaticProps only runs on the server-side**. It will never run on the client-side. It won’t even be included in the JS bundle for the browser. That means you can write code such as direct database queries without them being sent to browsers.\n\n\n####  Development vs. Production\n\n- In **development** (npm run dev or yarn dev), ***getStaticProps* runs on every request**.\n- In **production**, **getStaticProps runs at build time**. However, **this behavior can be enhanced using the *fallback* key returned by *getStaticPaths***\n\nBecause it’s meant to be run at build time, **you won’t be able to use data that’s only available during request time, such as query parameters or HTTP headers**.\n\n\n####  Only Allowed in a Page\n\n**getStaticProps** can only be exported from a page. **You can’t export it from non-page files.**\n\nOne of the reasons for this restriction is that React needs to have all the required data before the page is rendered.\n\n####  What If I Need to Fetch Data at Request Time?\n\nStatic Generation is not a good idea if you cannot pre-render a page ahead of a user's request. Maybe your page shows frequently updated data, and the page content changes on every request.\n\n**In cases like this, you can try Server-side Rendering or skip pre-rendering**. Let’s talk about these strategies before we move on to the next lesson.\n\n\n###   Fetching Data at Request Time\n\nIf you need to fetch data at request time instead of at build time, you can try Server-side Rendering\n\n**To use Server-side Rendering, you need to export *getServerSideProps*** instead of getStaticProps **from your page**.\n\n####  Using *getServerSideProps*\n\nHere’s the starter code for **getServerSideProps**. It’s not necessary for our blog example, so we won’t be implementing it.\n\n```\nexport async function getServerSideProps(context) {\n  return {\n    props: {\n      // props for your component\n    }\n  }\n}\n```\n\n**Because *getServerSideProps* is called at request time, its parameter (context) contains request specific parameters**.\n\nYou should use getServerSideProps only if you need to pre-render a page whose data must be fetched at request time. [Time to first byte (TTFB)](https://web.dev/time-to-first-byte/) **will be slower than getStaticProps because the server must compute the result on every request**, and the **result cannot be cached by a CDN** without extra configuration.\n\n\n####  Client-side Rendering\n\nIf you do not need to pre-render the data, you can also use the following strategy (called Client-side Rendering):\n\n- Statically generate (pre-render) **parts of the page that do not require external data**.\n- When the page loads, **fetch external data from the client using JavaScript and populate the remaining parts**.\n\n![nextjs-data-fetching-client-side-rendering.png](https://codersnack.com/assets/images/nextjs-data-fetching-client-side-rendering.png)\n\n**This approach works well for user dashboard pages**, for example. Because a **dashboard is a private, user-specific page, SEO is not relevant**, and the page doesn’t need to be pre-rendered. The data is frequently updated, which requires request-time data fetching.\n\n\n####  SWR\n\nThe team behind **Next.js has created a React hook for data fetching called *SWR***. We highly recommend it if you’re fetching data on the client side. It **handles caching, revalidation, focus tracking, refetching on interval, and more**. We won’t cover the details here, but here’s an example usage:\n\n```\nimport useSWR from 'swr'\n\nfunction Profile() {\n  const { data, error } = useSWR('/api/user', fetch)\n\n  if (error) return <div>failed to load</div>\n  if (!data) return <div>loading...</div>\n  return <div>hello {data.name}!</div>\n}\n```\n\nCheck out the SWR documentation to learn more.\n\n","references":"- [nextjs.org - Pre-rendering and Data Fetching](https://nextjs.org/learn/basics/data-fetching)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-prerrendering-data-fetching-2","weblink":"https://codersnack.com/nextjs-prerrendering-data-fetching-2","featured_image_preview":{"id":192,"name":"nextjs-logo.png","hash":"42d9e11f123246f286d75193bb9a92df","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/42d9e11f123246f286d75193bb9a92df.png","provider":"local","provider_metadata":null,"created_at":"2022-02-14T18:18:47.311Z","updated_at":"2022-02-14T18:18:47.311Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"Nextjs data fetching 2","created_at":"2022-02-14T18:19:07.109Z","updated_at":"2022-02-14T18:19:07.112Z"}]