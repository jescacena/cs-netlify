[{"id":87,"codersnack":{"id":88,"header":"NextJS - Create a Next.js App","created_at":"2021-03-21T21:37:57.000Z","updated_at":"2021-03-21T21:54:40.755Z","explanation":"To build a complete web application with React from scratch, there are many important details you need to consider:\n- **Code has to be bundled using a bundler like webpack** and transformed using a compiler like Babel.\n- You need to do production optimizations such as **code splitting**\n- You might want to **statically pre-render some pages for performance and SEO**. You might also want to use server-side rendering or client-side rendering\n- You might have to write some **server-side code to connect your React app to your data store.**\n\nA framework can solve these problems. But such a framework must have the right level of abstraction — otherwise it won’t be very useful. It also needs to have great \"Developer Experience\", ensuring you and your team have an amazing experience while writing code.\n\n## Next.js: The React Framework\nEnter Next.js, the React Framework. Next.js provides a solution to all of the above problems. But more importantly, it puts you and your team in the pit of success when building React applications.\nNext.js has the best-in-class \"Developer Experience\" and many built-in features; a sample of them are:\n- An intuitive **page-based routing system** (with support for dynamic routes)\n- **Pre-rendering, both static generation (SSG)** and server-side rendering (SSR) are supported on a per-page basis\n- **Automatic code splitting** for faster page loads\n- **Client-side routing** with optimized prefetching\n- **Built-in CSS and Sass support**, and support for any CSS-in-JS library\n- Development environment with **Fast Refresh support**\n- **API routes to build API endpoints with Serverless Functions**\n- Fully extendable\n\nNext.js is used in tens of thousands of production-facing websites and web applications, including many of the world's largest brands.\n\n**Image Optimization**\n```<Image>``` and Automatic Image Optimization with instant builds.\n\n**Internationalization**\nBuilt-in Domain and Subdomain Routing and Automatic Language detection.\n\n**Next.js Analytics**\nA true lighthouse score based on real visitor data & page-by-page insights\n\n**Zero Config**\nAutomatic compilation and bundling. Optimized for production from the start.\n\n**Hybrid: SSG and SSR**\nPre-render pages at build time (SSG) or request time (SSR) in a single project.\n\n**Incremental Static Generation**\nAdd and update statically pre-rendered pages incrementally after build time.\n\n**TypeScript Support**\nAutomatic TypeScript configuration and compilation.\n\n**Fast Refresh**\nFast, reliable live-editing experience, as proven at Facebook scale.\n\n**File-system Routing**\nEvery component in the pages directory becomes a route.\n\n**API Routes**\nOptionally create API endpoints to provide backend functionality.\n\n**Built-in CSS Support**\n\n**Code-splitting and Bundling**\nOptimized bundle splitting algorithm created by the Google Chrome team.\n","references":"[NextJS - Create NextJS App](https://nextjs.org/learn/basics/create-nextjs-app)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-creating-an-app","weblink":"https://codersnack.com/nextjs-creating-an-app/","featured_image_preview":{"id":120,"name":"nextjs-logo.png","hash":"a72971e6d13c44179e28e3eeb113c5de","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/a72971e6d13c44179e28e3eeb113c5de.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:37:57.010Z","updated_at":"2021-03-21T21:37:57.010Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Create an NextJS App","created_at":"2021-03-21T21:40:24.403Z","updated_at":"2021-03-21T21:40:24.409Z"},{"id":88,"codersnack":{"id":89,"header":"NextJS - Creating a NextJS App - Setup","created_at":"2021-03-21T22:25:27.933Z","updated_at":"2021-03-21T22:25:27.933Z","explanation":"## Create a Next.js App - Setup\n\nFirst, let’s make sure that your development environment is ready.\n\nIf you don’t have Node.js installed, install it from here. You’ll need **Node.js version 10.13 or later**.\n\nYou’ll be using your own text editor and terminal app for this tutorial.\n\nIf you are on Windows, we recommend downloading Git for Windows and use Git Bash that comes with it, which supports the UNIX-specific commands in this tutorial. Windows Subsystem for Linux (WSL) is another option.\n\nTo create a Next.js app, open your terminal, cd into the directory you’d like to create the app in, and run the following command:\n```\nnpx create-next-app nextjs-blog --use-npm --example \"https://github.com/vercel/next-learn-starter/tree/master/learn-starter\"\n``` \nUnder the hood, this uses the tool called create-next-app, which bootstraps a Next.js app for you. It uses this template through the ```--example```  flag.\n\n\n**Run the development server**\nYou now have a new directory called nextjs-blog. Let’s cd into it:\n```\ncd nextjs-blog\n``` \nThen, run the following command:\n``` \nnpm run dev\n``` \n\nThis starts your Next.js app’s \"development server\" (more on this later) on port 3000.\n\nLet’s check to see if it’s working. Open ```http://localhost:3000```  from your browser.\n\n## Editing the Page\nLet’s try editing the starter page.\n\nMake sure the Next.js development server is still running.\nOpen ```pages/index.js```  with your text editor.\nFind the text that says “Welcome to” under the ```<h1>```  tag and change it to \"Learn\".\nSave the file.\nAs soon as you save the file, the browser automatically updates the page with the new text\n\nThe Next.js development server has **Fast Refresh** enabled. When you make changes to files, Next.js automatically applies the changes in the browser almost instantly. No refresh needed! This will help you iterate on your app quickly.\n\n\n\n\n","references":"[NextJs - Creating NextJS App](https://nextjs.org/learn/basics/create-nextjs-app/setup)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-creating-an-app-setup","weblink":"https://codersnack.com/nextjs-creating-an-app-setup/","featured_image_preview":{"id":121,"name":"nextjs-logo.png","hash":"f25168e769144ec69a23dddad0c79c53","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/f25168e769144ec69a23dddad0c79c53.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T22:25:27.966Z","updated_at":"2021-03-21T22:25:27.966Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Creating a NextJs App - Setup","created_at":"2021-03-21T22:26:49.470Z","updated_at":"2021-03-21T22:26:49.490Z"},{"id":89,"codersnack":{"id":90,"header":"NextJs - Navigating between pages","created_at":"2021-03-22T21:52:11.631Z","updated_at":"2021-03-22T21:52:11.631Z","explanation":"In this lesson, you will:\n\n- Create a new page using the integrated **file system routing**.\n- Learn how to use the **Link** component to enable client-side navigation between pages.\n- Learn about built-in support for code splitting and prefetching.\n\nIf you’re looking for detailed documentation on Next.js routing, take a look at the routing documentation.\n\n## Pages in Next.js\nIn Next.js, **a page is a React Component exported from a file in the pages directory**.\n\n**Pages are associated with a route based on their file name**. For example, in development:\n\n- ```pages/index.js``` is associated with the ```/``` route.\n- ```pages/posts/first-post.js``` is associated with the ```/posts/first-post``` route.\n\nWe already have the ```pages/index.js``` file, so let’s create ```pages/posts/first-post.js``` to see how it works.\n\n## Create a New Page\nCreate the posts directory under pages.\n\nCreate a file called first-post.js inside the posts directory with the following content:\n\n```\nexport default function FirstPost() {\n  return <h1>First Post</h1>\n}\n```\nThe component can have any name, but you must export it as a default export.\n\nNow, make sure that the development server is running and visit ```http://localhost:3000/posts/first-post```. You should see the page:\n\nFirst Post\n\nThis is how you can create different pages in Next.js.\n\nSimply create a JS file under the pages directory, and the path to the file becomes the URL path.\n\nIn a way, this is similar to building websites using HTML or PHP files. Instead of writing HTML you write JSX and use React Components.\n\nLet's add a link to the newly added page so that we can navigate to it from the homepage.\n\n## Link Component\nWhen linking between pages on websites, you use the ```<a>``` HTML tag.\n\nIn Next.js, you use the **Link** Component from ```next/link``` to wrap the ```<a>``` tag. ```<Link>``` allows you to do client-side navigation to a different page in the application.\n\n### Using Link\nFirst, open ```pages/index.js```, and import the Link component from next/link by adding this line at the top:\n\n```\nimport Link from 'next/link'\n```\nThen find the h1 tag that looks like this:\n\n```\n<h1 className=\"title\">\n  Learn <a href=\"https://nextjs.org\">Next.js!</a>\n</h1>\n```\n\nAnd change it to:\n\n```\n<h1 className=\"title\">\n  Read{' '}\n  <Link href=\"/posts/first-post\">\n    <a>this page!</a>\n  </Link>\n</h1>\n```\n{' '} adds an empty space, which is used to divide text over multiple lines.\n\nNext, open **pages/posts/first-post.js** and replace its content with the following:\n\n```\nimport Link from 'next/link'\n\nexport default function FirstPost() {\n  return (\n    <>\n      <h1>First Post</h1>\n      <h2>\n        <Link href=\"/\">\n          <a>Back to home</a>\n        </Link>\n      </h2>\n    </>\n  )\n}\n```\n\nAs you can see, the Link component is similar to using ```<a>``` tags, but instead of ```<a href=\"…\">```, you use ```<Link href=\"…\">``` and put an ```<a>``` tag inside.\n\nLet’s check to see if it works. You should now have a link on each page, allowing you to go back and forth.\n\n## Client-Side Navigation\nThe **Link component enables client-side navigation between two pages** in the same Next.js app.\n\nClient-side navigation means that the page transition **happens using JavaScript**, which is faster than the default navigation done by the browser.\n\nHere’s a simple way you can verify it:\n\nUse the browser’s developer tools to change the background CSS property of ```<html>``` to yellow.\nClick on the links to go back and forth between the two pages.\nYou’ll see that the yellow background persists between page transitions.\nThis shows that the browser does not load the full page and client-side navigation is working.\n\n## Links\nIf you’ve used ```<a href=\"…\">``` instead of ```<Link href=\"…\">``` and did this, the background color will be cleared on link clicks because the browser does a full refresh.\n\n## Code splitting and prefetching\nNext.js does code splitting **automatically**, so **each page only loads what’s necessary for that page**. That means when the homepage is rendered, the code for other pages is not served initially.\n\nThis ensures that the **homepage loads quickly even if you have hundreds of pages**.\n\nOnly loading the code for the page you request also means that pages become isolated. If a certain page throws an error, the rest of the application would still work.\n\nFurthermore, in a production build of Next.js, whenever Link components appear in the browser’s viewport, **Next.js automatically prefetches the code for the linked page in the background**. By the time you click the link, the code for the destination page will already be loaded in the background, and the page transition will be near-instant!\n\n## Summary\nNext.js automatically optimizes your application for the best performance by code splitting, client-side navigation, and prefetching (in production).\n\nYou create routes as files under pages and use the built-in Link component. No routing libraries are required.\n\nYou can learn more about the Link component in the API reference for ```next/link``` and routing in general in the routing documentation.\n\nNote: If you need to link to an external page outside the Next.js app, just use an ```<a>``` tag without Link.\n\nIf you need to add attributes like, for example, **className**, **add it to the a tag, not to the Link tag.** Here’s an example.\n\n\n\n","references":"[NextJs - Navigating between pages - Client side](https://nextjs.org/learn/basics/navigate-between-pages/client-side)","featured_image_url":"https://codersnack.com/assets/images/nextjs-logo.png","slug":"nextjs-navigating-between-pages","weblink":"https://codersnack.com/nextjs-navigating-between-pages/","featured_image_preview":{"id":122,"name":"nextjs-logo.png","hash":"79f644b29b884d70a547bcd887e5dedf","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/79f644b29b884d70a547bcd887e5dedf.png","provider":"local","provider_metadata":null,"created_at":"2021-03-22T21:52:11.648Z","updated_at":"2021-03-22T21:52:11.648Z"}},"codersnacks_category":{"id":17,"header":"NextJS","description":"The React Framework for Production\nNext.js gives you the best developer experience with all the features you need for production: hybrid static & server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.","snacks_by_cat_json_filename":"nextjs.snacks.json","key":"nextjs","image_url":"https://codersnack.com/assets/images/nextjs-logo.png","created_at":"2021-03-21T21:21:09.568Z","updated_at":"2021-03-21T21:21:09.568Z","image_preview":{"id":119,"name":"nextjs-logo.png","hash":"3be051b4584742db98069b2bd96f998a","sha256":"X-p-BaME7xopk3LcdT2Jm5xZvWt7sZDr0RCDltOUt1g","ext":".png","mime":"image/png","size":19.63,"url":"/uploads/3be051b4584742db98069b2bd96f998a.png","provider":"local","provider_metadata":null,"created_at":"2021-03-21T21:21:09.584Z","updated_at":"2021-03-21T21:21:09.584Z"}},"title":"NextJS - Navigating between pages","created_at":"2021-03-22T21:52:45.238Z","updated_at":"2021-03-22T21:52:45.240Z"}]