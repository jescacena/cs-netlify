[{"id":1,"codersnack":{"id":1,"header":"ES6 let and closures","created_at":"2019-12-30T18:56:27.814Z","updated_at":"2020-01-04T21:14:27.269Z","explanation":"Functions can be nested inside other functions. \nConsider the next code:\n\n```\n(function autorun(){\n    let x = 1;\n    function log(){ \n       console.log(x); \n    }\n    log();\n})();\n```\n**log()** is a nested function inside the autorun() function. log() accesses the variable x from its outer function. The log() function is a closure.\n\n> **Closures** are inner functions. Closures can be created by defining a function inside another function or inside a block.\n> **Lexical scope** is the ability of the inner function to access the outer scope in which it is defined.\nConsider the next code:\n\n```\n(function autorun(){\n    let x = 1;\n    function log(){\n      console.log(x);\n    };\n    \n    function run(fn){\n      let x = 100;\n      fn();\n    }\n    \n    run(log);//1\n})();\n```\n\n**The log function is a closure**. It refers the x variable from its parent function autorun(), not the one from the run() function.\n> The closure function has access to the scope in which it was created, not the scope in which it is executed.\n\nThe local function scope of autorun() is the lexical scope of the log()function.\n\n> Closures store references of outer variables, they don’t copy the actual values. \n\nThe for loop statement, with the let declaration, creates a new variable local to the block scope, for each iteration. The next loop creates five closures over five different i variables.\n\n```\n(function run(){\n  for(let i=0; i<5; i++){\n    setTimeout(function log(){\n      console.log(i); //0 1 2 3 4\n    }, 100);\n  }\n})();\n```\nWriting the same code with var will create five closures, over the same variable, so all closures will display the last value of i. The *log()* function is a closure","references":"[[Medium] Discover the power of closures in javascript](https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7)\n[[Medium] These are the features in es6 that you should know](https://medium.freecodecamp.org/these-are-the-features-in-es6-that-you-should-know-1411194c71cb)","featured_image_url":"http://codersnack.com/assets/images/es6-let-closure.png","slug":"es6-let-closures","weblink":"https://codersnack.com/es6-let-closures/","featured_image_preview":{"id":1,"name":"es6-let-closure.png","hash":"fbc6a364da1748bea449d8b8c1f818bd","sha256":"T_ihZTRaAcE59QoXy89nBis36SNKXYyNZ2x8-5yYvBw","ext":".png","mime":"image/png","size":9.35,"url":"/uploads/fbc6a364da1748bea449d8b8c1f818bd.png","provider":"local","provider_metadata":null,"created_at":"2019-12-30T18:58:50.917Z","updated_at":"2019-12-30T18:58:50.917Z"}},"codersnacks_quiz":{"id":1,"question":"What is the scope of a variable?","response_valid":"It defines the lifetime and visibility of a variable. Variables are not visible outside the scope in which they are declared","response_invalid1":"The amount of space reserved in memory","response_invalid2":"The type of the variable","created_at":"2019-12-31T16:43:12.240Z","updated_at":"2019-12-31T16:43:12.240Z"},"codersnacks_category":{"id":1,"header":"ES6","description":"Ecmascript 6","snacks_by_cat_json_filename":"es6.snacks.json","key":"es6","image_url":"http://codersnack.com/assets/images/es6.png","created_at":"2019-12-30T19:00:08.620Z","updated_at":"2020-01-04T11:09:02.347Z","image_preview":{"id":2,"name":"es6.png","hash":"fc475317b566444dbcb2605b9918cf87","sha256":"HwqWhJDjM92fduJqKeNaJhM1z41h36J-K2-8YaHK_Dg","ext":".png","mime":"image/png","size":2.08,"url":"/uploads/fc475317b566444dbcb2605b9918cf87.png","provider":"local","provider_metadata":null,"created_at":"2019-12-30T19:00:08.639Z","updated_at":"2019-12-30T19:00:08.639Z"}},"title":"es6 - es6 let and closures - what is the scope...","created_at":"2019-12-31T16:47:52.604Z","updated_at":"2019-12-31T20:30:25.033Z"},{"id":2,"codersnack":{"id":1,"header":"ES6 let and closures","created_at":"2019-12-30T18:56:27.814Z","updated_at":"2020-01-04T21:14:27.269Z","explanation":"Functions can be nested inside other functions. \nConsider the next code:\n\n```\n(function autorun(){\n    let x = 1;\n    function log(){ \n       console.log(x); \n    }\n    log();\n})();\n```\n**log()** is a nested function inside the autorun() function. log() accesses the variable x from its outer function. The log() function is a closure.\n\n> **Closures** are inner functions. Closures can be created by defining a function inside another function or inside a block.\n> **Lexical scope** is the ability of the inner function to access the outer scope in which it is defined.\nConsider the next code:\n\n```\n(function autorun(){\n    let x = 1;\n    function log(){\n      console.log(x);\n    };\n    \n    function run(fn){\n      let x = 100;\n      fn();\n    }\n    \n    run(log);//1\n})();\n```\n\n**The log function is a closure**. It refers the x variable from its parent function autorun(), not the one from the run() function.\n> The closure function has access to the scope in which it was created, not the scope in which it is executed.\n\nThe local function scope of autorun() is the lexical scope of the log()function.\n\n> Closures store references of outer variables, they don’t copy the actual values. \n\nThe for loop statement, with the let declaration, creates a new variable local to the block scope, for each iteration. The next loop creates five closures over five different i variables.\n\n```\n(function run(){\n  for(let i=0; i<5; i++){\n    setTimeout(function log(){\n      console.log(i); //0 1 2 3 4\n    }, 100);\n  }\n})();\n```\nWriting the same code with var will create five closures, over the same variable, so all closures will display the last value of i. The *log()* function is a closure","references":"[[Medium] Discover the power of closures in javascript](https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7)\n[[Medium] These are the features in es6 that you should know](https://medium.freecodecamp.org/these-are-the-features-in-es6-that-you-should-know-1411194c71cb)","featured_image_url":"http://codersnack.com/assets/images/es6-let-closure.png","slug":"es6-let-closures","weblink":"https://codersnack.com/es6-let-closures/","featured_image_preview":{"id":1,"name":"es6-let-closure.png","hash":"fbc6a364da1748bea449d8b8c1f818bd","sha256":"T_ihZTRaAcE59QoXy89nBis36SNKXYyNZ2x8-5yYvBw","ext":".png","mime":"image/png","size":9.35,"url":"/uploads/fbc6a364da1748bea449d8b8c1f818bd.png","provider":"local","provider_metadata":null,"created_at":"2019-12-30T18:58:50.917Z","updated_at":"2019-12-30T18:58:50.917Z"}},"codersnacks_quiz":{"id":2,"question":"In which way let variables are affecting javascript closures?","response_valid":"As a let variable allow defining block scope variables , we can fix some var problems in ES5","response_invalid1":"in any way","response_invalid2":"you can change the scope of a variable to accessing other scopes","created_at":"2019-12-31T16:44:06.861Z","updated_at":"2019-12-31T16:44:06.861Z"},"codersnacks_category":{"id":1,"header":"ES6","description":"Ecmascript 6","snacks_by_cat_json_filename":"es6.snacks.json","key":"es6","image_url":"http://codersnack.com/assets/images/es6.png","created_at":"2019-12-30T19:00:08.620Z","updated_at":"2020-01-04T11:09:02.347Z","image_preview":{"id":2,"name":"es6.png","hash":"fc475317b566444dbcb2605b9918cf87","sha256":"HwqWhJDjM92fduJqKeNaJhM1z41h36J-K2-8YaHK_Dg","ext":".png","mime":"image/png","size":2.08,"url":"/uploads/fc475317b566444dbcb2605b9918cf87.png","provider":"local","provider_metadata":null,"created_at":"2019-12-30T19:00:08.639Z","updated_at":"2019-12-30T19:00:08.639Z"}},"title":"es6 - es6 let and closures - in which way let ...","created_at":"2019-12-31T16:49:11.726Z","updated_at":"2019-12-31T20:30:44.928Z"},{"id":4,"codersnack":{"id":2,"header":"ES6 let and const","created_at":"2019-12-31T16:35:45.883Z","updated_at":"2020-01-04T21:15:00.442Z","explanation":"There are two ways for declaring a variable (let and const) plus one that has become obsolete (var).\n\n## let\n\n**let declares and optionally initializes a variable in the current scope**. The current scope can be either a module, a function or a block. The value of a variable that is not initialized is undefined .\nScope defines the lifetime and visibility of a variable. Variables are not visible outside the scope in which they are declared.\nConsider the next code that emphasizes let block scope:\n```\nlet x = 1;\n{ \n  let x = 2;\n}\nconsole.log(x); //1\n```\nIn contrast, the var declaration had no block scope:\n```\nvar x = 1;\n{ \n  var x = 2;\n}\nconsole.log(x); //2\n```\n\n## const\n\n**const declares a variable that cannot be reassigned**. It becomes a constant only when the assigned value is immutable.\nAn immutable value is a value that, once created, cannot be changed. Primitive values are immutable, objects are mutable.\n\n> const freezes the variable, Object.freeze() freezes the object.\n\nThe initialization of the const variable is mandatory.\n","references":"[Medium - These are the features in es6 that you should know](https://medium.freecodecamp.org/these-are-the-features-in-es6-that-you-should-know-1411194c71cb)\n[Medium - Discover the power of closures in javascript](https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7)","featured_image_url":"https://codersnack.com/assets/images/es6-let-const.png","slug":"es6-let-const","weblink":"https://codersnack.com/es6-let-const/","featured_image_preview":{"id":3,"name":"es6-let-const.png","hash":"948e28b024e349818929b0c12c071613","sha256":"2zlsGi4zWiNhlovCU5Vj5PG7oZbokWm2d-9p_RNCB-g","ext":".png","mime":"image/png","size":36.12,"url":"/uploads/948e28b024e349818929b0c12c071613.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T16:35:45.896Z","updated_at":"2019-12-31T16:35:45.896Z"}},"codersnacks_quiz":{"id":3,"question":"is it mandatory initialize a const variable?","response_valid":"Always","response_invalid1":"It depends on being a variable or an object","response_invalid2":"Never","created_at":"2019-12-31T20:25:41.602Z","updated_at":"2019-12-31T20:25:41.602Z"},"codersnacks_category":{"id":1,"header":"ES6","description":"Ecmascript 6","snacks_by_cat_json_filename":"es6.snacks.json","key":"es6","image_url":"http://codersnack.com/assets/images/es6.png","created_at":"2019-12-30T19:00:08.620Z","updated_at":"2020-01-04T11:09:02.347Z","image_preview":{"id":2,"name":"es6.png","hash":"fc475317b566444dbcb2605b9918cf87","sha256":"HwqWhJDjM92fduJqKeNaJhM1z41h36J-K2-8YaHK_Dg","ext":".png","mime":"image/png","size":2.08,"url":"/uploads/fc475317b566444dbcb2605b9918cf87.png","provider":"local","provider_metadata":null,"created_at":"2019-12-30T19:00:08.639Z","updated_at":"2019-12-30T19:00:08.639Z"}},"title":"es6 - es6 let and const - it is mandatory initialize ...","created_at":"2019-12-31T20:32:24.682Z","updated_at":"2019-12-31T20:33:46.897Z"},{"id":8,"codersnack":{"id":7,"header":"ES6 modules","created_at":"2020-01-06T18:32:38.545Z","updated_at":"2020-01-06T18:32:38.545Z","explanation":"Before modules, a variable declared outside any function was a global variable.\n\n**With modules, a variable declared outside any function is hidden and not available to other modules unless it is explicitly exported**.\n\n*Exporting makes a function or object available to other modules*. In the next example, I export functions from different modules:\n\n```\n//module \"./TodoStore.js\"\nexport default function TodoStore(){}\n\n//module \"./UserStore.js\"\nexport default function UserStore(){}\n```\n\n*Importing makes a function or object, from other modules, available to the current module*.\n\n```\nimport TodoStore from \"./TodoStore\";\nimport UserStore from \"./UserStore\";\n\nconst todoStore = TodoStore();\nconst userStore = UserStore();\n```","references":"[These are the features in es6 that you should know](https://www.freecodecamp.org/news/these-are-the-features-in-es6-that-you-should-know-1411194c71cb/)","featured_image_url":"https://codersnack.com/assets/images/es6.png","slug":"es6-modules","weblink":"https://codersnack.com/es-modules/","featured_image_preview":{"id":10,"name":"ECMAScript-01.png","hash":"ec1784864262409a869888331ef51b2b","sha256":"HwqWhJDjM92fduJqKeNaJhM1z41h36J-K2-8YaHK_Dg","ext":".png","mime":"image/png","size":2.08,"url":"/uploads/ec1784864262409a869888331ef51b2b.png","provider":"local","provider_metadata":null,"created_at":"2020-01-06T18:32:38.559Z","updated_at":"2020-01-06T18:32:38.559Z"}},"codersnacks_quiz":{"id":8,"question":"Es6 modules - Check the valid sentence","response_valid":"Importing makes a function or object, from other modules, available to the current module","response_invalid1":"Export a functions makes that function available to the whole app","response_invalid2":"Modules are only for organize functions","created_at":"2020-01-06T18:35:42.763Z","updated_at":"2020-01-06T18:35:42.763Z"},"codersnacks_category":{"id":1,"header":"ES6","description":"Ecmascript 6","snacks_by_cat_json_filename":"es6.snacks.json","key":"es6","image_url":"http://codersnack.com/assets/images/es6.png","created_at":"2019-12-30T19:00:08.620Z","updated_at":"2020-01-04T11:09:02.347Z","image_preview":{"id":2,"name":"es6.png","hash":"fc475317b566444dbcb2605b9918cf87","sha256":"HwqWhJDjM92fduJqKeNaJhM1z41h36J-K2-8YaHK_Dg","ext":".png","mime":"image/png","size":2.08,"url":"/uploads/fc475317b566444dbcb2605b9918cf87.png","provider":"local","provider_metadata":null,"created_at":"2019-12-30T19:00:08.639Z","updated_at":"2019-12-30T19:00:08.639Z"}},"title":"es6-modules-true-sentence","created_at":"2020-01-06T18:36:11.778Z","updated_at":"2020-01-06T18:36:11.781Z"}]