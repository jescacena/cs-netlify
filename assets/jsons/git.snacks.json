[{"id":131,"codersnack":{"id":128,"header":"How to do a code review - The Standard","created_at":"2022-01-20T15:40:18.381Z","updated_at":"2022-01-20T15:40:18.381Z","explanation":"The **primary purpose** of code review is to make sure that the **overall code health of Google’s code base is improving over time**. All of the tools and processes of code review are designed to this end.\n\nIn order to accomplish this, **a series of trade-offs have to be balanced**.\n\nFirst, **developers must be able to make progress on their tasks**. If you never submit an improvement to the codebase, then the codebase never improves. Also, if a reviewer makes it very difficult for any change to go in, then developers are disincentivized to make improvements in the future.\n\nOn the other hand, **it is the duty of the reviewer to make sure that each CL is of such a quality that the overall code health of their codebase is not decreasing as time goes on**. This can be tricky, because often, codebases degrade through small decreases in code health over time, especially when a team is under significant time constraints and they feel that they have to take shortcuts in order to accomplish their goals.\n\nAlso, a reviewer has ownership and responsibility over the code they are reviewing. They want to ensure that the codebase stays consistent, maintainable, and all of the other things mentioned in \"What to look for in a code review.\"\n\nThus, we get the following rule as the standard we expect in code reviews:\n\n**In general, reviewers should favor approving a CL once it is in a state where it definitely improves the overall code health of the system being worked on, even if the CL isn’t perfect.**\n\nThat is the senior principle among all of the code review guidelines.\n\nThere are limitations to this, of course. For example, if a CL adds a feature that the reviewer doesn’t want in their system, then the reviewer can certainly deny approval even if the code is well-designed.\n\n**A key point here is that there is no such thing as \"perfect\" code—there is only better code**. Reviewers should not require the author to polish every tiny piece of a CL before granting approval. Rather, **the reviewer should balance out the need to make forward progress compared to the importance of the changes they are suggesting.** Instead of seeking perfection, what a reviewer should seek is continuous improvement. A CL that, as a whole, improves the maintainability, readability, and understandability of the system shouldn’t be delayed for days or weeks because it isn’t \"perfect.\"\n\n**Reviewers should always feel free to leave comments expressing that something could be better**, but if it’s not very important, prefix it with something like \"Nit: \" to let the author know that it’s just a point of polish that they could choose to ignore.\n\n> **Note**: Nothing in this document justifies checking in CLs that definitely worsen the overall code health of the system. The only time you would do that would be in an emergency.\n\n\n### Mentoring\n\n**Code review can have an important function of teaching developers something new about a language, a framework, or general software design principles**. It’s always fine to leave comments that help a developer learn something new. Sharing knowledge is part of improving the code health of a system over time. Just keep in mind that if your comment is purely educational, but not critical to meeting the standards described in this document, prefix it with \"Nit: \" or otherwise indicate that it’s not mandatory for the author to resolve it in this CL.\n\n\n### Principles\n\n**Technical facts and data overrule opinions and personal preferences**.\n\n**On matters of style, the style guide is the absolute authority.** Any purely style point (whitespace, etc.) that is not in the style guide is a matter of personal preference. The style should be consistent with what is there. If there is no previous style, accept the author’s.\n\n**Aspects of software design are almost never a pure style issue or just a personal preference**. They are based on underlying principles and should be weighed on those principles, not simply by personal opinion. Sometimes there are a few valid options. If the author can demonstrate (either through data or based on solid engineering principles) that several approaches are equally valid, then the reviewer should accept the preference of the author. Otherwise the choice is dictated by standard principles of software design.\n\nIf no other rule applies, then the reviewer may ask the author to be consistent with what is in the current codebase, as long as that doesn’t worsen the overall code health of the system.\n\n\n### Resolving Conflicts\n\n**In any conflict on a code review, the first step should always be for the developer and reviewer to try to come to consensus**, based on the contents of this document and the other documents in The CL Author’s Guide and this Reviewer Guide.\n\n**When coming to consensus becomes especially difficult, it can help to have a face-to-face meeting or a video conference between the reviewer and the author, instead of just trying to resolve the conflict through code review comments**. (If you do this, though, make sure to record the results of the discussion as a comment on the CL, for future readers.)\n\n**If that doesn’t resolve the situation, the most common way to resolve it would be to escalate**. Often the escalation path is to a broader team discussion, having a Technical Lead weigh in, asking for a decision from a maintainer of the code, or asking an Eng Manager to help out. Don’t let a CL sit around because the author and the reviewer can’t come to an agreement.\n\n","references":"- [Google - The Standard Code Review](https://google.github.io/eng-practices/review/reviewer/standard.html) ","featured_image_url":"https://codersnack.com/assets/images/git-icon.png","slug":"git-the-sdandard-code-review","weblink":"https://codersnack.com/git-the-sdandard-code-review","featured_image_preview":{"id":165,"name":"git-icon.png","hash":"94901bbb55e14d228c473aa480f408b0","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/94901bbb55e14d228c473aa480f408b0.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:40:18.393Z","updated_at":"2022-01-20T15:40:18.393Z"}},"codersnacks_category":{"id":21,"header":"Git","description":"Source Code Control","snacks_by_cat_json_filename":"git.snacks.json","key":"git","image_url":"https://codersnack.com/assets/images/git-icon.png","created_at":"2022-01-20T15:06:57.128Z","updated_at":"2022-01-20T15:06:57.128Z","image_preview":{"id":164,"name":"git-icon.png","hash":"d46112a74ded44eb91245112375666e9","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/d46112a74ded44eb91245112375666e9.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:06:57.146Z","updated_at":"2022-01-20T15:06:57.146Z"}},"title":"Git - How to review code - The standard","created_at":"2022-01-20T15:42:02.670Z","updated_at":"2022-01-20T15:42:02.673Z"},{"id":132,"codersnack":{"id":129,"header":"How to do a code review - What to look for in a code review","created_at":"2022-01-21T09:34:33.654Z","updated_at":"2022-01-21T09:34:33.654Z","explanation":"> **Note**: Always make sure to take into account (The Standard of Code Review)[https://codersnack.com/git-the-sdandard-code-review/] when considering each of these points.\n\n\n### Design\n\nThe most important thing to cover in a review is the **overall design of the CL**. Do the interactions of various pieces of code in the CL make sense? Does this change belong in your codebase, or in a library? Does it integrate well with the rest of your system? Is now a good time to add this functionality?\n\n\n### Functionality\n\n**Does this CL do what the developer intended?** Is what the developer intended good for the users of this code? The \"users\" are usually both end-users (when they are affected by the change) and developers (who will have to \"use\" this code in the future).\n\nMostly, we expect developers to test CLs well-enough that they work correctly by the time they get to code review. However, **as the reviewer you should still be thinking about edge cases, looking for concurrency problems, trying to think like a user, and making sure that there are no bugs that you see just by reading the code.**\n\nYou can validate the CL if you want—the time when it’s most important for a reviewer to check a CL’s behavior is **when it has a user-facing impact, such as a UI change**. It’s hard to understand how some changes will impact a user when you’re just reading the code. For changes like that, **you can have the developer give you a demo of the functionality** if it’s too inconvenient to patch in the CL and try it yourself.\n\nAnother time when it’s particularly important to think about functionality during a code review is **if there is some sort of parallel programming going on in the CL that could theoretically cause deadlocks or race conditions**. These sorts of issues are very hard to detect by just running the code and usually need somebody (both the developer and the reviewer) to think through them carefully to be sure that problems aren’t being introduced. (Note that this is also a good reason not to use concurrency models where race conditions or deadlocks are possible—it can make it very complex to do code reviews or understand the code.)\n\n\n### Complexity\n\n**Is the CL more complex than it should be?** Check this at every level of the CL—are individual lines too complex? Are functions too complex? Are classes too complex? \"Too complex\" usually means \"can’t be understood quickly by code readers.\" It can also mean \"developers are likely to introduce bugs when they try to call or modify this code.\"\n\n**A particular type of complexity is over-engineering, where developers have made the code more generic than it needs to be, or added functionality that isn’t presently needed by the system**. Reviewers should be especially vigilant about over-engineering. Encourage developers to solve the problem they know needs to be solved now, not the problem that the developer speculates might need to be solved in the future. The future problem should be solved once it arrives and you can see its actual shape and requirements in the physical universe.\n\n\n### Tests\n\nAsk for unit, integration, or end-to-end tests as appropriate for the change. In general, **tests should be added in the same CL as the production code** unless the CL is handling an emergency.\n\n**Make sure that the tests in the CL are correct, sensible, and useful**. Tests do not test themselves, and we rarely write tests for our tests—a human must ensure that tests are valid.\n\nWill the tests actually fail when the code is broken? If the code changes beneath them, will they start producing false positives? Does each test make simple and useful assertions? Are the tests separated appropriately between different test methods?\n\n**Remember that tests are also code that has to be maintained**. Don’t accept complexity in tests just because they aren’t part of the main binary.\n\n\n### Naming\n\n**Did the developer pick good names for everything?** A good name is long enough to fully communicate what the item is or does, without being so long that it becomes hard to read.\n\n\n### Comments\n\n**Did the developer write clear comments in understandable English?** Are all of the comments actually necessary? Usually comments are useful when they explain why some code exists, and should not be explaining what some code is doing. If the code isn’t clear enough to explain itself, then the code should be made simpler. There are some exceptions (regular expressions and complex algorithms often benefit greatly from comments that explain what they’re doing, for example) but mostly comments are for information that the code itself can’t possibly contain, like the reasoning behind a decision.\n\nIt can also be helpful to look at comments that were there before this CL. Maybe there is a TODO that can be removed now, a comment advising against this change being made, etc.\n\nNote that comments are different from documentation of classes, modules, or functions, which should instead express the purpose of a piece of code, how it should be used, and how it behaves when used.\n\n\n### Style\n\nWe have style guides at Google for all of our major languages, and even for most of the minor languages. **Make sure the CL follows the appropriate style guides**.\n\nIf you want to improve some style point that isn’t in the style guide, prefix your comment with \"Nit:\" to let the developer know that it’s a nitpick that you think would improve the code but isn’t mandatory. **Don’t block CLs from being submitted based only on personal style preferences.**\n\n**The author of the CL should not include major style changes combined with other changes**. It makes it hard to see what is being changed in the CL, makes merges and rollbacks more complex, and causes other problems. For example, if the author wants to reformat the whole file, have them send you just the reformatting as one CL, and then send another CL with their functional changes after that.\n\n\n### Consistency\n\nWhat if the existing code is inconsistent with the style guide? Per our code review principles, the style guide is the absolute authority: if something is required by the style guide, the CL should follow the guidelines.\n\nIn some cases, the style guide makes recommendations rather than declaring requirements. In these cases, it’s a judgment call whether the new code should be consistent with the recommendations or the surrounding code. Bias towards following the style guide unless the local inconsistency would be too confusing.\n\nIf no other rule applies, the author should maintain consistency with the existing code.\n\nEither way, encourage the author to file a bug and add a TODO for cleaning up existing code.\n\n### Documentation\n\n**If a CL changes how users build, test, interact with, or release code, check to see that it also updates associated documentation**, including READMEs, g3doc pages, and any generated reference docs. If the CL deletes or deprecates code, consider whether the documentation should also be deleted. If documentation is missing, ask for it.\n\n\n### Every Line\n\n**In the general case, look at every line of code that you have been assigned to review**. Some things like data files, generated code, or large data structures you can scan over sometimes, but don’t scan over a human-written class, function, or block of code and assume that what’s inside of it is okay. Obviously some code deserves more careful scrutiny than other code—that’s a judgment call that you have to make—but you should at least be sure that you understand what all the code is doing.\n\n**If it’s too hard for you to read the code and this is slowing down the review, then you should let the developer know that** and wait for them to clarify it before you try to review it. At Google, we hire great software engineers, and you are one of them. If you can’t understand the code, it’s very likely that other developers won’t either. So you’re also helping future developers understand this code, when you ask the developer to clarify it.\n\n**If you understand the code but you don’t feel qualified to do some part of the review, make sure there is a reviewer on the CL who is qualified**, particularly for complex issues such as security, concurrency, accessibility, internationalization, etc.\n\n\n#### Exceptions\n\nWhat if it doesn’t make sense for you to review every line? For example, you are one of multiple reviewers on a CL and may be asked:\n\n- To review only certain files that are part of a larger change.\n- To review only certain aspects of the CL, such as the high-level design, security implications, etc.\n\nIn these cases, note in a comment which parts you reviewed. Prefer giving LGTM (looks good to me) with comments .\n\nIf you instead wish to grant LGTM after confirming that other reviewers have reviewed other parts of the CL, note this explicitly in a comment to set expectations. Aim to respond quickly once the CL has reached the desired state.\n\n### Context\n\n**It is often helpful to look at the CL in a broad context.** Usually the code review tool will only show you a few lines of code around the parts that are being changed. Sometimes you have to look at the whole file to be sure that the change actually makes sense. For example, you might see only four new lines being added, but when you look at the whole file, you see those four lines are in a 50-line method that now really needs to be broken up into smaller methods.\n\n**It’s also useful to think about the CL in the context of the system as a whole**. Is this CL improving the code health of the system or is it making the whole system more complex, less tested, etc.? Don’t accept CLs that degrade the code health of the system. Most systems become complex through many small changes that add up, so it’s important to prevent even small complexities in new changes.\n\n\n### Good Things\n\n**If you see something nice in the CL, tell the developer, especially when they addressed one of your comments in a great way**. Code reviews often just focus on mistakes, but they should offer encouragement and appreciation for good practices, as well. It’s sometimes even more valuable, in terms of mentoring, to tell a developer what they did right than to tell them what they did wrong.\n\n### Summary\n\nIn doing a code review, you should make sure that:\n\n- The code is well-designed.\n- The functionality is good for the users of the code.\n- Any UI changes are sensible and look good.\n- Any parallel programming is done safely.\n- The code isn’t more complex than it needs to be.\n- The developer isn’t implementing things they might need in the future but don’t know they need now.\n- Code has appropriate unit tests.\n- Tests are well-designed.\n- The developer used clear names for everything.\n- Comments are clear and useful, and mostly explain why instead of what.\n- Code is appropriately documented (generally in g3doc).\n- The code conforms to our style guides.\n\nMake sure to review every line of code you’ve been asked to review, look at the context, make sure you’re improving code health, and compliment developers on good things that they do.","references":"[Google - What to look for in a code review](https://google.github.io/eng-practices/review/reviewer/looking-for.html) ","featured_image_url":"https://codersnack.com/assets/images/git-icon.png","slug":"git-what-to-look-for-in-a-code-review","weblink":"https://codersnack.com/git-what-to-look-for-in-a-code-review","featured_image_preview":{"id":166,"name":"git-icon.png","hash":"25acb658a2bc4d2fa939d6f85e44f1ca","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/25acb658a2bc4d2fa939d6f85e44f1ca.png","provider":"local","provider_metadata":null,"created_at":"2022-01-21T09:34:33.674Z","updated_at":"2022-01-21T09:34:33.674Z"}},"codersnacks_category":{"id":21,"header":"Git","description":"Source Code Control","snacks_by_cat_json_filename":"git.snacks.json","key":"git","image_url":"https://codersnack.com/assets/images/git-icon.png","created_at":"2022-01-20T15:06:57.128Z","updated_at":"2022-01-20T15:06:57.128Z","image_preview":{"id":164,"name":"git-icon.png","hash":"d46112a74ded44eb91245112375666e9","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/d46112a74ded44eb91245112375666e9.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:06:57.146Z","updated_at":"2022-01-20T15:06:57.146Z"}},"title":"How to do a code review - looking for","created_at":"2022-01-21T09:35:13.459Z","updated_at":"2022-01-21T09:35:13.463Z"},{"id":133,"codersnack":{"id":130,"header":"How to do a code review -  Navigating a CL in review","created_at":"2022-01-21T17:15:44.315Z","updated_at":"2022-01-21T17:15:44.315Z","explanation":"\n####  Summary\n\nNow that you know what to look for, what’s the **most efficient way to manage a review that’s spread across multiple files**?\n\n- Does the change make sense? Does it have a good description?\n- Look at the most important part of the change first. Is it well-designed overall?\n- Look at the rest of the CL in an appropriate sequence.\n\n###  Step One: Take a broad view of the change\n\n**Look at the CL description and what the CL does in general. Does this change even make sense?** If this change shouldn’t have happened in the first place, please respond immediately with an explanation of why the change should not be happening. **When you reject a change like this, it’s also a good idea to suggest to the developer what they should have done instead.**\n\nFor example, you might say \"Looks like you put some good work into this, thanks! However, we’re actually going in the direction of removing the FooWidget system that you’re modifying here, and so we don’t want to make any new modifications to it right now. How about instead you refactor our new BarWidget class?\"\n\nNote that not only did the reviewer reject the current CL and provide an alternative suggestion, but they did it courteously. This kind of courtesy is important because we want to show that we respect each other as developers even when we disagree.\n\n**If you get more than a few CLs that represent changes you don’t want to make, you should consider re-working your team’s development process** or the posted process for external contributors so that there is more communication before CLs are written. It’s better to tell people \"no\" before they’ve done a ton of work that now has to be thrown away or drastically re-written.\n\n\n### Step Two: Examine the main parts of the CL\n\n**Find the file or files that are the \"main\" part of this CL**. Often, there is one file that has the largest number of logical changes, and it’s the major piece of the CL. Look at these major parts first. This helps give context to all of the smaller parts of the CL, and generally accelerates doing the code review. **If the CL is too large for you to figure out which parts are the major parts, ask the developer what you should look at first, or ask them to split up the CL into multiple CLs.**\n\n**If you see some major design problems with this part of the CL, you should send those comments immediately**, even if you don’t have time to review the rest of the CL right now. In fact, reviewing the rest of the CL might be a waste of time, because if the design problems are significant enough, a lot of the other code under review is going to disappear and not matter anyway.\n\nThere are two major reasons it’s so important to send these major design comments out immediately:\n\nDevelopers often mail a CL and then immediately start new work based on that CL while they wait for review. If there are major design problems in the CL you’re reviewing, they’re also going to have to re-work their later CL. You want to catch them before they’ve done too much extra work on top of the problematic design.\n\nMajor design changes take longer to do than small changes. Developers nearly all have deadlines; in order to make those deadlines and still have quality code in the codebase, the developer needs to start on any major re-work of the CL as soon as possible.\n\n\n### Step Three: Look through the rest of the CL in an appropriate sequence\n\nOnce you’ve confirmed there are no major design problems with the CL as a whole, try to figure out a logical sequence to look through the files while also making sure you don’t miss reviewing any file. Usually after you’ve looked through the major files, it’s simplest to just go through each file in the order that the code review tool presents them to you. **Sometimes it’s also helpful to read the tests first before you read the main code, because then you have an idea of what the change is supposed to be doing.**\n\n","references":"- [Google - Navigating a CL in review](https://google.github.io/eng-practices/review/reviewer/navigate.html) ","featured_image_url":"https://codersnack.com/assets/images/git-icon.png","slug":"git-navigate-code-review","weblink":"https://codersnack.com/git-navigate-code-review","featured_image_preview":{"id":167,"name":"git-icon.png","hash":"a3b713378d514cb29654754ed3cf4f61","sha256":"nz5JrXMVN7nsQthJIRHfR7QWl5n6bo4lj-dwbCEGqfU","ext":".png","mime":"image/png","size":12.75,"url":"/uploads/a3b713378d514cb29654754ed3cf4f61.png","provider":"local","provider_metadata":null,"created_at":"2022-01-21T17:15:44.333Z","updated_at":"2022-01-21T17:15:44.333Z"}},"codersnacks_category":{"id":21,"header":"Git","description":"Source Code Control","snacks_by_cat_json_filename":"git.snacks.json","key":"git","image_url":"https://codersnack.com/assets/images/git-icon.png","created_at":"2022-01-20T15:06:57.128Z","updated_at":"2022-01-20T15:06:57.128Z","image_preview":{"id":164,"name":"git-icon.png","hash":"d46112a74ded44eb91245112375666e9","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/d46112a74ded44eb91245112375666e9.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:06:57.146Z","updated_at":"2022-01-20T15:06:57.146Z"}},"title":"How to do a code review - navigate","created_at":"2022-01-21T17:16:04.825Z","updated_at":"2022-01-21T17:16:04.834Z"},{"id":134,"codersnack":{"id":131,"header":"How to do a code review - Speed of Code Reviews","created_at":"2022-01-21T17:38:52.502Z","updated_at":"2022-01-21T17:38:52.502Z","explanation":"### Why Should Code Reviews Be Fast?\n\nAt Google, we optimize for the speed at which a team of developers can produce a product together, as opposed to optimizing for the speed at which an individual developer can write code. **The speed of individual development is important, it’s just not as important as the velocity of the entire team.**\n\nWhen code reviews are slow, several things happen:\n\n- **The velocity of the team as a whole is decreased**. Yes, the individual who doesn’t respond quickly to the review gets other work done. However, new features and bug fixes for the rest of the team are delayed by days, weeks, or months as each CL waits for review and re-review.\n- **Developers start to protest the code review process**. If a reviewer only responds every few days, but requests major changes to the CL each time, that can be frustrating and difficult for developers. Often, this is expressed as complaints about how \"strict\" the reviewer is being. If the reviewer requests the same substantial changes (changes which really do improve code health), but responds quickly every time the developer makes an update, the complaints tend to disappear. Most complaints about the code review process are actually resolved by making the process faster.\n- **Code health can be impacted**. When reviews are slow, there is increased pressure to allow developers to submit CLs that are not as good as they could be. Slow reviews also discourage code cleanups, refactorings, and further improvements to existing CLs.\n\n\n### How Fast Should Code Reviews Be?\n\n**If you are not in the middle of a focused task, you should do a code review shortly after it comes in**.\n\n> **One business day is the maximum time** it should take to respond to a code review request (i.e., first thing the next morning).\n\nFollowing these guidelines means that a typical CL should get multiple rounds of review (if needed) within a single day.\n\n### Speed vs. Interruption\n\nThere is one time where the consideration of personal velocity trumps team velocity. **If you are in the middle of a focused task, such as writing code, don’t interrupt yourself to do a code review**. Research has shown that **it can take a long time for a developer to get back into** a smooth flow of development after being interrupted. So interrupting yourself while coding is actually more expensive to the team than making another developer wait a bit for a code review.\n\nInstead, wait for a break point in your work before you respond to a request for review. This could be when your current coding task is completed, after lunch, returning from a meeting, coming back from the breakroom, etc.\n\n### Fast Responses\n\n**When we talk about the speed of code reviews, it is the response time that we are concerned with, as opposed to how long it takes a CL to get through the whole review and be submitted**. The whole process should also be fast, ideally, but it’s even more important for the individual responses to come quickly than it is for the whole process to happen rapidly.\n\nEven if it sometimes takes a long time to get through the entire review process, having **quick responses from the reviewer throughout the process significantly eases the frustration developers can feel with \"slow\" code reviews.**\n\nIf you are too busy to do a full review on a CL when it comes in, you can still send a quick response that lets the developer know when you will get to it, suggest other reviewers who might be able to respond more quickly, or provide some initial broad comments. (Note: none of this means you should interrupt coding even to send a response like this—send the response at a reasonable break point in your work.)\n\nIt is important that reviewers spend enough time on review that they are certain their \"LGTM\" means \"this code meets our standards.\" However, individual responses should still ideally be fast.\n\n### Cross-Time-Zone Reviews\n\nWhen dealing with time zone differences, try to get back to the author when they are still in the office. If they have already gone home, then try to make sure your review is done before they get back to the office the next day.\n\n### LGTM With Comments\n\nIn order to speed up code reviews, **there are certain situations in which a reviewer should give LGTM/Approval even though they are also leaving unresolved comments on the CL**. This is done when either:\n\n- The **reviewer is confident that the developer** will appropriately address all the reviewer’s remaining comments.\n- The **remaining changes are minor** and don’t have to be done by the developer.\n\nThe reviewer should specify which of these options they intend, if it is not otherwise clear.\n\n**LGTM With Comments is especially worth considering when the developer and reviewer are in different time zones** and otherwise the developer would be waiting for a whole day just to get \"LGTM, Approval.\"\n\n### Large CLs\n\nIf somebody sends you a code review that is so large you’re not sure when you will be able to have time to review it, your typical response should be to **ask the developer to split the CL into several smaller CLs** that build on each other, instead of one huge CL that has to be reviewed all at once. This is usually possible and very helpful to reviewers, even if it takes additional work from the developer.\n\n**If a CL can’t be broken up into smaller CLs, and you don’t have time to review the entire thing quickly, then at least write some comments on the overall design of the CL and send it back to the developer for improvement**. One of your goals as a reviewer should be to always unblock the developer or enable them to take some sort of further action quickly, without sacrificing code health to do so.\n\n### Code Review Improvements Over Time\n\n**If you follow these guidelines and you are strict with your code reviews, you should find that the entire code review process tends to go faster and faster over time**. Developers learn what is required for healthy code, and send you CLs that are great from the start, requiring less and less review time. Reviewers learn to respond quickly and not add unnecessary latency into the review process. But don’t compromise on the [code review standards](https://codersnack.com/git-the-sdandard-code-review/) or quality for an imagined improvement in velocity—it’s not actually going to make anything happen more quickly, in the long run.\n\n### Emergencies\n\n**There are also emergencies where CLs must pass through the whole review process very quickly, and where the quality guidelines would be relaxed**. However, please see [What Is An Emergency?](https://google.github.io/eng-practices/review/emergencies.html#what) for a description of which situations actually qualify as emergencies and which don’t.","references":"- [Google - Speed of Code Reviews](https://google.github.io/eng-practices/review/reviewer/speed.html) ","featured_image_url":"https://codersnack.com/assets/images/git-icon.png","slug":"git-speed-code-review","weblink":"https://codersnack.com/git-speed-code-review","featured_image_preview":{"id":168,"name":"git-icon.png","hash":"9b3d8f3d3d494c5e8f4be3781c461c8e","sha256":"nz5JrXMVN7nsQthJIRHfR7QWl5n6bo4lj-dwbCEGqfU","ext":".png","mime":"image/png","size":12.75,"url":"/uploads/9b3d8f3d3d494c5e8f4be3781c461c8e.png","provider":"local","provider_metadata":null,"created_at":"2022-01-21T17:38:52.519Z","updated_at":"2022-01-21T17:38:52.519Z"}},"codersnacks_category":{"id":21,"header":"Git","description":"Source Code Control","snacks_by_cat_json_filename":"git.snacks.json","key":"git","image_url":"https://codersnack.com/assets/images/git-icon.png","created_at":"2022-01-20T15:06:57.128Z","updated_at":"2022-01-20T15:06:57.128Z","image_preview":{"id":164,"name":"git-icon.png","hash":"d46112a74ded44eb91245112375666e9","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/d46112a74ded44eb91245112375666e9.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:06:57.146Z","updated_at":"2022-01-20T15:06:57.146Z"}},"title":"How to do a code review - speed","created_at":"2022-01-21T17:39:30.701Z","updated_at":"2022-01-21T17:39:30.706Z"},{"id":135,"codersnack":{"id":132,"header":"How to do a code review - How to write code review comments","created_at":"2022-01-22T08:33:36.835Z","updated_at":"2022-01-22T08:33:36.835Z","explanation":"#### Summary\n\n- Be **kind**.\n- Explain your reasoning.\n- Balance giving explicit directions with just pointing out problems and letting the developer decide.\n- Encourage developers to simplify code or add code comments instead of just explaining the complexity to you.\n\n### Courtesy\n\nIn general, **it is important to be courteous and respectful while also being very clear and helpful to the developer whose code you are reviewing**. One way to do this is to be sure that you are always making comments about the code and never making comments about the developer. You don’t always have to follow this practice, but you should definitely use it when saying something that might otherwise be upsetting or contentious. For example:\n\n**Bad**: \"Why did you use threads here when there’s obviously no benefit to be gained from concurrency?\"\n\n**Good**: \"The concurrency model here is adding complexity to the system without any actual performance benefit that I can see. Because there’s no performance benefit, it’s best for this code to be single-threaded instead of using multiple threads.\"\n\n### Explain Why\n\nOne thing you’ll notice about the \"good\" example from above is that it helps the developer understand why you are making your comment. You don’t always need to include this information in your review comments, but sometimes it’s appropriate to give a bit more explanation around your intent, the best practice you’re following, or how your suggestion improves code health.\n\n### Giving Guidance\n\n**In general it is the developer’s responsibility to fix a CL, not the reviewer’s. You are not required to do detailed design of a solution or write code for the developer.**\n\nThis doesn’t mean the reviewer should be unhelpful, though. In general you should strike an appropriate balance between pointing out problems and providing direct guidance. **Pointing out problems and letting the developer make a decision often helps the developer learn, and makes it easier to do code reviews**. It also can result in a better solution, because the developer is closer to the code than the reviewer is.\n\n**However, sometimes direct instructions, suggestions, or even code are more helpful.** The primary goal of code review is to get the best CL possible. A secondary goal is improving the skills of developers so that they require less and less review over time.\n\n**Remember that people learn from reinforcement of what they are doing well and not just what they could do better. If you see things you like in the CL, comment on those too!** Examples: developer cleaned up a messy algorithm, added exemplary test coverage, or you as the reviewer learned something from the CL. Just as with all comments, include why you liked something, further encouraging the developer to continue good practices.\n\n### Accepting Explanations\n\nIf you ask a developer to explain a piece of code that you don’t understand, that should usually result in them rewriting the code more clearly. Occasionally, adding a comment in the code is also an appropriate response, as long as it’s not just explaining overly complex code.\n\nExplanations written only in the code review tool are not helpful to future code readers. **They are acceptable only in a few circumstances, such as when you are reviewing an area you are not very familiar with and the developer explains something that normal readers of the code would have already known.**","references":"- [Google - How to write code review comments](https://google.github.io/eng-practices/review/reviewer/comments.html) ","featured_image_url":"https://codersnack.com/assets/images/git-icon.png","slug":"git-review-comments","weblink":"https://codersnack.com/git-review-comments","featured_image_preview":{"id":169,"name":"git-icon.png","hash":"d7af4e49adaa47c5b615385ade6b2ae7","sha256":"nz5JrXMVN7nsQthJIRHfR7QWl5n6bo4lj-dwbCEGqfU","ext":".png","mime":"image/png","size":12.75,"url":"/uploads/d7af4e49adaa47c5b615385ade6b2ae7.png","provider":"local","provider_metadata":null,"created_at":"2022-01-22T08:33:36.861Z","updated_at":"2022-01-22T08:33:36.861Z"}},"codersnacks_category":{"id":21,"header":"Git","description":"Source Code Control","snacks_by_cat_json_filename":"git.snacks.json","key":"git","image_url":"https://codersnack.com/assets/images/git-icon.png","created_at":"2022-01-20T15:06:57.128Z","updated_at":"2022-01-20T15:06:57.128Z","image_preview":{"id":164,"name":"git-icon.png","hash":"d46112a74ded44eb91245112375666e9","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/d46112a74ded44eb91245112375666e9.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:06:57.146Z","updated_at":"2022-01-20T15:06:57.146Z"}},"title":"How to do a code review - Comments","created_at":"2022-01-22T08:34:05.793Z","updated_at":"2022-01-22T08:34:05.799Z"},{"id":136,"codersnack":{"id":133,"header":"How to to a code review - Handling pushback in code reviews","created_at":"2022-01-22T08:44:27.764Z","updated_at":"2022-01-22T08:44:27.764Z","explanation":"**Sometimes a developer will push back on a code review. Either they will disagree with your suggestion or they will complain that you are being too strict in general.**\n\n### Who is right?\n\n**When a developer disagrees with your suggestion, first take a moment to consider if they are correct**. Often, they are closer to the code than you are, and so they might really have a better insight about certain aspects of it. Does their argument make sense? Does it make sense from a code health perspective? If so, let them know that they are right and let the issue drop.\n\nHowever, **developers are not always right**. In this case the reviewer should further explain why they believe that their suggestion is correct. A good explanation demonstrates both an understanding of the developer’s reply, and additional information about why the change is being requested.\n\nIn particular, when the reviewer believes their suggestion will improve code health, they **should continue to advocate for the change**, if they believe the resulting code quality improvement justifies the additional work requested. Improving code health tends to happen in small steps.\n\nSometimes it takes a few rounds of explaining a suggestion before it really sinks in. Just make sure to **always stay polite and let the developer know that you hear what they’re saying, you just don’t agree**.\n\n### Upsetting Developers\n\n**Reviewers sometimes believe that the developer will be upset if the reviewer insists on an improvement**. Sometimes developers do become upset, but it is usually brief and they become very thankful later that you helped them improve the quality of their code. Usually, if you are polite in your comments, developers actually don’t become upset at all, and the worry is just in the reviewer’s mind. **Upsets are usually more about the way comments are written than about the reviewer’s insistence on code quality**.\n\n### Cleaning It Up Later\n\n**A common source of push back is that developers (understandably) want to get things done**. They don’t want to go through another round of review just to get this CL in. So they say **they will clean something up in a later CL**, and thus you should LGTM this CL now. Some developers are very good about this, and will immediately write a follow-up CL that fixes the issue. However, experience shows that as more time passes after a developer writes the original CL, the less likely this clean up is to happen. In fact, usually unless the developer does the clean up immediately after the present CL, it never happens. This isn’t because developers are irresponsible, but because they have a lot of work to do and the cleanup gets lost or forgotten in the press of other work. Thus, it is usually **best to insist that the developer clean up their CL now, before the code is in the codebase and \"done.\" Letting people \"clean things up later\" is a common way for codebases to degenerate.**\n\nIf a CL introduces new complexity, it must be cleaned up before submission unless it is an emergency.**If the CL exposes surrounding problems and they can’t be addressed right now, the developer should file a bug for the cleanup and assign it to themselves so that it doesn’t get lost**. They can optionally also write a TODO comment in the code that references the filed bug.\n\n### General Complaints About Strictness\n\nIf you previously had fairly lax code reviews and y**ou switch to having strict reviews, some developers will complain very loudly**. Improving the speed of your code reviews usually causes these complaints to fade away.\n\nSometimes it can take months for these complaints to fade away, but eventually developers tend to see the value of strict code reviews as they see what great code they help generate. **Sometimes the loudest protesters even become your strongest supporters once something happens that causes them to really see the value you’re adding by being strict.**\n\n### Resolving Conflicts\n\nIf you are following all of the above but you still encounter a conflict between yourself and a developer that can’t be resolved, see [The Standard of Code Review](https://codersnack.com/git-the-sdandard-code-review/) for guidelines and principles that can help resolve the conflict.","references":"- [Google - Handling pushback in code reviews](https://google.github.io/eng-practices/review/reviewer/pushback.html) ","featured_image_url":"https://codersnack.com/assets/images/git-icon.png","slug":"git-code-review-pushback","weblink":"https://codersnack.com/git-code-review-pushback","featured_image_preview":{"id":170,"name":"git-icon.png","hash":"885ea5bbe08e43a1bee22abf6feb78b1","sha256":"nz5JrXMVN7nsQthJIRHfR7QWl5n6bo4lj-dwbCEGqfU","ext":".png","mime":"image/png","size":12.75,"url":"/uploads/885ea5bbe08e43a1bee22abf6feb78b1.png","provider":"local","provider_metadata":null,"created_at":"2022-01-22T08:44:27.777Z","updated_at":"2022-01-22T08:44:27.777Z"}},"codersnacks_category":{"id":21,"header":"Git","description":"Source Code Control","snacks_by_cat_json_filename":"git.snacks.json","key":"git","image_url":"https://codersnack.com/assets/images/git-icon.png","created_at":"2022-01-20T15:06:57.128Z","updated_at":"2022-01-20T15:06:57.128Z","image_preview":{"id":164,"name":"git-icon.png","hash":"d46112a74ded44eb91245112375666e9","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/d46112a74ded44eb91245112375666e9.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:06:57.146Z","updated_at":"2022-01-20T15:06:57.146Z"}},"title":"How to do a code review - pushback","created_at":"2022-01-22T08:44:50.910Z","updated_at":"2022-01-22T08:44:50.913Z"},{"id":171,"codersnack":{"id":167,"header":"Git - Monorepo: is it worth it?","created_at":"2022-04-21T09:45:35.782Z","updated_at":"2022-04-21T10:41:12.484Z","explanation":"Monorepos are getting more and more popular, and some of us are wondering about joining the hype. But is it worth it? The answer is easy to predict:\n\n**it all depends**\n\nSeeing all those **big brands using monorepos to handle their codebase (Google, Twitter, Facebook, Digital Ocean, etc.)** may make us start using monorepos without giving them a **second thought.** But while taking a decision we should consider at least a few factors that may help us not to change our approach later on.\n\n\n###  Dependencies management\n\nThe bigger the application is, the harder it gets for monorepo to handle dependency management. One of the **biggest advantages of using monorepo is to have all dependencies in one place**. Let’s hear what Google says about it:\n\n> The monolithic model makes it easier to understand the structure of the codebase, as there is no crossing of repository boundaries between dependencies.\n[https://research.google/pubs/pub45424/]\n\n**On the other hand, with time, it’s becoming barely possible to run all the tests and to rebuild an entire codebase over and over again**. It requires a specific ‘intelligent’ mechanisms, detecting changes and selectively building parts of the codebase.\n\n\n###  Cross-project changes\n\nIts a no-brainer, but worth to mention that **it’s easier to do a cross-project changes in a monorepo approach**. According to Google publication:\n\n> A developer can make a major change touching hundreds or thousands of files across the repository in a single consistent operation.\n[https://research.google/pubs/pub45424/]\n\n\n###  Code access management\n\nUsing a monorepo approach **allows all developers to see the whole repository codebase.** If you need a strict read/write access to every code module, monorepo is not the best approach for you.\n\n###  Project size\n\n**Very large projects often suffer from technical limitations of VCS systems**. Handling multiple terabytes of files is not what the standard VSC system is capable of.\n\nWhen does the problem start? It starts when you have to deal with multi-gigabyte repositories. One of the best example is Twitter, where the large codebase is still handled by a standard VSC system. **The simple git commands like git log git blame git commit can take an unacceptable amount of time**.\n\nThat’s why Google has built its system named Piper to manage its gargantuan monorepo. According to the data they shared, they can manage a repository of one billion files, 35 million commits and tens of thousands of developers working on changes daily.\n\nI’m not aware of any open-source equivalent of such a tool [Piper] available on the market now.\n\n###  Onboarding effort\n\nUsing the monorepo approach we need to be aware of the fact, that **every new developer will have to be properly onboarded**. Seeing and understanding a huge codebase on the very first days of their work is not a piece of cake. Checking smaller repositories one by one may be more convenient at the very beginning.\n\n###  Code reusability\n\nIt seems **easier to reuse and version the code while working with monorepo**. When writing some generic module that can be grouped into its package, it does not require a lot of steps to separate it. All we need to do is to just create a directory under packages and initialize it (eg. creating package.json there)\n\n###  Yarn workspaces and Lerna\n\n***Yarn and Lerna* can make our work much easier when dealing with monorepo. Yarn manages our dependencies, and Lerna handles versioning of our packages and execution of one command across multiple packages**. They work perfectly together and many developers decide to use them both. But do we need them both to work with monorepo? No.\n\n**Not every monorepo requires publishing to the npm registry**. Sometimes we want to work with private packages, available only across one particular project. It gives us the benefits of monorepo, without the necessity of publishing all packages we use. Yarn workspaces are a perfect match for such cases.\n\nYou can ask — why do we have to use Yarn, when Lerna can manage dependencies as well? Doesn’t it have lerna bootstrap command?\n\nYes, it has. But it’s a way less efficient than yarn. When Lerna bootstraps, it simply runs yarn install command in every directory separately. Packages can’t share dependencies. It creates a massive amount of node_modules with a lot of duplicated dependencies inside.\n\nYarn elegantly solves the problem — it creates one node_modules in a project root directory and hoists all dependencies there. Only if there is a conflict in packages versions or between multiple dependencies, Yarn downloads the dependency directly to the package.\n\nIf you want to know how to set up such monorepo using Yarn workspaces — soon I’ll publish the article about it. Stay tuned.\n\n###  Conclusion\n\nMonorepo gives us a lot of flexibility in dependencies management and it may be a great choice for some companies to start using this approach. It works as a single source of the truth — we are sure that everybody is always on the same page with the codebase and all its packages. However we, as developers, tend to jump into all popular trends that ‘big brands’ are creating. And it happens that we end up forced to deal with an overhyped solution, that not necessarily was the best choice for us. Anyway — if you haven’t worked with monorepos before I would give it a shot. It’s always good to learn on our own experiences.","references":"- [Medium - Maciej Kocik](https://medium.com/@mkocik/monorepo-is-it-worth-it-e10e0e574c78) ","featured_image_url":"https://codersnack.com/assets/images/git-icon.png","slug":"git-monorepo-worth-it","weblink":"https://codersnack.com/git-monorepo-worth-it","featured_image_preview":{"id":208,"name":"git-icon.png","hash":"33d7529ce64e4ed4a2d2db59148b040a","sha256":"nz5JrXMVN7nsQthJIRHfR7QWl5n6bo4lj-dwbCEGqfU","ext":".png","mime":"image/png","size":12.75,"url":"/uploads/33d7529ce64e4ed4a2d2db59148b040a.png","provider":"local","provider_metadata":null,"created_at":"2022-04-21T09:45:35.799Z","updated_at":"2022-04-21T09:45:35.799Z"}},"codersnacks_category":{"id":21,"header":"Git","description":"Source Code Control","snacks_by_cat_json_filename":"git.snacks.json","key":"git","image_url":"https://codersnack.com/assets/images/git-icon.png","created_at":"2022-01-20T15:06:57.128Z","updated_at":"2022-01-20T15:06:57.128Z","image_preview":{"id":164,"name":"git-icon.png","hash":"d46112a74ded44eb91245112375666e9","sha256":"QSw2LLtIx-NoGAqYz7Mr-chSOuX2Fwoi3DfbJRFY5Qc","ext":".png","mime":"image/png","size":4.72,"url":"/uploads/d46112a74ded44eb91245112375666e9.png","provider":"local","provider_metadata":null,"created_at":"2022-01-20T15:06:57.146Z","updated_at":"2022-01-20T15:06:57.146Z"}},"title":"Git monorepo worth it","created_at":"2022-04-21T09:45:56.387Z","updated_at":"2022-04-21T09:45:56.394Z"}]