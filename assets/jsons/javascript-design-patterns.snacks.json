[{"id":4,"codersnack":{"id":3,"header":"Factory pattern","created_at":"2019-12-31T19:59:11.102Z","updated_at":"2020-02-20T22:07:14.858Z","explanation":"Factory pattern is a *class-based creational pattern*. It provides a generic interface that delegates the responsibility of object instantiation to its subclasses.\n\nThis pattern is frequently used when we need to manage or **manipulate collections of objects that are different yet have many similar characteristics**.\n\nJavascript Example\n```\nclass BallFactory {\n  constructor() {\n    this.createBall = type => {\n      let ball;\n\n      if (type === \"soccer\" || type === \"football\") {\n        ball = new Football();\n      } else if (type === \"basketball\") {\n        ball = new Basketball();\n      }\n      ball.roll = () => {\n        console.log(`The ${type} is rolling`);\n      };\n\n      return ball;\n    };\n  }\n}\n\nclass Football {\n  constructor() {\n    this._type = \"football\";\n    this.kick = () => {\n      console.log(\"You kicked the football\");\n    };\n  }\n}\n\nclass Basketball {\n  constructor() {\n    this._type = \"basketball\";\n    this.bounce = () => {\n      console.log(\"You bounced the basketball\");\n    };\n  }\n}\n\n// creating objects\nconst factory = new BallFactory();\nconst myFootball = factory.createBall(\"football\");\nconst myBasketball = factory.createBall(\"basketball\");\n\nmyFootball.roll();\nmyBasketball.roll();\n\nmyFootball.kick();\n\nmyBasketball.bounce();\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)\n- [Codepen example](https://codepen.io/jescacena/project/editor/ZyVyGn)\n- [Essential JS design patterns book](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-factory","weblink":"https://codersnack.com/js-design-patterns-factory/","featured_image_preview":{"id":7,"name":"design-patterns.jpg","hash":"69291b42c54b4448af713c010abcaad6","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/69291b42c54b4448af713c010abcaad6.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:59:11.112Z","updated_at":"2019-12-31T19:59:11.112Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design patterns - factory","created_at":"2019-12-31T20:18:58.523Z","updated_at":"2019-12-31T20:19:21.840Z"},{"id":6,"codersnack":{"id":6,"header":"What is a design pattern?","created_at":"2020-01-05T22:13:45.020Z","updated_at":"2020-02-24T09:04:38.214Z","explanation":"We write code to solve problems. These problems usually have many similarities, and, when trying to solve them, we notice several common patterns. This is where design patterns come in.\n\n> A design pattern is a term used in software engineering for a general, reusable solution to a commonly occurring problem in software design.\n\n*Design patterns are by no means finished solutions*. They only provide us with **approaches or schemes to solve a problem**. The underlying concept of design patterns has been around in the software engineering industry since the very beginning, but they weren't really so formalised. \n\nDesign patterns are beneficial for various reasons. They are proven solutions that industry veterans have tried and tested. They are solid approaches that solve issues in a widely accepted way and reflect the experience and insights of the industry-leading developers that helped define them. Patterns also **make your code more reusable and readable while speeding up the development process vastly**.\n\n**Design Patterns: Elements of Reusable Object-Oriented Software (1994)** is a software engineering book describing software design patterns. The book was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk.\n\n### Categories of Design Patterns\nDesign patterns are usually categorized into three major groups.\n\n#### Creational Design Patterns\nAs the name suggests, these patterns are for handling object creational mechanisms. A creational design pattern basically solves a problem by **controlling the creation process of an object**.\nIncludes: *Constructor Pattern*, *Factory Pattern*, *Prototype Pattern*, and *Singleton Pattern*.\n\n#### Structural Design Patterns\nThese patterns are concerned with **class and object composition**. They help structure or restructure one or more parts without affecting the entire system. In other words, they help obtain new functionalities without tampering with the existing ones.\nIncludes: *Adapter Pattern*, *Composite Pattern*, *Decorator Pattern,* *Fa√ßade Pattern*, *Flyweight Pattern*, and *Proxy Pattern*.\n\n#### Behavioral Design Patterns\nThese patterns are concerned with **improving communication between dissimilar objects**.\nIncludes: *Chain of Responsibility Pattern*, *Command Pattern*, *Iterator Pattern*, *Mediator Pattern*, *Observer Pattern*, *State Pattern*, S*trategy Pattern*, and *Template Pattern*.\n","references":"- [Medium - javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15?)\n- [Wikipedia - Desgin Patterns](https://en.wikipedia.org/wiki/Design_Patterns)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"what-is-a-design-pattern","weblink":"https://codersnack.com/what-is-a-design-pattern","featured_image_preview":{"id":13,"name":"design-patterns.jpg","hash":"4f21ae7a28fc41a892d1e97913389dc0","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/4f21ae7a28fc41a892d1e97913389dc0.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-09T20:02:23.437Z","updated_at":"2020-01-09T20:02:23.437Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Design Pattern - What is","created_at":"2020-01-05T22:14:22.613Z","updated_at":"2020-01-05T22:14:22.618Z"},{"id":20,"codersnack":{"id":20,"header":"Adapter pattern","created_at":"2020-01-25T18:44:26.680Z","updated_at":"2020-02-20T22:03:57.444Z","explanation":"This is a *structural pattern* where **the interface of one class is translated into another**. \n\nThis pattern **lets classes work together that could not otherwise because of incompatible interfaces**.\n\nThis pattern is **often used to create wrappers for new refactored APIs so that other existing old APIs can still work with them**. This is usually done when new implementations or code refactoring (done for reasons like performance gains) result in a different public API, while the other parts of the system are still using the old API and need to be adapted to work together.\n\nIn this example, we have an old API, i.e. *OldCalculator* class, and a new API, i.e. *NewCalculator* class. The *OldCalculator* class provides an *operation* method for both addition and subtraction, while the *NewCalculator* provides separate methods for addition and subtraction. The Adapter class *CalcAdapterwraps* the *NewCalculator* to add the operation method to the public-facing API while using its own addition and subtraction implementation under the hood.\n\n```\n// old interface\nclass OldCalculator {\n  constructor() {\n    this.operations = function(term1, term2, operation) {\n      switch (operation) {\n        case 'add':\n          return term1 + term2;\n        case 'sub':\n          return term1 - term2;\n        default:\n          return NaN;\n      }\n    };\n  }\n}\n\n// new interface\nclass NewCalculator {\n  constructor() {\n    this.add = function(term1, term2) {\n      return term1 + term2;\n    };\n    this.sub = function(term1, term2) {\n      return term1 - term2;\n    };\n  }\n}\n\n// Adapter Class\nclass CalcAdapter {\n  constructor() {\n    const newCalc = new NewCalculator();\n\n    this.operations = function(term1, term2, operation) {\n      switch (operation) {\n        case 'add':\n          // using the new implementation under the hood\n          return newCalc.add(term1, term2);\n        case 'sub':\n          return newCalc.sub(term1, term2);\n        default:\n          return NaN;\n      }\n    };\n  }\n}\n\n// usage\nconst oldCalc = new OldCalculator();\nconsole.log(oldCalc.operations(10, 5, 'add')); // 15\n\nconst newCalc = new NewCalculator();\nconsole.log(newCalc.add(10, 5)); // 15\n\nconst adaptedCalc = new CalcAdapter();\nconsole.log(adaptedCalc.operations(10, 5, 'add')); // 15;\n``` \n\n\n","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-adapter","weblink":"https://codersnack.com/js-design-patterns-adapter/","featured_image_preview":{"id":27,"name":"design-patterns.jpg","hash":"fad84cf2c3384942b38b3bcc63a096a9","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/fad84cf2c3384942b38b3bcc63a096a9.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T18:44:26.699Z","updated_at":"2020-01-25T18:44:26.699Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Adapter","created_at":"2020-01-25T18:44:49.976Z","updated_at":"2020-01-25T18:44:49.979Z"},{"id":21,"codersnack":{"id":21,"header":"Chain of responsibility pattern","created_at":"2020-01-25T18:58:04.124Z","updated_at":"2020-02-20T22:06:05.787Z","explanation":"This is a *behavioural design pattern* that **provides a chain of loosely coupled objects. Each of these objects can choose to act on or handle the request of the client.**\n\n> A good example of the chain of responsibility pattern is the event bubbling in DOM in which an event propagates through a series of nested DOM elements, one of which may have an \"event listener\" attached to listen to and act on the event.\n\nIn this example, we create a class *CumulativeSum*, which can be instantiated with an optional *initialValue*. It has a method *add* that adds the passed value to the sum attribute of the object and returns the object itself to allow chaining of add method calls.\n\n```\nclass CumulativeSum {\n  constructor(intialValue = 0) {\n    this.sum = intialValue;\n  }\n\n  add(value) {\n    this.sum += value;\n    return this;\n  }\n}\n\n// usage\nconst sum1 = new CumulativeSum();\nconsole.log(sum1.add(10).add(2).add(50).sum); // 62\n\n\nconst sum2 = new CumulativeSum(10);\nconsole.log(sum2.add(10).add(20).add(5).sum); // 45\n```\n\nThis is a common pattern that **can be seen in jQuery** as well, where almost any method call on a jQuery object returns a jQuery object so that method calls can be chained together.","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-chain-of-responsibility","weblink":"https://codersnack.com/js-design-patterns-chain-of-responsibility/","featured_image_preview":{"id":28,"name":"design-patterns.jpg","hash":"9947f82cf5154513b9677ce846430007","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/9947f82cf5154513b9677ce846430007.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T18:58:04.135Z","updated_at":"2020-01-25T18:58:04.135Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern chain of responsibility","created_at":"2020-01-25T21:24:45.798Z","updated_at":"2020-01-25T21:24:45.809Z"},{"id":22,"codersnack":{"id":23,"header":"Constructor pattern","created_at":"2020-01-25T22:08:15.158Z","updated_at":"2020-02-20T22:06:32.746Z","explanation":"This is a *class-based creational design pattern*. **Constructors are special functions that can be used to instantiate new objects** with methods and properties defined by that function.\n\nIt is not one of the classic design patterns. In fact, **it is more of a basic language construct than a pattern** in most object-oriented languages. But in JavaScript, objects can be created on the fly without any constructor functions or \"class\" definition. Therefore, I think it is important to lay down the foundation for other patterns to come with this simple one.\n\nIn this example, we define a *Hero* class with attributes like *name* and *specialAbility* and methods like *getDetails*. Then, we instantiate an object *IronMan* by **invoking the constructor method with the new keyword** passing in the values for the respective attributes as arguments.\n\n```\n// traditional Function-based syntax\nfunction Hero(name, specialAbility) {\n  // setting property values\n  this.name = name;\n  this.specialAbility = specialAbility;\n\n  // declaring a method on the object\n  this.getDetails = function() {\n    return this.name + ' can ' + this.specialAbility;\n  };\n}\n\n// ES6 Class syntax\nclass Hero {\n  constructor(name, specialAbility) {\n    // setting property values\n    this._name = name;\n    this._specialAbility = specialAbility;\n\n    // declaring a method on the object\n    this.getDetails = function() {\n      return `${this._name} can ${this._specialAbility}`;\n    };\n  }\n}\n\n// creating new instances of Hero\nconst IronMan = new Hero('Iron Man', 'fly');\n\nconsole.log(IronMan.getDetails()); // Iron Man can fly\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-pattern.jpg","slug":"js-design-patterns-constructor","weblink":"https://codersnack.com/js-design-patterns-constructor/","featured_image_preview":{"id":30,"name":"design-patterns.jpg","hash":"66d9ab0016f344088504da6a21e6e5be","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/66d9ab0016f344088504da6a21e6e5be.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T22:08:15.171Z","updated_at":"2020-01-25T22:08:15.171Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern constructor","created_at":"2020-01-25T22:28:52.689Z","updated_at":"2020-01-25T22:28:52.694Z"},{"id":23,"codersnack":{"id":24,"header":"Composite pattern","created_at":"2020-01-25T22:45:06.053Z","updated_at":"2020-06-15T10:17:20.491Z","explanation":"This is a *structural design pattern* that **composes objects into tree-like structures to represent whole-part hierarchies**. In this pattern, each node in the tree-like structure can be either an individual object or a composed collection of objects. Regardless, each node is treated uniformly.\n\nIt is a bit complex to visualize this pattern. **The easiest way to think about this is with the example of a multi-level menu**. Each node can be a distinct option, or it can be a menu itself, which has multiple options as its child. A node component with children is a composite component, while a node component without any child is a leaf component.\n\nIn this example, we create a base class of *Component* that implements the common functionalities needed and abstracts the other methods needed. The base class also has a static method that utilises *recursion to traverse a composite tree structure made with its subclasses*. Then we create two subclasses extending the base class , *Leaf* that does not have any children and *Composite* that can have children, and hence have methods handling adding, searching, and removing child functionalities. The two subclasses are used to create a composite structurem, a tree, in this case.\n\n```\nclass Component {\n  constructor(name) {\n    this._name = name;\n  }\n\n  getNodeName() {\n    return this._name;\n  }\n\n  // abstract methods that need to be overridden\n  getType() {}\n\n  addChild(component) {}\n\n  removeChildByName(componentName) {}\n\n  removeChildByIndex(index) {}\n\n  getChildByName(componentName) {}\n\n  getChildByIndex(index) {}\n\n  noOfChildren() {}\n\n  static logTreeStructure(root) {\n    let treeStructure = '';\n    function traverse(node, indent = 0) {\n      treeStructure += `${'--'.repeat(indent)}${node.getNodeName()}\\n`;\n      indent++;\n      for (let i = 0, length = node.noOfChildren(); i < length; i++) {\n        traverse(node.getChildByIndex(i), indent);\n      }\n    }\n\n    traverse(root);\n    return treeStructure;\n  }\n}\n\nclass Leaf extends Component {\n  constructor(name) {\n    super(name);\n    this._type = 'Leaf Node';\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  noOfChildren() {\n    return 0;\n  }\n}\n\nclass Composite extends Component {\n  constructor(name) {\n    super(name);\n    this._type = 'Composite Node';\n    this._children = [];\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  addChild(component) {\n    this._children = [...this._children, component];\n  }\n\n  removeChildByName(componentName) {\n    this._children = [...this._children].filter(component => component.getNodeName() !== componentName);\n  }\n\n  removeChildByIndex(index) {\n    this._children = [...this._children.slice(0, index), ...this._children.slice(index + 1)];\n  }\n\n  getChildByName(componentName) {\n    return this._children.find(component => component.name === componentName);\n  }\n\n  getChildByIndex(index) {\n    return this._children[index];\n  }\n\n  noOfChildren() {\n    return this._children.length;\n  }\n}\n\n// usage\nconst tree = new Composite('root');\ntree.addChild(new Leaf('left'));\nconst right = new Composite('right');\ntree.addChild(right);\nright.addChild(new Leaf('right-left'));\nconst rightMid = new Composite('right-middle');\nright.addChild(rightMid);\nright.addChild(new Leaf('right-right'));\nrightMid.addChild(new Leaf('left-end'));\nrightMid.addChild(new Leaf('right-end'));\n\n// log\nconsole.log(Component.logTreeStructure(tree));\n/*\nroot\n--left\n--right\n----right-left\n----right-middle\n------left-end\n------right-end\n----right-right\n*/\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-composite","weblink":"https://codersnack.com/js-design-patterns-composite","featured_image_preview":{"id":31,"name":"design-patterns.jpg","hash":"5437612f09f040e786567232e666fc9f","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/5437612f09f040e786567232e666fc9f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T22:45:06.063Z","updated_at":"2020-01-25T22:45:06.063Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern composite","created_at":"2020-01-25T22:45:24.696Z","updated_at":"2020-01-25T22:45:24.701Z"},{"id":24,"codersnack":{"id":25,"header":"Prototype pattern","created_at":"2020-01-28T09:23:49.527Z","updated_at":"2020-01-30T22:49:30.366Z","explanation":"This pattern is an *object-based creational design pattern*. In this, **we use a sort of a \"skeleton\" of an existing object to create or instantiate new objects**.\n\nThis pattern is specifically important and beneficial to JavaScript because it **utilizes prototypal inheritance instead of a classic object-oriented inheritance**. Hence, it plays to JavaScript's strength and has native support.\n\nIn this **example**, we have a car object that we use as the prototype to create another object myCar with **JavaScript's Object.create** feature and define an extra property owner on the new object.\n\n```\n// using Object.create as was recommended by ES5 standard\nconst car = {\n  noOfWheels: 4,\n  start() {\n    return 'started';\n  },\n  stop() {\n    return 'stopped';\n  },\n};\n\n// Object.create(proto[, propertiesObject])\n\nconst myCar = Object.create(car, { owner: { value: 'John' } });\n\nconsole.log(myCar.__proto__ === car); // true\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-prototype","weblink":"https://codersnack.com/js-design-patterns-prototype/","featured_image_preview":{"id":32,"name":"design-patterns.jpg","hash":"f6f151014e074a64812984c851273e5e","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/f6f151014e074a64812984c851273e5e.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-28T09:23:49.546Z","updated_at":"2020-01-28T09:23:49.546Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern prototype","created_at":"2020-01-28T09:24:22.889Z","updated_at":"2020-01-28T09:24:22.891Z"},{"id":25,"codersnack":{"id":26,"header":"Decorator pattern","created_at":"2020-01-28T09:33:50.266Z","updated_at":"2020-02-20T22:06:43.486Z","explanation":"This is also a *structural design pattern* that **focuses on the ability to add behaviour or functionalities to existing classes dynamically**. It is another viable alternative to sub-classing.\n\nThe decorator type behaviour is very easy to implement in JavaScript because **JavaScript allows us to add methods and properties to object dynamically**. The simplest approach would be to just add a property to an object, but it will not be efficiently reusable.\n\nIn this **example**, we create a *Book* class. We further create two decorator functions that accept a book object and return a \"decorated\" book object, *giftWrap* that adds one new attribute and one new function and *hardbindBook* that adds one new attribute and edits the value of one existing attribute.\n\n```\nclass Book {\n  constructor(title, author, price) {\n    this._title = title;\n    this._author = author;\n    this.price = price;\n  }\n\n  getDetails() {\n    return `${this._title} by ${this._author}`;\n  }\n}\n\n// decorator 1\nfunction giftWrap(book) {\n  book.isGiftWrapped = true;\n  book.unwrap = function() {\n    return `Unwrapped ${book.getDetails()}`;\n  };\n\n  return book;\n}\n\n// decorator 2\nfunction hardbindBook(book) {\n  book.isHardbound = true;\n  book.price += 5;\n  return book;\n}\n\n// usage\nconst alchemist = giftWrap(new Book('The Alchemist', 'Paulo Coelho', 10));\n\nconsole.log(alchemist.isGiftWrapped); // true\nconsole.log(alchemist.unwrap()); // 'Unwrapped The Alchemist by Paulo Coelho'\n\nconst inferno = hardbindBook(new Book('Inferno', 'Dan Brown', 15));\n\nconsole.log(inferno.isHardbound); // true\nconsole.log(inferno.price); // 20\n```\n","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-decorator","weblink":"https://codersnack.com/js-design-patterns-decorator/","featured_image_preview":{"id":33,"name":"design-patterns.jpg","hash":"0c80d5fbd2114f82b7567963c7f2528d","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/0c80d5fbd2114f82b7567963c7f2528d.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-28T09:33:50.278Z","updated_at":"2020-01-28T09:33:50.278Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern decorator","created_at":"2020-01-28T09:34:08.767Z","updated_at":"2020-01-28T09:34:08.772Z"},{"id":26,"codersnack":{"id":27,"header":"Command pattern","created_at":"2020-01-28T09:45:59.277Z","updated_at":"2020-02-20T22:06:14.852Z","explanation":"This is a *behavioural design pattern* that **aims to encapsulate actions or operations as objects**. This pattern allows *loose coupling of systems and classes* by separating the objects that request an operation or invoke a method from the ones that execute or process the actual implementation.\n\nThe clipboard interaction API somewhat resembles the command pattern. If you are a **Redux** user, you have already come across the command pattern. The actions that allow the awesome **time-travel debugging feature are nothing but encapsulated operations that can be tracked to redo or undo operations**. Hence, time-travelling made possible.\n\nIn this **example**, we have a class called *SpecialMath* that has multiple methods and a *Command* class that encapsulates commands that are to be executed on its subject, i.e. an object of the *SpecialMath* class. The *Command* class also keeps track of all the commands executed, which can be used to extend its functionality to include undo and redo type operations.\n\n```\nclass SpecialMath {\n  constructor(num) {\n    this._num = num;\n  }\n\n  square() {\n    return this._num ** 2;\n  }\n\n  cube() {\n    return this._num ** 3;\n  }\n\n  squareRoot() {\n    return Math.sqrt(this._num);\n  }\n}\n\nclass Command {\n  constructor(subject) {\n    this._subject = subject;\n    this.commandsExecuted = [];\n  }\n  execute(command) {\n    this.commandsExecuted.push(command);\n    return this._subject[command]();\n  }\n}\n\n// usage\nconst x = new Command(new SpecialMath(5));\nx.execute('square');\nx.execute('cube');\n\nconsole.log(x.commandsExecuted); // ['square', 'cube']\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-command","weblink":"https://codersnack.com/js-design-patterns-command/","featured_image_preview":{"id":34,"name":"design-patterns.jpg","hash":"0ce875552cf84ad2be59c4f77a0c17e1","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/0ce875552cf84ad2be59c4f77a0c17e1.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-28T09:45:59.323Z","updated_at":"2020-01-28T09:45:59.323Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern command","created_at":"2020-01-28T09:46:23.500Z","updated_at":"2020-01-28T09:46:23.505Z"},{"id":34,"codersnack":{"id":35,"header":"Singleton pattern","created_at":"2020-02-02T06:07:03.969Z","updated_at":"2020-02-02T07:13:04.247Z","explanation":"Singleton is a special *creational design pattern* in which **only one instance of a class can exist**. It works like this: **if no instance of the singleton class exists then a new instance is created and returned, but if an instance already exists, then the reference to the existing instance is returned.**\n\n**A perfect real-life example would be that of mongoose** (the famous Node.js ODM library for MongoDB). It utilizes the singleton pattern.\n\nIn this **example**, we have a *Database* class that is a singleton. First, we create an object mongo by using the *new* operator to invoke the *Database* class constructor. This time an object is instantiated because none already exists. The second time, when we create the *mysql* object, no new object is instantiated but instead, the reference to the object that was instantiated earlier, i.e. the *mongo* object, is returned.\n\n```\nclass Database {\n  constructor(data) {\n    if (Database.exists) {\n      return Database.instance;\n    }\n    this._data = data;\n    Database.instance = this;\n    Database.exists = true;\n    return this;\n  }\n\n  getData() {\n    return this._data;\n  }\n\n  setData(data) {\n    this._data = data;\n  }\n}\n\n// usage\nconst mongo = new Database('mongo');\nconsole.log(mongo.getData()); // mongo\n\nconst mysql = new Database('mysql');\nconsole.log(mysql.getData()); // mongo\n\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-singleton","weblink":"https://codersnack.com/js-design-patterns-singleton/","featured_image_preview":{"id":45,"name":"design-patterns.jpg","hash":"93568ad1630347f8b5bb528e2e7f49b7","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/93568ad1630347f8b5bb528e2e7f49b7.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-02T06:07:03.995Z","updated_at":"2020-02-02T06:07:03.995Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern singleton","created_at":"2020-02-02T06:07:40.994Z","updated_at":"2020-02-02T06:07:40.997Z"},{"id":35,"codersnack":{"id":36,"header":"Facade Pattern","created_at":"2020-02-02T06:24:53.248Z","updated_at":"2020-02-20T22:06:51.983Z","explanation":"This is a *structural design pattern* that is widely used in the JavaScript libraries. It is **used to provide a unified and simpler, public-facing interface for ease of use that shields away from the complexities of its consisting subsystems or subclasses**.\n\nThe use of this pattern is *very common in libraries like jQuery*.\n\nIn this **example**, we create a public facing *API* with the class *ComplaintRegistry*. It exposes only one method to be used by the client, i.e. *registerComplaint*. It internally handles instantiating required objects of either *ProductComplaint* or *ServiceComplaint* based on the *type* argument. It also handles all the other complex functionalities like generating a unique ID, storing the complaint in memory, etc. But, all these complexities are hidden away using the *fa√ßade pattern*.\n\n```\nlet currentId = 0;\n\nclass ComplaintRegistry {\n  registerComplaint(customer, type, details) {\n    const id = ComplaintRegistry._uniqueIdGenerator();\n    let registry;\n    if (type === 'service') {\n      registry = new ServiceComplaints();\n    } else {\n      registry = new ProductComplaints();\n    }\n    return registry.addComplaint({ id, customer, details });\n  }\n\n  static _uniqueIdGenerator() {\n    return ++currentId;\n  }\n}\n\nclass Complaints {\n  constructor() {\n    this.complaints = [];\n  }\n\n  addComplaint(complaint) {\n    this.complaints.push(complaint);\n    return this.replyMessage(complaint);\n  }\n\n  getComplaint(id) {\n    return this.complaints.find(complaint => complaint.id === id);\n  }\n\n  replyMessage(complaint) {}\n}\n\nclass ProductComplaints extends Complaints {\n  constructor() {\n    super();\n    if (ProductComplaints.exists) {\n      return ProductComplaints.instance;\n    }\n    ProductComplaints.instance = this;\n    ProductComplaints.exists = true;\n    return this;\n  }\n\n  replyMessage({ id, customer, details }) {\n    return `Complaint No. ${id} reported by ${customer} regarding ${details} have been filed with the Products Complaint Department. Replacement/Repairment of the product as per terms and conditions will be carried out soon.`;\n  }\n}\n\nclass ServiceComplaints extends Complaints {\n  constructor() {\n    super();\n    if (ServiceComplaints.exists) {\n      return ServiceComplaints.instance;\n    }\n    ServiceComplaints.instance = this;\n    ServiceComplaints.exists = true;\n    return this;\n  }\n\n  replyMessage({ id, customer, details }) {\n    return `Complaint No. ${id} reported by ${customer} regarding ${details} have been filed with the Service Complaint Department. The issue will be resolved or the purchase will be refunded as per terms and conditions.`;\n  }\n}\n\n// usage\nconst registry = new ComplaintRegistry();\n\nconst reportService = registry.registerComplaint('Martha', 'service', 'availability');\n// 'Complaint No. 1 reported by Martha regarding availability have been filed with the Service Complaint Department. The issue will be resolved or the purchase will be refunded as per terms and conditions.'\n\nconst reportProduct = registry.registerComplaint('Jane', 'product', 'faded color');\n// 'Complaint No. 2 reported by Jane regarding faded color have been filed with the Products Complaint Department. Replacement/Repairment of the product as per terms and conditions will be carried out soon.'\n\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-facade","weblink":"https://codersnack.com/js-design-patterns-facade/","featured_image_preview":{"id":46,"name":"design-patterns.jpg","hash":"e1248e70562340be9883dc28d53cf61b","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/e1248e70562340be9883dc28d53cf61b.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-02T06:24:53.260Z","updated_at":"2020-02-02T06:24:53.260Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern facade","created_at":"2020-02-02T06:25:15.677Z","updated_at":"2020-02-02T06:25:15.690Z"},{"id":36,"codersnack":{"id":37,"header":"Iterator pattern","created_at":"2020-02-02T06:39:25.785Z","updated_at":"2020-02-20T22:07:32.750Z","explanation":"It is a *behavioural design pattern* that **provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.**\n\n**Iterators have a special kind of behaviour where we step through an ordered set of values one at a time by calling *next()* until we reach the end.** The introduction of *Iterator and Generators in ES6 *made the implementation of the iterator pattern extremely straightforward.\n\nWe have **two examples** below. First, one *IteratorClass* uses iterator spec, while the other one *iteratorUsingGenerator* uses generator functions.\n\nThe **Symbol.iterator** ( Symbol: a new kind of primitive data type) is used to specify the default *iterator* for an object. It must be defined for a *collection* to be able to use the *for...of looping* construct. In the first example, we define the *constructor* to store some collection of data and then define *Symbol.iterator,* which returns an object with *next* method for iteration.\n\nFor the second case, we define a *generator function* passing it an array of data and returning its elements iteratively using *next* and *yield*. A *generator* function is a special type of function that works as a *factory* for *iterators* and can explicitly maintain its own internal state and yield values iteratively. It can pause and resume its own execution cycle.\n\n```\n// using Iterator\nclass IteratorClass {\n  constructor(data) {\n    this.index = 0;\n    this.data = data;\n  }\n\n  [Symbol.iterator]() {\n    return {\n      next: () => {\n        if (this.index < this.data.length) {\n          return { value: this.data[this.index++], done: false };\n        } else {\n          this.index = 0; // to reset iteration status\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n\n// using Generator\nfunction* iteratorUsingGenerator(collection) {\n  var nextIndex = 0;\n\n  while (nextIndex < collection.length) {\n    yield collection[nextIndex++];\n  }\n}\n\n// usage\nconst gen = iteratorUsingGenerator(['Hi', 'Hello', 'Bye']);\n\nconsole.log(gen.next().value); // 'Hi'\nconsole.log(gen.next().value); // 'Hello'\nconsole.log(gen.next().value); // 'Bye'\n\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-iterator","weblink":"https://codersnack.com/js-design-patterns-iterator/","featured_image_preview":{"id":47,"name":"design-patterns.jpg","hash":"76dc19b0492244cc83e1020a9ef3fc63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/76dc19b0492244cc83e1020a9ef3fc63.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-02T06:39:25.799Z","updated_at":"2020-02-02T06:39:25.799Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern iterator","created_at":"2020-02-02T06:39:47.134Z","updated_at":"2020-02-02T06:39:47.137Z"},{"id":39,"codersnack":{"id":40,"header":"Flyweight Pattern","created_at":"2020-02-03T16:33:19.221Z","updated_at":"2020-02-20T22:07:23.310Z","explanation":"This is a *structural design pattern* focused on **efficient data sharing through fine-grained objects**. It is used for efficiency and **memory conservation purposes**.\n\nThis pattern can be used for any kind of **caching purposes**. In fact, modern browsers use a variant of a flyweight pattern to prevent loading the same images twice.\n\nIn this **example**, we create a fine-grained flyweight class *Icecream* for sharing data regarding ice-cream flavours and a factory class *IcecreamFactory* to create those flyweight objects. For memory conservation, the **objects are recycled if the same object is instantiated twice**. This is a simple example of flyweight implementation.\n\n```\n// flyweight class\nclass Icecream {\n  constructor(flavour, price) {\n    this.flavour = flavour;\n    this.price = price;\n  }\n}\n\n// factory for flyweight objects\nclass IcecreamFactory {\n  constructor() {\n    this._icecreams = [];\n  }\n\n  createIcecream(flavour, price) {\n    let icecream = this.getIcecream(flavour);\n    if (icecream) {\n      return icecream;\n    } else {\n      const newIcecream = new Icecream(flavour, price);\n      this._icecreams.push(newIcecream);\n      return newIcecream;\n    }\n  }\n\n  getIcecream(flavour) {\n    return this._icecreams.find(icecream => icecream.flavour === flavour);\n  }\n}\n\n// usage\nconst factory = new IcecreamFactory();\n\nconst chocoVanilla = factory.createIcecream('chocolate and vanilla', 15);\nconst vanillaChoco = factory.createIcecream('chocolate and vanilla', 15);\n\n// reference to the same object\nconsole.log(chocoVanilla === vanillaChoco); // true\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-flyweight","weblink":"https://codersnack.com/js-design-patterns-flyweight/","featured_image_preview":{"id":51,"name":"design-patterns.jpg","hash":"5d689cfc06df48e7a7bceb944a1f4f3f","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/5d689cfc06df48e7a7bceb944a1f4f3f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-03T16:33:19.236Z","updated_at":"2020-02-03T16:33:19.236Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js Design pattern flyweight","created_at":"2020-02-03T16:33:50.513Z","updated_at":"2020-02-03T16:33:50.518Z"},{"id":40,"codersnack":{"id":41,"header":"Mediator pattern","created_at":"2020-02-03T16:42:11.460Z","updated_at":"2020-02-03T16:42:11.460Z","explanation":"It is a *behavioural design pattern* that encapsulates how a set of objects interact with each other. It **provides the central authority over a group of objects by promoting loose coupling, keeping objects from referring to each other explicitly**.\n\nIn this **example**, we have *TrafficTower* as *Mediator* that controls the way *Airplane* objects interact with each other. All the *Airplane* objects register themselves with a *TrafficTower* object, and it is the mediator class object that handles how an *Airplane* object receives coordinates data of all the other *Airplane* objects.\n\n```\nclass TrafficTower {\n  constructor() {\n    this._airplanes = [];\n  }\n\n  register(airplane) {\n    this._airplanes.push(airplane);\n    airplane.register(this);\n  }\n\n  requestCoordinates(airplane) {\n    return this._airplanes.filter(plane => airplane !== plane).map(plane => plane.coordinates);\n  }\n}\n\nclass Airplane {\n  constructor(coordinates) {\n    this.coordinates = coordinates;\n    this.trafficTower = null;\n  }\n\n  register(trafficTower) {\n    this.trafficTower = trafficTower;\n  }\n\n  requestCoordinates() {\n    if (this.trafficTower) return this.trafficTower.requestCoordinates(this);\n    return null;\n  }\n}\n\n// usage\nconst tower = new TrafficTower();\n\nconst airplanes = [new Airplane(10), new Airplane(20), new Airplane(30)];\nairplanes.forEach(airplane => {\n  tower.register(airplane);\n});\n\nconsole.log(airplanes.map(airplane => airplane.requestCoordinates())) \n// [[20, 30], [10, 30], [10, 20]]\n\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-mediator","weblink":"https://codersnack.com/js-design-patterns-mediator/","featured_image_preview":{"id":52,"name":"design-patterns.jpg","hash":"2f08136473174cd79c07141847074a29","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/2f08136473174cd79c07141847074a29.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-03T16:42:11.479Z","updated_at":"2020-02-03T16:42:11.479Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern mediator","created_at":"2020-02-03T16:42:33.685Z","updated_at":"2020-02-03T16:42:33.693Z"},{"id":41,"codersnack":{"id":42,"header":"Proxy pattern","created_at":"2020-02-04T10:08:54.965Z","updated_at":"2020-02-04T10:12:00.319Z","explanation":"This is a *structural design pattern* that behaves exactly as its name suggests. It **acts as a surrogate or placeholder for another object to control access to it**.\n\n**It is usually used in situations in which a target object is under constraints and may not be able to handle all its responsibilities efficiently**. A proxy, in this case, usually provides the same interface to the client and adds a level of indirection to support controlled access to the target object to avoid undue pressure on it.\n\nThe proxy pattern can be **very useful when working with network request-heavy applications** to avoid unnecessary or redundant network requests.\n\nIn this **example**, *we will use two new **ES6 features, Proxy and Reflect**.*:\n- **A Proxy object is used to define custom behaviour for fundamental operations of a JavaScript object** (remember, function and arrays are also object in JavaScript). It is a constructor method that can be used to create a Proxy object. It accepts a target object that is to be proxied and a handler object that will define the necessary customisation. The handler object allows for defining some trap functions like get, set, has, apply, etc. that are used to add custom behaviour attached to their usage. \n- **Reflect, on the other hand, is a built-in object that provides similar methods that are supported by the handler object of Proxy as static methods on itself**. It is not a constructor; its static methods are used for intercept-able JavaScript operations.\n\nNow, we create a function that can be thought of as a network request. We named it as *networkFetch*. It accepts a URL and responds accordingly. We want to implement a proxy where *we only get the response from the network if it is not available in our cache. Otherwise, we just return a response from the cache*.\n\nThe *cache global variable will store our cached responses*. We create a proxy named *proxiedNetworkFetch* with our original *networkFetch* as the targetand use apply method in our handler object to proxy the function invocation. The *apply* method gets passed on the target object itself. This value as *thisArg* and the arguments are passed to it in an array-like structure args.\n\nWe check if the passed url argument is in the cache. If it exists in the cache, we return the response from there, never invoking the original target function. If it does not, then we use the *Reflect.apply* method to invoke the *targetfunction* with *thisArg* (although it‚Äôs not of any significance in our case here) and the arguments it passed.\n\n```\n// Target\nfunction networkFetch(url) {\n  return `${url} - Response from network`;\n}\n\n// Proxy\n// ES6 Proxy API = new Proxy(target, handler);\nconst cache = [];\nconst proxiedNetworkFetch = new Proxy(networkFetch, {\n  apply(target, thisArg, args) {\n    const urlParam = args[0];\n    if (cache.includes(urlParam)) {\n      return `${urlParam} - Response from cache`;\n    } else {\n      cache.push(urlParam);\n      return Reflect.apply(target, thisArg, args);\n    }\n  },\n});\n\n// usage\nconsole.log(proxiedNetworkFetch('dogPic.jpg')); // 'dogPic.jpg - Response from network'\nconsole.log(proxiedNetworkFetch('dogPic.jpg')); // 'dogPic.jpg - Response from cache'\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)\n- [MDN Web docs - ES6 Reflect](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect)\n- [MDN Web docs - ES6 Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-proxy","weblink":"https://codersnack.com/js-design-patterns-proxy/","featured_image_preview":{"id":53,"name":"design-patterns.jpg","hash":"0c6f8403aa214c009d7b286046f40afc","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/0c6f8403aa214c009d7b286046f40afc.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T10:08:54.984Z","updated_at":"2020-02-04T10:08:54.984Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern proxy","created_at":"2020-02-04T10:09:20.310Z","updated_at":"2020-02-04T10:09:20.314Z"},{"id":42,"codersnack":{"id":43,"header":"Observer Pattern","created_at":"2020-02-04T10:26:42.213Z","updated_at":"2020-02-04T10:26:42.213Z","explanation":"It is a crucial *behavioural design pattern* that **defines one-to-many dependencies between objects so that when one object (publisher) changes its state, all the other dependent objects (subscribers) are notified and updated automatically.** This is also called **PubSub (publisher/subscribers) or event dispatcher/listeners pattern**. The publisher is sometimes called the **subject**, and the subscribers are sometimes called **observers**.\n\nChances are, you‚Äôre already somewhat familiar with this pattern if you have used **addEventListener or jQuery‚Äôs** .on to write even-handling code. It has its influences in **Reactive Programming (think RxJS)** as well.\n\nIn the **example**, we create a simple *Subject* class that has methods to add and remove objects of *Observer* class from subscriber collection. Also, a *fire method* to propagate any changes in the *Subject* class object to the subscribed *Observers*. The *Observer* class, on the other hand, has its internal state and a method to update its internal state based on the change propagated from the *Subject* it has subscribed to.\n```\nclass Subject {\n  constructor() {\n    this._observers = [];\n  }\n\n  subscribe(observer) {\n    this._observers.push(observer);\n  }\n\n  unsubscribe(observer) {\n    this._observers = this._observers.filter(obs => observer !== obs);\n  }\n\n  fire(change) {\n    this._observers.forEach(observer => {\n      observer.update(change);\n    });\n  }\n}\n\nclass Observer {\n  constructor(state) {\n    this.state = state;\n    this.initialState = state;\n  }\n\n  update(change) {\n    let state = this.state;\n    switch (change) {\n      case 'INC':\n        this.state = ++state;\n        break;\n      case 'DEC':\n        this.state = --state;\n        break;\n      default:\n        this.state = this.initialState;\n    }\n  }\n}\n\n// usage\nconst sub = new Subject();\n\nconst obs1 = new Observer(1);\nconst obs2 = new Observer(19);\n\nsub.subscribe(obs1);\nsub.subscribe(obs2);\n\nsub.fire('INC');\n\nconsole.log(obs1.state); // 2\nconsole.log(obs2.state); // 20\n\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-observer","weblink":"https://codersnack.com/js-design-patterns-observer/","featured_image_preview":{"id":54,"name":"design-patterns.jpg","hash":"282d95353af342298c7d16247c9e621a","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/282d95353af342298c7d16247c9e621a.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T10:26:42.221Z","updated_at":"2020-02-04T10:26:42.221Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern observer","created_at":"2020-02-04T10:27:18.370Z","updated_at":"2020-02-04T10:27:18.379Z"},{"id":43,"codersnack":{"id":44,"header":"State pattern","created_at":"2020-02-04T11:03:08.671Z","updated_at":"2020-02-04T11:03:08.671Z","explanation":"It is a *behavioural design pattern* that **allows an object to alter its behaviour based on changes to its internal state**. The object returned by a state pattern class seems to change its class. It **provides state-specific logic to a limited set of objects in which each object type represents a particular state**.\n\nWe will take a simple **example** of a *traffic light* to understand this pattern. The *TrafficLight* class changes the object it returns based on its internal state, which is an object of *Red*, *Yellow*, or *Green* class.\n\n```\nclass TrafficLight {\n  constructor() {\n    this.states = [new GreenLight(), new RedLight(), new YellowLight()];\n    this.current = this.states[0];\n  }\n\n  change() {\n    const totalStates = this.states.length;\n    let currentIndex = this.states.findIndex(light => light === this.current);\n    if (currentIndex + 1 < totalStates) this.current = this.states[currentIndex + 1];\n    else this.current = this.states[0];\n  }\n\n  sign() {\n    return this.current.sign();\n  }\n}\n\nclass Light {\n  constructor(light) {\n    this.light = light;\n  }\n}\n\nclass RedLight extends Light {\n  constructor() {\n    super('red');\n  }\n\n  sign() {\n    return 'STOP';\n  }\n}\n\nclass YellowLight extends Light {\n  constructor() {\n    super('yellow');\n  }\n\n  sign() {\n    return 'STEADY';\n  }\n}\n\nclass GreenLight extends Light {\n\tconstructor() {\n\t\tsuper('green');\n\t}\n\n\tsign() {\n\t\treturn 'GO';\n\t}\n}\n\n// usage\nconst trafficLight = new TrafficLight();\n\nconsole.log(trafficLight.sign()); // 'GO'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'STOP'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'STEADY'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'GO'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'STOP'\n```","references":null,"featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-state","weblink":"https://codersnack.com/js-design-patterns-state/","featured_image_preview":{"id":55,"name":"design-patterns.jpg","hash":"384819d3113a45478cb5897679c479d6","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/384819d3113a45478cb5897679c479d6.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T11:03:08.680Z","updated_at":"2020-02-04T11:03:08.680Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern state","created_at":"2020-02-04T11:03:35.065Z","updated_at":"2020-02-04T11:03:35.067Z"},{"id":44,"codersnack":{"id":45,"header":"Strategy Pattern","created_at":"2020-02-04T11:10:29.214Z","updated_at":"2020-02-04T11:10:29.214Z","explanation":"It is a *behavioural design pattern* that **allows encapsulation of alternative algorithms for a particular task**. It **defines a family of algorithms and encapsulates them in such a way that they are interchangeable at runtime without client interference or knowledge**.\n\nIn the **example** below, we create a class *Commute* for encapsulating all the possible strategies for commuting to work. Then, we define three strategies namely *Bus*, *PersonalCar*, and *Taxi*. Using this pattern we can swap the implementation to use for the travel method of the *Commute* object at runtime.\n\n```\n// encapsulation\nclass Commute {\n  travel(transport) {\n    return transport.travelTime();\n  }\n}\n\nclass Vehicle {\n  travelTime() {\n    return this._timeTaken;\n  }\n}\n\n// strategy 1\nclass Bus extends Vehicle {\n  constructor() {\n    super();\n    this._timeTaken = 10;\n  }\n}\n\n// strategy 2\nclass Taxi extends Vehicle {\n  constructor() {\n    super();\n    this._timeTaken = 5;\n  }\n}\n\n// strategy 3\nclass PersonalCar extends Vehicle {\n  constructor() {\n    super();\n    this._timeTaken = 3;\n  }\n}\n\n// usage\nconst commute = new Commute();\n\nconsole.log(commute.travel(new Taxi())); // 5\nconsole.log(commute.travel(new Bus())); // 10\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-strategy","weblink":"https://codersnack.com/js-design-patterns-strategy/","featured_image_preview":{"id":56,"name":"design-patterns.jpg","hash":"29dea63348644054a38824e968a30f3d","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/29dea63348644054a38824e968a30f3d.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T11:10:29.221Z","updated_at":"2020-02-04T11:10:29.221Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern strategy","created_at":"2020-02-04T11:10:49.955Z","updated_at":"2020-02-04T11:10:49.972Z"},{"id":45,"codersnack":{"id":46,"header":"Template pattern","created_at":"2020-02-04T11:17:13.865Z","updated_at":"2020-02-04T11:17:13.865Z","explanation":"This is a *behavioural design pattern* based on **defining the skeleton of the algorithm or implementation of an operation, but deferring some steps to subclasses**. It lets subclasses redefine certain steps of an algorithm without changing the algorithm‚Äôs outward structure.\n\nIn this **example**, we have a *Template* class *Employee* that implements *work* method partially. It is for the subclasses to implement responsibilities method to make it work as a whole. We then create two subclasses *Developer* and *Tester* that extend the template class and implement the required method to fill the implementation gap.\n\n```\nclass Employee {\n  constructor(name, salary) {\n    this._name = name;\n    this._salary = salary;\n  }\n\n  work() {\n    return `${this._name} handles ${this.responsibilities() /* gap to be filled by subclass */}`;\n  }\n\n  getPaid() {\n    return `${this._name} got paid ${this._salary}`;\n  }\n}\n\nclass Developer extends Employee {\n  constructor(name, salary) {\n    super(name, salary);\n  }\n\n  // details handled by subclass\n  responsibilities() {\n    return 'application development';\n  }\n}\n\nclass Tester extends Employee {\n  constructor(name, salary) {\n    super(name, salary);\n  }\n\n  // details handled by subclass\n  responsibilities() {\n    return 'testing';\n  }\n}\n\n// usage\nconst dev = new Developer('Nathan', 100000);\nconsole.log(dev.getPaid()); // 'Nathan got paid 100000'\nconsole.log(dev.work()); // 'Nathan handles application development'\n\nconst tester = new Tester('Brian', 90000);\nconsole.log(tester.getPaid()); // 'Brian got paid 90000'\nconsole.log(tester.work()); \n```\n","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-template","weblink":"https://codersnack.com/js-design-patterns-template/","featured_image_preview":{"id":57,"name":"design-patterns.jpg","hash":"c6dec9fc6afc48c0a73a229c6ae66dec","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/c6dec9fc6afc48c0a73a229c6ae66dec.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T11:17:13.876Z","updated_at":"2020-02-04T11:17:13.876Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design patter Template","created_at":"2020-02-04T11:17:32.148Z","updated_at":"2020-02-04T11:17:32.150Z"},{"id":119,"codersnack":{"id":121,"header":"Iterators and Generators","created_at":"2021-12-01T11:12:05.044Z","updated_at":"2021-12-01T11:12:05.044Z","explanation":"**Iterators and Generators bring the concept of iteration directly into the core language and provide a mechanism for customizing the behavior of for...of loops**.\n\nFor details, see also:\n\n- [Iteration_protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)\n- [for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of)\n- [function*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) and [Generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator)\n- [yield](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield) and [yield*](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*)\n\n\n## Iterators\n\n**In JavaScript an iterator is an object which defines a sequence and potentially a return value upon its termination.**\n\nSpecifically, an iterator is **any object which implements the Iterator protocol by having a next() method**  that returns an object with two **properties**:\n\n- value\nThe next value in the iteration sequence.\n\n- done\nThis is true if the last value in the sequence has already been consumed. If value is present alongside done, it is the iterator's return value.\n\nOnce created, an iterator object can be iterated explicitly by **repeatedly calling next()**. **Iterating over an iterator is said to consume the iterator**, because it is generally only possible **to do once**. After a **terminating value **has been yielded additional calls to next() should continue to return **{done: true}**.\n\n> The most common iterator in JavaScript is the **Array iterator**, which returns each value in the associated array in sequence.\n\nWhile it is easy to imagine that all iterators could be expressed as arrays, this is not true. **Arrays must be allocated in their entirety, but iterators are consumed only as necessary.** Because of this, iterators can express **sequences of unlimited size**, such as the range of integers between 0 and Infinity.\n\nHere is an **example** which can do just that. It allows creation of a simple range iterator which defines a sequence of integers from start (inclusive) to end (exclusive) spaced step apart. Its final return value is the size of the sequence it created, tracked by the variable iterationCount.\n```\nfunction makeRangeIterator(start = 0, end = Infinity, step = 1) {\n    let nextIndex = start;\n    let iterationCount = 0;\n\n    const rangeIterator = {\n       next: function() {\n           let result;\n           if (nextIndex < end) {\n               result = { value: nextIndex, done: false }\n               nextIndex += step;\n               iterationCount++;\n               return result;\n           }\n           return { value: iterationCount, done: true }\n       }\n    };\n    return rangeIterator;\n}\n```\n\nUsing the iterator then looks like this:\n\n```\nconst it = makeRangeIterator(1, 10, 2);\n\nlet result = it.next();\nwhile (!result.done) {\n console.log(result.value); // 1 3 5 7 9\n result = it.next();\n}\n\nconsole.log(\"Iterated over sequence of size: \", result.value); // [5 numbers returned, that took interval in between: 0 to 10]\n```\n\n> **Note**: It is not possible to know reflectively whether a particular object is an iterator. If you need to do this, use Iterables.\n\n\n## Generator functions\n\nWhile custom iterators are a useful tool, their creation requires careful programming due to the need to explicitly maintain their internal state. **Generator functions provide a powerful alternative: they allow you to define an iterative algorithm by writing a single function whose execution is not continuous**. Generator functions are written using the **function* syntax**.\n\n**When called, generator functions do not initially execute their code. Instead, they return a special type of iterator, called a *Generator***. \n\n**When a value is consumed by calling the generator's *next* method, the Generator function executes until it encounters the *yield* keyword.**\n\n**The function can be called as many times as desired, and returns a new Generator each time. Each Generator may only be iterated once.**\n\nWe can now adapt the example from above. The behavior of this code is identical, but the implementation is much easier to write and read.\n\n```\nfunction* makeRangeIterator(start = 0, end = 100, step = 1) {\n    let iterationCount = 0;\n    for (let i = start; i < end; i += step) {\n        iterationCount++;\n        yield i;\n    }\n    return iterationCount;\n}\n```\n\n\n## Iterables\n\n**An object is iterable if it defines its iteration behavior, such as what values are looped over in a for...of construct**. \n\n> Some built-in types, such as Array or Map, have a default iteration behavior, while other types (such as Object) do not.\n\nIn order to be iterable, an object **must implement the @@iterator method**. This means that the object (or one of the objects up its prototype chain) **must have a property with a *Symbol.iterator* key**.\n\n**It may be possible to iterate over an iterable more than once, or only once**. It is up to the programmer to know which is the case.\n\n**Iterables which can iterate only once (such as Generators) customarily return *this* from their @@iterator method**, \n\nwhereas **iterables which can be iterated many times must return *a new iterator* on each invocation of @@iterator**.\n\n```\nfunction* makeIterator() {\n    yield 1;\n    yield 2;\n}\n\nconst it = makeIterator();\n\nfor (const itItem of it) {\n    console.log(itItem);\n}\n\nconsole.log(it[Symbol.iterator]() === it) // true;\n\n// This example show us generator(iterator) is iterable object,\n// which has the @@iterator method return the it (itself),\n// and consequently, the it object can iterate only _once_.\n\n// If we change it's @@iterator method to a function/generator\n// which returns a new iterator/generator object, (it)\n// can iterate many times\n\nit[Symbol.iterator] = function* () {\n  yield 2;\n  yield 1;\n};\n```\n\n\n## User-defined iterables\n\nYou can make your own iterables like this:\n\n```\nconst myIterable = {\n    *[Symbol.iterator]() {\n        yield 1;\n        yield 2;\n        yield 3;\n    }\n}\n\nfor (let value of myIterable) {\n    console.log(value);\n}\n// 1\n// 2\n// 3\n\nor\n\n[...myIterable]; // [1, 2, 3]\n```\n\n##¬†Built-in iterables\n\nString, Array, TypedArray, Map and Set are all built-in iterables, because their prototype objects all have a Symbol.iterator method.\n\n\n##¬†Syntaxes expecting iterables\n\nSome statements and expressions expect iterables. For example: the for-of loops, yield*.\n\n```\nfor (let value of ['a', 'b', 'c']) {\n    console.log(value);\n}\n// \"a\"\n// \"b\"\n// \"c\"\n\n[...'abc'];\n// [\"a\", \"b\", \"c\"]\n\nfunction* gen() {\n  yield* ['a', 'b', 'c'];\n}\n\ngen().next();\n// { value: \"a\", done: false }\n\n[a, b, c] = new Set(['a', 'b', 'c']);\na;\n// \"a\"\n```\n\n##¬†Advanced generators\n\n**Generators compute their yielded values on demand, which allows them to efficiently represent sequences that are expensive to compute** (or even infinite sequences, as demonstrated above).\n\n**The *next()* method also accepts a value, which can be used to modify the internal state of the generator**. A value passed to next() will be received by yield .\n\n> **Note**: A value passed to the first invocation of next() is always ignored.\n\nHere is the **fibonacci generator using next(x) to restart the sequence**:\n\n```\nfunction* fibonacci() {\n  let current = 0;\n  let next = 1;\n  while (true) {\n    let reset = yield current;\n    [current, next] = [next, next + current];\n    if (reset) {\n        current = 0;\n        next = 1;\n    }\n  }\n}\n\nconst sequence = fibonacci();\nconsole.log(sequence.next().value);     // 0\nconsole.log(sequence.next().value);     // 1\nconsole.log(sequence.next().value);     // 1\nconsole.log(sequence.next().value);     // 2\nconsole.log(sequence.next().value);     // 3\nconsole.log(sequence.next().value);     // 5\nconsole.log(sequence.next().value);     // 8\nconsole.log(sequence.next(true).value); // 0\nconsole.log(sequence.next().value);     // 1\nconsole.log(sequence.next().value);     // 1\nconsole.log(sequence.next().value);     // 2\n```\n\n**You can force a generator to throw an exception by calling its *throw()* method** and passing the exception value it should throw. This exception will be thrown from the current suspended context of the generator, as if the yield that is currently suspended were instead a throw value statement.\n\nIf the exception is not caught from within the generator,  it will propagate up through the call to throw(), and subsequent calls to next() will result in the done property being true.\n\n**Generators have a *return(value)* method that returns the given value and finishes the generator itself.**\n\n[Codepen Jes Example](https://codepen.io/jescacena/pen/oNGgGJX)\n\n","references":"- [MDN - Iterators and Generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"design-patterns-iterators-generators","weblink":"https://codersnack.com/design-patterns-iterators-generators","featured_image_preview":{"id":157,"name":"design-patterns.jpeg","hash":"4c92947b000b454f98832e0871cd702f","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpeg","mime":"image/jpeg","size":23.12,"url":"/uploads/4c92947b000b454f98832e0871cd702f.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-12-01T11:12:05.064Z","updated_at":"2021-12-01T11:12:05.064Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Javascript design patterns - Iterators and Generators","created_at":"2021-12-01T11:12:41.922Z","updated_at":"2021-12-01T11:12:41.927Z"},{"id":120,"codersnack":{"id":122,"header":"ES6 Proxy","created_at":"2021-12-01T12:37:36.405Z","updated_at":"2021-12-01T12:37:36.405Z","explanation":"**The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.**\n\n## Description\n\nA Proxy is created with two parameters:\n\n- **target**: the original object which you want to proxy\n- **handler**: an object that defines which operations will be intercepted and how to redefine intercepted operations.\n\nFor example, this code defines a simple target with just two properties, and an even simpler handler with no properties:\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\"\n};\n\nconst handler1 = {};\n\nconst proxy1 = new Proxy(target, handler1);\n```\n\nBecause the handler is empty, this proxy behaves just like the original target:\n\n```\nconsole.log(proxy1.message1); // hello\nconsole.log(proxy1.message2); // everyone\n```\n\nTo customise the proxy, we define functions on the handler object:\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\"\n};\n\nconst handler2 = {\n  get: function(target, prop, receiver) {\n    return \"world\";\n  }\n};\n\nconst proxy2 = new Proxy(target, handler2);\n```\n\n**Here we've provided an implementation of the *get()* handler, which intercepts attempts to access properties in the target.**\n\n**Handler functions are sometimes called *traps***, presumably because they trap calls to the target object. The very simple trap in handler2 above redefines all property accessors:\n\n```\nconsole.log(proxy2.message1); // world\nconsole.log(proxy2.message2); // world\n```\n\n**With the help of the Reflect class we can give some accessors the original behavior and redefine others**:\n\n```\nconst target = {\n  message1: \"hello\",\n  message2: \"everyone\"\n};\n\nconst handler3 = {\n  get: function (target, prop, receiver) {\n    if (prop === \"message2\") {\n      return \"world\";\n    }\n    return Reflect.get(...arguments);\n  },\n};\n\nconst proxy3 = new Proxy(target, handler3);\n\nconsole.log(proxy3.message1); // hello\nconsole.log(proxy3.message2); // world\n```\n\n##¬†Constructor\n\n**Proxy()**\nCreates a new Proxy object.\n\n## Static methods\n\n**Proxy.revocable()**\nCreates a revocable Proxy object.\n\n## Examples\n\n//////////\n\n### Basic example\n\n**In this simple example, the number 37 gets returned as the default value when the property name is not in the object. It is using the get() handle**r.\n\n``` \nconst handler = {\n  get: function(obj, prop) {\n    return prop in obj ?\n      obj[prop] :\n      37;\n  }\n};\n\nconst p = new Proxy({}, handler);\np.a = 1;\np.b = undefined;\n\nconsole.log(p.a, p.b);\n//  1, undefined\n\nconsole.log('c' in p, p.c);\n//  false, 37\n``` \n\n### No-op forwarding proxy\nIn this example, we are using a native JavaScript object to which our **proxy will forward all operations that are applied to it**.\n\n```\nconst target = {};\nconst p = new Proxy(target, {});\n\np.a = 37;\n//  operation forwarded to the target\n\nconsole.log(target.a);\n//  37\n//  (The operation has been properly forwarded!)\n```\n\n> Note that while this \"no-op\" works for JavaScript objects, **it does not work for native browser objects like DOM Elements.**\n\n## Validation\n\nWith a Proxy, you can easily **validate the passed value for an object**. This example uses the ***set()* handler**.\n\n```\nlet validator = {\n  set: function(obj, prop, value) {\n    if (prop === 'age') {\n      if (!Number.isInteger(value)) {\n        throw new TypeError('The age is not an integer');\n      }\n      if (value > 200) {\n        throw new RangeError('The age seems invalid');\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  }\n};\n\nconst person = new Proxy({}, validator);\n\nperson.age = 100;\nconsole.log(person.age); // 100\nperson.age = 'young';    // Throws an exception\nperson.age = 300;        // Throws an exception\n```\n\n### Extending constructor\n\nA function proxy could easily extend a constructor with a new constructor. This example uses the ***construct()* and *apply()* handlers**.\n\n```\nfunction extend(sup, base) {\n  var descriptor = Object.getOwnPropertyDescriptor(\n    base.prototype, 'constructor'\n  );\n  base.prototype = Object.create(sup.prototype);\n  var handler = {\n    construct: function(target, args) {\n      var obj = Object.create(base.prototype);\n      this.apply(target, obj, args);\n      return obj;\n    },\n    apply: function(target, that, args) {\n      sup.apply(that, args);\n      base.apply(that, args);\n    }\n  };\n  var proxy = new Proxy(base, handler);\n  descriptor.value = proxy;\n  Object.defineProperty(base.prototype, 'constructor', descriptor);\n  return proxy;\n}\n\nvar Person = function(name) {\n  this.name = name;\n};\n\nvar Boy = extend(Person, function(name, age) {\n  this.age = age;\n});\n\nBoy.prototype.gender = 'M';\n\nvar Peter = new Boy('Peter', 13);\n\nconsole.log(Peter.gender);  // \"M\"\nconsole.log(Peter.name);    // \"Peter\"\nconsole.log(Peter.age);     // 13\n```\n\n###¬†Manipulating DOM nodes\n\nSometimes **you want to toggle the attribute or class name of two different elements**. Here's how using the *set()* handler.\n\n```\nlet view = new Proxy({\n  selected: null\n},\n{\n  set: function(obj, prop, newval) {\n    let oldval = obj[prop];\n\n    if (prop === 'selected') {\n      if (oldval) {\n        oldval.setAttribute('aria-selected', 'false');\n      }\n      if (newval) {\n        newval.setAttribute('aria-selected', 'true');\n      }\n    }\n\n    // The default behavior to store the value\n    obj[prop] = newval;\n\n    // Indicate success\n    return true;\n  }\n});\n\nlet i1 = view.selected = document.getElementById('item-1');  //giving error here, i1 is null\nconsole.log(i1.getAttribute('aria-selected'));\n//  'true'\n\nlet i2 = view.selected = document.getElementById('item-2');\nconsole.log(i1.getAttribute('aria-selected'));\n//  'false'\n\nconsole.log(i2.getAttribute('aria-selected'));\n//  'true'\nNote: even if selected: !null, then giving oldval.setAttribute is not a function\n```\n\n\n### Value correction and an extra property\n\n**The products proxy object evaluates the passed value and converts it to an array if needed.** The object also supports an extra property called ***latestBrowser*** both as a getter and a setter.\n\n```\nlet products = new Proxy({\n  browsers: ['Internet Explorer', 'Netscape']\n},\n{\n  get: function(obj, prop) {\n    // An extra property\n    if (prop === 'latestBrowser') {\n      return obj.browsers[obj.browsers.length - 1];\n    }\n\n    // The default behavior to return the value\n    return obj[prop];\n  },\n  set: function(obj, prop, value) {\n    // An extra property\n    if (prop === 'latestBrowser') {\n      obj.browsers.push(value);\n      return true;\n    }\n\n    // Convert the value if it is not an array\n    if (typeof value === 'string') {\n      value = [value];\n    }\n\n    // The default behavior to store the value\n    obj[prop] = value;\n\n    // Indicate success\n    return true;\n  }\n});\n\nconsole.log(products.browsers);\n//  ['Internet Explorer', 'Netscape']\n\nproducts.browsers = 'Firefox';\n//  pass a string (by mistake)\n\nconsole.log(products.browsers);\n//  ['Firefox'] <- no problem, the value is an array\n\nproducts.latestBrowser = 'Chrome';\n\nconsole.log(products.browsers);\n//  ['Firefox', 'Chrome']\n\nconsole.log(products.latestBrowser);\n//  'Chrome'\n```\n\n### Finding an array item object by its property\n\n**This proxy extends an array with some utility features**. As you see, you can flexibly \"define\" properties without using Object.defineProperties(). This example can be adapted to find a table row by its cell. In that case, the target will be table.rows.\n\n```\nlet products = new Proxy([\n  { name: 'Firefox', type: 'browser' },\n  { name: 'SeaMonkey', type: 'browser' },\n  { name: 'Thunderbird', type: 'mailer' }\n],\n{\n  get: function(obj, prop) {\n    // The default behavior to return the value; prop is usually an integer\n    if (prop in obj) {\n      return obj[prop];\n    }\n\n    // Get the number of products; an alias of products.length\n    if (prop === 'number') {\n      return obj.length;\n    }\n\n    let result, types = {};\n\n    for (let product of obj) {\n      if (product.name === prop) {\n        result = product;\n      }\n      if (types[product.type]) {\n        types[product.type].push(product);\n      } else {\n        types[product.type] = [product];\n      }\n    }\n\n    // Get a product by name\n    if (result) {\n      return result;\n    }\n\n    // Get products by type\n    if (prop in types) {\n      return types[prop];\n    }\n\n    // Get product types\n    if (prop === 'types') {\n      return Object.keys(types);\n    }\n\n    return undefined;\n  }\n});\n\nconsole.log(products[0]);          // { name: 'Firefox', type: 'browser' }\nconsole.log(products['Firefox']);  // { name: 'Firefox', type: 'browser' }\nconsole.log(products['Chrome']);   // undefined\nconsole.log(products.browser);     // [{ name: 'Firefox', type: 'browser' }, { name: 'SeaMonkey', type: 'browser' }]\nconsole.log(products.types);       // ['browser', 'mailer']\nconsole.log(products.number);      // 3\n```\n\n\n### A complete traps list example\n\nNow in order to create a complete sample traps list, for didactic purposes, we will try to proxify a non-native object that is particularly suited to this type of operation: the docCookies global object created by a simple cookie framework.\n\n```\n/*\n  var docCookies = ... get the \"docCookies\" object here:\n  https://reference.codeproject.com/dom/document/cookie/simple_document.cookie_framework\n*/\n\nvar docCookies = new Proxy(docCookies, {\n  get: function (oTarget, sKey) {\n    return oTarget[sKey] || oTarget.getItem(sKey) || undefined;\n  },\n  set: function (oTarget, sKey, vValue) {\n    if (sKey in oTarget) { return false; }\n    return oTarget.setItem(sKey, vValue);\n  },\n  deleteProperty: function (oTarget, sKey) {\n    if (!sKey in oTarget) { return false; }\n    return oTarget.removeItem(sKey);\n  },\n  enumerate: function (oTarget, sKey) {\n    return oTarget.keys();\n  },\n  ownKeys: function (oTarget, sKey) {\n    return oTarget.keys();\n  },\n  has: function (oTarget, sKey) {\n    return sKey in oTarget || oTarget.hasItem(sKey);\n  },\n  defineProperty: function (oTarget, sKey, oDesc) {\n    if (oDesc && 'value' in oDesc) { oTarget.setItem(sKey, oDesc.value); }\n    return oTarget;\n  },\n  getOwnPropertyDescriptor: function (oTarget, sKey) {\n    var vValue = oTarget.getItem(sKey);\n    return vValue ? {\n      value: vValue,\n      writable: true,\n      enumerable: true,\n      configurable: false\n    } : undefined;\n  },\n});\n\n/* Cookies test */\n\nconsole.log(docCookies.my_cookie1 = 'First value');\nconsole.log(docCookies.getItem('my_cookie1'));\n\ndocCookies.setItem('my_cookie1', 'Changed value');\nconsole.log(docCookies.my_cookie1);\n```","references":"- [MDN - Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)\n\n","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"es6-proxy","weblink":"https://codersnack.com/es6-proxy","featured_image_preview":{"id":158,"name":"design-patterns.jpeg","hash":"7f49cf5a0536421bb4595c645fb127d8","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpeg","mime":"image/jpeg","size":23.12,"url":"/uploads/7f49cf5a0536421bb4595c645fb127d8.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-12-01T12:37:36.453Z","updated_at":"2021-12-01T12:37:36.453Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Javascript design patterns - ES6 Proxy","created_at":"2021-12-01T12:38:12.157Z","updated_at":"2021-12-01T12:38:12.161Z"},{"id":124,"codersnack":{"id":123,"header":"Refactoring - Composing Methods","created_at":"2021-12-01T22:04:08.825Z","updated_at":"2021-12-01T22:04:08.825Z","explanation":"Much of refactoring is devoted to correctly composing methods. In most cases, **excessively long methods are the root of all evil**. The vagaries of code inside these methods conceal the execution logic and **make the method extremely hard to understand**‚Äîand **even harder to change**.\n\nThe refactoring techniques in this group **streamline methods**, **remove code duplication**, and **pave the way for future improvements**.\n\n##¬†Extract Method\n\n**Problem**\nYou have a code fragment that can be grouped together.\n\n**Solution**\nMove this code to a separate new method (or function) and replace the old code with a call to the method.\n\n*Bad*\n``` \nprintOwing(): void {\n  printBanner();\n\n  // Print details.\n  console.log(\"name: \" + name);\n  console.log(\"amount: \" + getOutstanding());\n}\n``` \n*Good*\n``` \nprintOwing(): void {\n  printBanner();\n  printDetails(getOutstanding());\n}\n\nprintDetails(outstanding: number): void {\n  console.log(\"name: \" + name);\n  console.log(\"amount: \" + outstanding);\n}\n``` \n\n***************\n> **Why Refactor**\n**The more lines found in a method, the harder it‚Äôs to figure out what the method does**. This is the main reason for this refactoring.\nBesides eliminating rough edges in your code, extracting methods is also a step in many other refactoring approaches.\n\n***************\n> **Benefits**\n- **More readable code!** Be sure to give the new method a name that describes the method‚Äôs purpose: createOrder(), renderCustomerInfo(), etc.\n- **Less code duplication**. Often the code that‚Äôs found in a method can be reused in other places in your program. So you can replace duplicates with calls to your new method.\n- **Isolates independent parts of code**, meaning that errors are less likely (such as if the wrong variable is modified).\n\n***************\n> **How to Refactor**\nCreate a new method and name it in a way that makes its purpose self-evident.\n**Copy the relevant code fragment to your new method**. Delete the fragment from its old location and put a call for the new method there instead.\n**Find all variables used in this code fragment**. If they‚Äôre declared inside the fragment and not used outside of it, simply leave them unchanged‚Äîthey‚Äôll become local variables for the new method.\nIf the variables are declared prior to the code that you‚Äôre extracting, you will need to pass these variables to the parameters of your new method in order to use the values previously contained in them. Sometimes it‚Äôs easier to get rid of these variables by resorting to *Replace Temp with Query*.\nIf you see that a local variable changes in your extracted code in some way, this may mean that this changed value will be needed later in your main method. Double-check! And if this is indeed the case, return the value of this variable to the main method to keep everything functioning.\n\n\n## Inline Method\n\n**Problem**\nWhen a method body is more obvious than the method itself, use this technique.\n\n**Solution**\nReplace calls to the method with the method‚Äôs content and delete the method itself.\n\n*Bad*\n```\nclass PizzaDelivery {\n  // ...\n  getRating(): number {\n    return moreThanFiveLateDeliveries() ? 2 : 1;\n  }\n  moreThanFiveLateDeliveries(): boolean {\n    return numberOfLateDeliveries > 5;\n  }\n}\n```\n*Good*\n```\nclass PizzaDelivery {\n  // ...\n  getRating(): number {\n    return numberOfLateDeliveries > 5 ? 2 : 1;\n  }\n}\n```\n> **Why Refactor**\nA method simply delegates to another method. In itself, this delegation is no problem. **But when there are many such methods, they become a confusing tangle that‚Äôs hard to sort through.**\nOften methods aren‚Äôt too short originally, but become that way as changes are made to the program. So don‚Äôt be shy about getting rid of methods that have outlived their use.\n\n***************\n\n> **Benefits**\nBy minimizing the number of unneeded methods, you make the code more straightforward.\n\n***************\n\n> **How to Refactor**\n**Make sure that the method isn‚Äôt redefined in subclasses**. If the method is redefined, refrain from this technique.\n**Find all calls to the method**. Replace these calls with the content of the method.\nDelete the method.\n\n\n##¬†Extract Variable\n\n**Problem**\nYou have an expression that‚Äôs hard to understand.\n\n**Solution**\nPlace the result of the expression or its parts in separate variables that are self-explanatory.\n\n*Bad*\n```\nrenderBanner(): void {\n  if ((platform.toUpperCase().indexOf(\"MAC\") > -1) &&\n       (browser.toUpperCase().indexOf(\"IE\") > -1) &&\n        wasInitialized() && resize > 0 )\n  {\n    // do something\n  }\n}\n```\n\n*Good*\n```\nrenderBanner(): void {\n  const isMacOs = platform.toUpperCase().indexOf(\"MAC\") > -1;\n  const isIE = browser.toUpperCase().indexOf(\"IE\") > -1;\n  const wasResized = resize > 0;\n\n  if (isMacOs && isIE && wasInitialized() && wasResized) {\n    // do something\n  }\n}\n```\n> **Why Refactor**\nThe main reason for extracting variables is to make a complex expression more understandable, by dividing it into its intermediate parts. These could be:\nCondition of the if() operator or a part of the ?: operator in C-based languages\nA long arithmetic expression without intermediate results\nLong multipart lines\nExtracting a variable may be the first step towards performing **Extract Method** if you see that the extracted expression is used in other places in your code.\n\n*************\n> **Benefits**\n**More readable code!** Try to give the extracted variables good names that announce the variable‚Äôs purpose loud and clear. More readability, fewer long-winded comments. Go for names like customerTaxValue, cityUnemploymentRate, clientSalutationString, etc.\n\n*************\n> **Drawbacks**\nMore variables are present in your code. But this is counterbalanced by the ease of reading your code.\nWhen refactoring conditional expressions, remember that the compiler will most likely optimize it to minimize the amount of calculations needed to establish the resulting value. **Say you have a following expression if (a() || b()) .... The program won‚Äôt call the method b if the method a returns true because the resulting value will still be true**, no matter what value returns b.\nHowever, if you extract parts of this expression into variables, both methods will always be called, which might hurt performance of the program, especially if these methods do some heavyweight work.\n\n*************\n> **How to Refactor**\nInsert a new line before the relevant expression and declare a new variable there. Assign part of the complex expression to this variable.\nReplace that part of the expression with the new variable.\nRepeat the process for all complex parts of the expression.\n\n\n## Inline Temp\n\n**Problem**\nYou have a temporary variable that‚Äôs assigned the result of a simple expression and nothing more.\n\n**Solution**\nReplace the references to the variable with the expression itself.\n\n*Bad*\n```\nhasDiscount(order: Order): boolean {\n  let basePrice: number = order.basePrice();\n  return basePrice > 1000;\n}\n```\n*Good*\n```\nhasDiscount(order: Order): boolean {\n  return order.basePrice() > 1000;\n}\n```\n> **Why Refactor**\nInline local variables are almost always used as part of Replace Temp with Query or to pave the way for Extract Method.\n\n****************\n\n> **Benefits**\nThis refactoring technique offers almost no benefit in and of itself. However, if the variable is assigned the result of a method, you can marginally **improve the readability of the program by getting rid of the unnecessary variable**.\n\n****************\n\n> **Drawbacks**\n**Sometimes seemingly useless temps are used to cache the result of an expensive operation that‚Äôs reused several times**. So before using this refactoring technique, **make sure that simplicity won‚Äôt come at the cost of performance**.\n\n****************\n\n> **How to Refactor**\nFind all places that use the variable. Instead of the variable, use the expression that had been assigned to it.\nDelete the declaration of the variable and its assignment line.\n\n\n## Replace Temp with Query\n\n**Problem**\nYou place the result of an expression in a local variable for later use in your code.\n\n**Solution**\nMove the entire expression to a separate method and return the result from it. Query the method instead of using a variable. Incorporate the new method in other methods, if necessary.\n\n*Bad*\n```\n calculateTotal(): number {\n  let basePrice = quantity * itemPrice;\n  if (basePrice > 1000) {\n    return basePrice * 0.95;\n  }\n  else {\n    return basePrice * 0.98;\n  }\n}\n```\n*Good*\n```\ncalculateTotal(): number {\n  if (basePrice() > 1000) {\n    return basePrice() * 0.95;\n  }\n  else {\n    return basePrice() * 0.98;\n  }\n}\nbasePrice(): number {\n  return quantity * itemPrice;\n}\n```\n\n> **Why Refactor**\nThis refactoring can lay the groundwork for applying Extract Method for a portion of a very long method.\nThe same expression may sometimes be found in other methods as well, which is one reason to consider creating a common method.\n\n*****************\n\n> **Benefits**\n**Code readability**. It‚Äôs much easier to understand the purpose of the method getTax() than the line orderPrice() * 0.2.\nSlimmer code via deduplication, if the line being replaced is used in multiple methods.\n\n*****************\n\n> **Good to Know**\n**Performance**\nThis refactoring may prompt the question of whether this approach is **liable to cause a performance hit**. The honest answer is: yes, it is, since the resulting code may be burdened by querying a new method. **But with today‚Äôs fast CPUs and excellent compilers, the burden will almost always be minimal.** By contrast, readable code and the ability to reuse this method in other places in program code‚Äîthanks to this refactoring approach‚Äîare very noticeable benefits.\nNonetheless, **if your temp variable is used to cache the result of a truly time-consuming expression**, you may want to stop this refactoring after extracting the expression to a new method.\n\n*****************\n\n> **How to Refactor**\nMake sure that a value is assigned to the variable once and only once within the method. If not, use Split Temporary Variable to ensure that the variable will be used only to store the result of your expression.\nUse Extract Method to place the expression of interest in a new method. Make sure that this method only returns a value and doesn‚Äôt change the state of the object. If the method affects the visible state of the object, use Separate Query from Modifier.\nReplace the variable with a query to your new method.\n\n\n##¬†Split Temporary Variable\n\n**Problem**\nYou have a local variable that‚Äôs used to store various intermediate values inside a method (except for cycle variables).\n\n**Solution**\nUse different variables for different values. Each variable should be responsible for only one particular thing.\n\n*Bad*\n```\nlet temp = 2 * (height + width);\nconsole.log(temp);\ntemp = height * width;\nconsole.log(temp);\n```\n*Good*\n```\nconst perimeter = 2 * (height + width);\nconsole.log(perimeter);\nconst area = height * width;\nconsole.log(area);\n```\n\n> **Why Refactor**\n**If you‚Äôre skimping on the number of variables inside a function and reusing them for various unrelated purposes, you‚Äôre sure to encounter problems as soon as you need to make changes to the code containing the variables**. You will have to recheck each case of variable use to make sure that the correct values are used.\n\n***************\n\n> **Benefits**\n**Each component of the program code should be responsible for one and one thing only**. This makes it much easier to maintain the code, since you can easily replace any particular thing without fear of unintended effects.\n**Code becomes more readable**. If a variable was created long ago in a rush, it probably has a name that doesn‚Äôt explain anything: k, a2, value, etc. But you can fix this situation by naming the new variables in an understandable, self-explanatory way. Such names might resemble customerTaxValue, cityUnemploymentRate, clientSalutationString and the like.\nThis refactoring technique is useful if you anticipate using Extract Method later.\n\n***************\n\n> **How to Refactor**\nFind the first place in the code where the variable is given a value. Here you should rename the variable with a name that corresponds to the value being assigned.\nUse the new name instead of the old one in places where this value of the variable is used.\nRepeat as needed for places where the variable is assigned a different value.\n\n\n## Remove Assignments to Parameters\n\n**Problem**\nSome value is assigned to a parameter inside method‚Äôs body.\n\n**Solution**\nUse a local variable instead of a parameter.\n\n*Bad*\n```\ndiscount(inputVal: number, quantity: number): number {\n  if (quantity > 50) {\n    inputVal -= 2;\n  }\n  // ...\n}\n```\n*Good*\n```\ndiscount(inputVal: number, quantity: number): number {\n  let result = inputVal;\n  if (quantity > 50) {\n    result -= 2;\n  }\n  // ...\n}\n```\n> **Why Refactor**\n**The reasons for this refactoring are the same as for Split Temporary Variable, but in this case we‚Äôre dealing with a parameter, not a local variable.**\nFirst, if a **parameter is passed via reference**, then after the parameter value is changed inside the method, this value is passed to the argument that requested calling this method. Very often, this occurs accidentally and leads to unfortunate effects. Even if parameters are usually passed by value (and not by reference) in your programming language, this coding quirk may alienate those who are unaccustomed to it.\nSecond, **multiple assignments of different values to a single parameter make it difficult for you to know what data should be contained in the parameter at any particular point in time**. The problem worsens if your parameter and its contents are documented but the actual value is capable of differing from what‚Äôs expected inside the method.\n\n**************\n\n> **Benefits**\n**Each element of the program should be responsible for only one thing**. This makes code maintenance much easier going forward, since you can safely replace code without any side effects.\nThis refactoring helps to extract repetitive code to separate methods.\n\n**************\n\n> **How to Refactor**\nCreate a local variable and assign the initial value of your parameter.\nIn all method code that follows this line, replace the parameter with your new local variable.\n\n\n##¬†Replace Method with Method Object\n\n**Problem**\nYou have a long method in which the local variables are so intertwined that you can‚Äôt apply Extract Method.\n\n**Solution**\nTransform the method into a separate class so that the local variables become fields of the class. Then you can split the method into several methods within the same class.\n\n*Bad*\n```\nclass Order {\n  // ...\n  price(): number {\n    let primaryBasePrice;\n    let secondaryBasePrice;\n    let tertiaryBasePrice;\n    // Perform long computation.\n  }\n}\n```\n*Good*\n```\nclass Order {\n  // ...\n  price(): number {\n    return new PriceCalculator(this).compute();\n  }\n}\n\nclass PriceCalculator {\n  private _primaryBasePrice: number;\n  private _secondaryBasePrice: number;\n  private _tertiaryBasePrice: number;\n  \n  constructor(order: Order) {\n    // Copy relevant information from the\n    // order object.\n  }\n  \n  compute(): number {\n    // Perform long computation.\n  }\n}\n```\n> **Why Refactor**\n**A method is too long and you can‚Äôt separate it due to tangled masses of local variables that are hard to isolate from each other**.\nThe first step is to isolate the entire method into a separate class and turn its local variables into fields of the class.\nFirstly, this allows isolating the problem at the class level. Secondly, it paves the way for splitting a large and unwieldy method into smaller ones that wouldn‚Äôt fit with the purpose of the original class anyway.\n\n**************\n\n> **Benefits**\nIsolating a long method in its own class allows stopping a method from ballooning in size. This also allows splitting it into submethods within the class, without polluting the original class with utility methods.\n\n**************\n\n> **Drawbacks**\n**Another class is added, increasing the overall complexity of the program.**\n\n**************\n\n> **How to Refactor**\nCreate a new class. Name it based on the purpose of the method that you‚Äôre refactoring.\nIn the new class, create a private field for storing a reference to an instance of the class in which the method was previously located. It could be used to get some required data from the original class if needed.\nCreate a separate private field for each local variable of the method.\nCreate a constructor that accepts as parameters the values of all local variables of the method and also initializes the corresponding private fields.\nDeclare the main method and copy the code of the original method to it, replacing the local variables with private fields.\nReplace the body of the original method in the original class by creating a method object and calling its main method.\n\n\n##¬†Substitute Algorithm\n\n**Problem**\nSo you want to replace an existing algorithm with a new one?\n\n**Solution**\nReplace the body of the method that implements the algorithm with a new algorithm.\n\n*Bad*\n```\nfoundPerson(people: string[]): string{\n  for (let person of people) {\n    if (person.equals(\"Don\")){\n      return \"Don\";\n    }\n    if (person.equals(\"John\")){\n      return \"John\";\n    }\n    if (person.equals(\"Kent\")){\n      return \"Kent\";\n    }\n  }\n  return \"\";\n}\n```\n*Good*\n```\nfoundPerson(people: string[]): string{\n  let candidates = [\"Don\", \"John\", \"Kent\"];\n  for (let person of people) {\n    if (candidates.includes(person)) {\n      return person;\n    }\n  }\n  return \"\";\n}\n```\n> **Why Refactor**\nGradual refactoring isn‚Äôt the only method for improving a program. Sometimes a method is so cluttered with issues that it‚Äôs easier to tear down the method and start fresh. And perhaps you have found an algorithm that‚Äôs much simpler and more efficient. If this is the case, you should simply replace the old algorithm with the new one.\nAs time goes on, your algorithm may be incorporated into a well-known library or framework and you want to get rid of your independent implementation, in order to simplify maintenance.\nThe requirements for your program may change so heavily that your existing algorithm can‚Äôt be salvaged for the task.\n\n**************\n\n> **How to Refactor**\nMake sure that you have simplified the existing algorithm as much as possible. Move unimportant code to other methods using Extract Method. The fewer moving parts in your algorithm, the easier it‚Äôs to replace.\nCreate your new algorithm in a new method. Replace the old algorithm with the new one and start testing the program.\nIf the results don‚Äôt match, return to the old implementation and compare the results. Identify the causes of the discrepancy. While the cause is often an error in the old algorithm, it‚Äôs more likely due to something not working in the new one.\nWhen all tests are successfully completed, delete the old algorithm for good!\n\n","references":"\n- [Refactoring Catalog - Composing methods](https://refactoring.guru/refactoring/techniques/composing-methods)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-refactoring-catalog-composing-methods","weblink":"https://codersnack.com/js-clean-code-refactoring-catalog-composing-methods","featured_image_preview":{"id":159,"name":"js-clean-code.png","hash":"7da36b41bbd94f2298e68133f6333f3c","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/7da36b41bbd94f2298e68133f6333f3c.png","provider":"local","provider_metadata":null,"created_at":"2021-12-01T22:04:08.841Z","updated_at":"2021-12-01T22:04:08.841Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Javascript design patterns - Refactoring - Composing methods","created_at":"2021-12-02T14:49:08.223Z","updated_at":"2021-12-02T14:49:08.235Z"},{"id":126,"codersnack":{"id":124,"header":"Refactoring - Moving features between objects","created_at":"2021-12-02T15:52:55.948Z","updated_at":"2021-12-02T15:52:55.948Z","explanation":"Even if you have distributed functionality among different classes in a less-than-perfect way, there‚Äôs still hope.\n\nThese refactoring techniques show **how to safely move functionality between classes, create new classes, and hide implementation details from public access**.\n\n##¬†Move Method\n\n**Problem**\nA **method is used more in another class than in its own class**.\n\n**Solution**\nCreate a new method in the class that uses the method the most, then move code from the old method to there. Turn the code of the original method into a reference to the new method in the other class or else remove it entirely.\n\n> **Why Refactor**\nYou want to move a method to a class that contains most of the data used by the method. This **makes classes more internally coherent**.\nYou want to move a method in order to reduce or eliminate the dependency of the class calling the method on the class in which it‚Äôs located. This can be useful if the calling class is already dependent on the class to which you‚Äôre planning to move the method. This reduces dependency between classes.\n\n******************\n\n> **How to Refactor**\n1.-**Verify all features used by the old method in its class**. It may be a good idea to move them as well. **As a rule, if a feature is used only by the method under consideration, you should certainly move the feature to it**. If the feature is used by other methods too, you should move these methods as well. Sometimes it‚Äôs much easier to move a large number of methods than to set up relationships between them in different classes.\n2.-**Make sure that the method isn‚Äôt declared in superclasses and subclasses**. If this is the case, you will either have to refrain from moving or else implement a kind of polymorphism in the recipient class in order to ensure varying functionality of a method split up among donor classes.\n3.-**Declare the new method in the recipient class**. You may want to give a new name for the method that‚Äôs more appropriate for it in the new class.\n4.-**Decide how you will refer to the recipient class**. You may already have a field or method that returns an appropriate object, but if not, you will need to write a new method or field to store the object of the recipient class.\n5.-Now you have a way to refer to the recipient object and a new method in its class. With all this under your belt, you can turn the old method into a reference to the new method.\nTake a look: can you delete the old method entirely? If so, **place a reference to the new method in all places that use the old one**.\n\n\n## Move Field\n\n**Problem**\nA **field is used more in another class than in its own class.**\n\n**Solution**\nCreate a field in a new class and redirect all users of the old field to it.\n\n\n> **Why Refactor**\nOften fields are moved as part of the Extract Class technique. Deciding which class to leave the field in can be tough. **Here is our rule of thumb: put a field in the same place as the methods that use it (or else where most of these methods are).**\nThis rule will help in other cases when a field is simply located in the wrong place.\n\n***************\n\n> **How to Refactor**\n1.-If the field is public, refactoring will be much easier if you make the field private and provide public access methods (for this, you can use Encapsulate Field).\n2.-Create the same field with access methods in the recipient class.\n3.-Decide how you will refer to the recipient class. You may already have a field or method that returns the appropriate object; if not, you will need to write a new method or field to store the object of the recipient class.\n4.-Replace all references to the old field with appropriate calls to methods in the recipient class. If the field isn‚Äôt private, take care of this in the superclass and subclasses.\n5.-Delete the field in the original class.\n\n\n\n##  Extract Class\n\n**Problem**\n**When one class does the work of two, awkwardness results.**\n\n**Solution**\nInstead, create a new class and place the fields and methods responsible for the relevant functionality in it.\n\n![js-clean-code-refactoring-extract-class](https://codersnack.com/assets/images/js-clean-code-refactoring-extract-class.png)\n\n\n> **Why Refactor**\nClasses always start out clear and easy to understand. They do their job and mind their own business as it were, without butting into the work of other classes. But **as the program expands, a method is added and then a field... and eventually, some classes are performing more responsibilities than ever envisioned.**\n\n**************\n\n> **Benefits**\n**This refactoring method will help maintain adherence to the Single Responsibility Principle**. The code of your classes will be more obvious and understandable.\nSingle-responsibility classes are more reliable and tolerant of changes. For example, say that you have a class responsible for ten different things. When you change this class to make it better for one thing, you risk breaking it for the nine others.\n\n**************\n\n> **Drawbacks**\nIf you ‚Äúoverdo it‚Äù with this refactoring technique, you will have to resort to Inline Class.\n\n**************\n\n> **How to Refactor**\n1.-Before starting, decide on how exactly you want to split up the responsibilities of the class.\n2.-Create a new class to contain the relevant functionality.\n3.-Create a relationship between the old class and the new one. Optimally, this relationship is unidirectional; this allows reusing the second class without any issues. Nonetheless, if you think that a two-way relationship is necessary, this can always be set up.\n4.-**Use Move Field and Move Method for each field and method that you have decided to move to the new class**. For methods, start with private ones in order to reduce the risk of making a large number of errors. Try to relocate just a little bit at a time and test the results after each move, in order to avoid a pileup of error-fixing at the very end.\nAfter you‚Äôre done moving, take one more look at the resulting classes. An old class with changed responsibilities may be renamed for increased clarity. Check again to see whether you can get rid of two-way class relationships, if any are present.\n5.-**Also give thought to accessibility to the new class from the outside**. You can hide the class from the client entirely by making it private, managing it via the fields from the old class. Alternatively, you can make it a public one by allowing the client to change values directly. Your decision here depends on how safe it‚Äôs for the behavior of the old class when unexpected direct changes are made to the values in the new class.\n\n\n##¬† Inline Class\n\n**Problem**\n**A class does almost nothing and isn‚Äôt responsible for anything, and no additional responsibilities are planned for it.**\n\n**Solution**\nMove all features from the class to another one.\n\n![js-clean-code-refactoring-inline-class](https://codersnack.com/assets/images/js-clean-code-refactoring-inline-class.png)\n\n> **Why Refactor**\nOften this technique is needed after the features of one class are ‚Äútransplanted‚Äù to other classes, leaving that class with little to do.\n\n**************\n\n> **Benefits**\n**Eliminating needless classes frees up operating memory on the computer‚Äîand bandwidth in your head**.\n\n**************\n\n> **How to Refactor**\n1.-In the recipient class, create the public fields and methods present in the donor class. 2.-Methods should refer to the equivalent methods of the donor class.\n3.-Replace all references to the donor class with references to the fields and methods of the recipient class.\n4.-Now test the program and make sure that no errors have been added. If tests show that everything is working A-OK, start using Move Method and Move Field to completely transplant all functionality to the recipient class from the original one. Continue doing so until the original class is completely empty.\n5.-Delete the original class.\n\n\n##  Hide Delegate\n\n**Problem**\nThe client gets object B from a field or method of object –ê. Then the client calls a method of object B.\n\n**Solution**\nCreate a new method in class A that delegates the call to object B. Now **the client doesn‚Äôt know about, or depend on, class B.**\n\n![js-clean-code-refactoring-hide-delegate](https://codersnack.com/assets/images/js-clean-code-refactoring-hide-delegate.png)\n\n> **Why Refactor**\nTo start with, let‚Äôs look at terminology:\n- **Server is the object to which the client has direct access**.\n- **Delegate is the end object that contains the functionality needed by the client**.\nA call chain appears when a client requests an object from another object, then the second object requests another one, and so on. **These sequences of calls involve the client in navigation along the class structure. Any changes in these interrelationships will require changes on the client side**.\n\n**************\n\n> **Benefits**\n**Hides delegation from the client**. The less that the client code needs to know about the details of relationships between objects, the **easier it‚Äôs to make changes to your program.**\n\n**************\n\n> **Drawbacks**\nIf you need to create an excessive number of delegating methods, server-class risks becoming an unneeded go-between, leading to an **excess of Middle Man**.\n\n**************\n\n> **How to Refactor**\n1.-For each method of the delegate-class called by the client, create a method in the server-class that delegates the call to the delegate-class.\n2.-Change the client code so that it calls the methods of the server-class.\n3.-If your changes free the client from needing the delegate-class, you can remove the access method to the delegate-class from the server-class (the method that was originally used to get the delegate-class).\n\n\n##  Remove Middle Man\n**Problem**\n**A class has too many methods that simply delegate to other objects.**\n\n**Solution**\nDelete these methods and force the client to call the end methods directly.\n\n![js-clean-code-refactoring-remove-middle-man](https://codersnack.com/assets/images/js-clean-code-refactoring-remove-middle-man.png)\n\n> **Why Refactor**\nTo describe this technique, we‚Äôll use the terms from Hide Delegate, which are:\n- Server is the object to which the client has direct access.\n- Delegate is the end object that contains the functionality needed by the client.\nThere are two types of problems:\nThe server-class doesn‚Äôt do anything itself and simply creates needless complexity. In this case, give thought to whether this class is needed at all.\nEvery time a new feature is added to the delegate, you need to create a delegating method for it in the server-class. If a lot of changes are made, this will be rather tiresome.\n\n**************\n\n> **How to Refactor**\nCreate a getter for accessing the delegate-class object from the server-class object.\nReplace calls to delegating methods in the server-class with direct calls for methods in the delegate-class.\n\n\n##  Introduce Foreign Method\n**Problem**\nA utility class doesn‚Äôt contain the method that you need and you can‚Äôt add the method to the class.\n\n**Solution**\nAdd the method to a client class and pass an object of the utility class to it as an argument.\n\n```\nclass Report {\n  // ...\n  sendReport(): void {\n    let nextDay: Date = new Date(previousEnd.getYear(),\n      previousEnd.getMonth(), previousEnd.getDate() + 1);\n    // ...\n  }\n}\n```\n```\nclass Report {\n  // ...\n  sendReport() {\n    let newStart: Date = nextDay(previousEnd);\n    // ...\n  }\n  private static nextDay(arg: Date): Date {\n    return new Date(arg.getFullYear(), arg.getMonth(), arg.getDate() + 1);\n  }\n}\n```\n\n> **Why Refactor**\nYou have code that uses the data and methods of a certain class. You realize that the code will look and work much better inside a new method in the class. But you can‚Äôt add the method to the class because, for example, the class is located in a third-party library.\nThis refactoring has a big payoff when the code that you want to move to the method is repeated several times in different places in your program.\nSince you‚Äôre passing an object of the utility class to the parameters of the new method, you have access to all of its fields. Inside the method, you can do practically everything that you want, as if the method were part of the utility class.\n\n**************\n\n> **Benefits**\n**Removes code duplication**. If your code is repeated in several places, you can replace these code fragments with a method call. This is better than duplication even considering that the foreign method is located in a suboptimal place.\n\n**************\n\n> **Drawbacks**\nThe reasons for having the method of a utility class in a client class won‚Äôt always be clear to the person maintaining the code after you. If the method can be used in other classes, you could benefit by creating a wrapper for the utility class and placing the method there. This is also beneficial when there are several such utility methods. Introduce Local Extension can help with this.\n\n**************\n\n> **How to Refactor**\n1.-Create a new method in the client class.\n2.-In this method, create a parameter to which the object of the utility class will be passed. If this object can be obtained from the client class, you don‚Äôt have to create such a parameter.\n3.-Extract the relevant code fragments to this method and replace them with method calls.\n4.-Be sure to leave the Foreign method tag in the comments for the method along with the advice to place this method in a utility class if such becomes possible later. This will make it easier to understand why this method is located in this particular class for those who‚Äôll be maintaining the software in the future.\n\n\n##  Introduce Local Extension\n\n**Problem**\nA utility class doesn‚Äôt contain some methods that you need. But you can‚Äôt add these methods to the class.\n\n**Solution**\nCreate a new class containing the methods and make it either the child or wrapper of the utility class.\n\n![js-clean-code-refactoring-introduce-local-extension](https://codersnack.com/assets/images/js-clean-code-refactoring-introduce-local-extension.png)\n\n> **Why Refactor**\nThe class that you‚Äôre using doesn‚Äôt have the methods that you need. What‚Äôs worse, you can‚Äôt add these methods (because the classes are in a third-party library, for example). There are two ways out:\n- **Create a subclass from the relevant class, containing the methods and inheriting everything else from the parent class**. This way is easier but is sometimes blocked by the utility class itself (due to final).\n- **Create a wrapper class that contains all the new methods and elsewhere will delegate to the related object from the utility class**. This method is more work since you need not only code to maintain the relationship between the wrapper and utility object, but also a large number of simple delegating methods in order to emulate the public interface of the utility class.\n\n**************\n\n> **Benefits**\nBy moving additional methods to a separate extension class (wrapper or subclass), you avoid gumming up client classes with code that doesn‚Äôt fit. Program components are more coherent and are more reusable.\n\n**************\n\n> **How to Refactor**\n1.-Create a new extension class:\nOption A: **Make it a child of the utility class**.\nOption B: **If you have decided to make a wrapper, create a field in it for storing the utility class object to which delegation will be made**. When using this option, you will need to also create methods that repeat the public methods of the utility class and contain simple delegation to the methods of the utility object.\n2.-Create a constructor that uses the parameters of the constructor of the utility class.\n3.-Also create an alternative ‚Äúconverting‚Äù constructor that takes only the object of the original class in its parameters. This will help to substitute the extension for the objects of the original class.\n4.-Create new extended methods in the class. Move foreign methods from other classes to this class or else delete the foreign methods if their functionality is already present in the extension.\n5.-Replace use of the utility class with the new extension class in places where its functionality is needed.\n","references":"- [Refactoring  - Moving features between objects](https://refactoring.guru/refactoring/techniques/moving-features-between-objects)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-refactoring-catalog-move-features-between-objects","weblink":"https://codersnack.com/js-clean-code-refactoring-catalog-move-features-between-objects","featured_image_preview":{"id":160,"name":"js-clean-code.png","hash":"a8dab32803cc49e0a29615ff99c9a756","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/a8dab32803cc49e0a29615ff99c9a756.png","provider":"local","provider_metadata":null,"created_at":"2021-12-02T15:52:55.964Z","updated_at":"2021-12-02T15:52:55.964Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern - Refactoring - Moving features between objects","created_at":"2021-12-02T15:54:43.842Z","updated_at":"2021-12-02T15:54:43.847Z"},{"id":130,"codersnack":{"id":127,"header":"JS Clean Code - DRY-KISS-YAGNI Principles","created_at":"2021-12-21T17:51:01.125Z","updated_at":"2021-12-21T17:51:01.125Z","explanation":"Those are three principles that every developer should care, because they are about clean code. In this article we are going to understand what each one of them means.\n\n##  DRY Principle\n\nDRY stands for **Don‚Äôt Repeat Yourself.** In the book ‚ÄòThe Pragmatic Programmer‚Äô, we can see this definition for DRY:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nThis means that you should not have duplicated code. It‚Äôs easier to maintain a code that is only in one place, because if you need to change something in the code, you just need to change in one place. Besides that, **if you have the same code in two or more places, the chance of this code become different during the time is high, and when this happens it will become an easy way to introduce bugs in your system**. Duplicated code also makes the code **more complex and unnecessarily larger**.\n\n**You also should not write ambiguous code. Your classes, your variables, your functions, they should have a specific name, and their name must match their responsibility**. If you have a function, you should know what the function does by just reading its name, **without being needed to read the code inside of it**.\n\nIn the book ‚ÄòThe Pragmatic Programmer‚Äô we also can see that:\nDRY is about the duplication of knowledge, of intent. It‚Äôs about expressing\nthe same thing in two different places, possibly in two totally different ways\nIt means that it‚Äôs not only about copy and past code ‚Äî yes, this is also included - but goes beyond that. It‚Äòs also about having different code that does the same thing. **Maybe you can have different code in two or more places, but they do the same thing in different ways, this also should be avoided.**\n\n**Bad**\n``` \nfunction orderInfo(order){\n     \n    // Comprobar estado del pedido\n    if(order.status==\"sent\"){\n        console.log(\"your order was already sent\");\n         \n    }else{\n        console.log(\"your order isn't send yet, is in the process\" + order.status);\n    }\n \n    // ....\n \n}\n \nfunction editOrder(order){\n     \n    // Comprobar estado del pedido\n    if(order.status==\"sent\"){\n        console.log(\"your order was already sent\");\n         \n    }else{\n        console.log(\"your order isn't send yet, is in the process\" + order.status);\n    }\n \n    // Edit order\n    // ....\n \n}\n``` \n**Good**\nEncapsular en una funci√≥n y llamarla desde distintos sitios:\n``` \nfunction orderInfo(order){\n     \n    getOrderStatusInfo(order);\n \n    // ....\n \n}\n \nfunction editOrder(order){\n     \n    getOrderStatusInfo(order);\n \n    // Edit order\n    // ....\n \n}\n \nfunction getOrderStatusInfo(order){\n     \n    // Comprobar estado del pedido\n    if(order.status==\"sent\"){\n        console.log(\"your order was already sent\");\n    }else{\n        console.log(\"your order isn't send yet, is in the process\"+order.status);\n    }\n}\n``` \n\n\n##¬†KISS Principle\n\nKISS is an acronym for **Keep It Simple, Stupid**. This principle says about to make your code simple. You should avoid **unnecessary complexity**. A simple code it‚Äôs **easier to maintain and easier to understand.**\n\nYou can apply this principle in the design and in the implementation of the code. You should eliminate duplicated code, should remove unnecessary features, don‚Äôt use unnecessary variables and methods, **use names for variables and methods that makes sense and matches their responsibilities**, and always when it‚Äôs possible, follow know standards of code development. You also should separate the responsibilities of your classes and the responsibilities from the layers of the project.\n\nSometimes you don‚Äôt need to implement something new to attend your needs, **you can simply make use of the features of the programming language that you are using**. For that, it‚Äôs good that you know the features of the programming language that you are working with.\n\nIf you are working in a code that it‚Äôs already implemented, **and you see something that it‚Äôs not necessary or could be simpler, you should consider refactoring it**.\n\n**Bad**\n```\ngetBooleanValue() {\n    x = true;\n    if ( x == true) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n**Good**\n```\ngetBooleanValue() {\n    x = true;\n    return x || false;\n}\n```\n\n\n\n\n## YAGNI Principle\n\nYAGNI stands for **You Ain‚Äôt Gonna Need It**. It‚Äôs a principle from software development methodology of Extreme Programming (XP). This principle says that **you should not create features that it‚Äôs not really necessary.**\n\nThis principle it‚Äôs similar to the KISS principle, once that both of them aim for a simpler solution. The difference between them it‚Äôs that **YAGNI focus on removing unnecessary functionality and logic, and KISS focus on the complexity.**\n\n> Ron Jeffries, one of the co-founders of the XP, once said:\nAlways implement things when you actually need them, never when you just foresee that you need them.\n\nIt means that you should not implement functionality just because you think that you may need it someday, but implement it just when you really need it. Doing that you will avoid spending time with implementations that were not even necessary, and maybe will never be used.\n\n##¬† Conclusion\n\nFollow these principles, will allow you to write better code. Remember that **a clean code it‚Äôs easier to main, easier to understand and for sure it will save your time** when you need to change or implement something. Avoid use duplicated code, try to keep your code as simple as possible, and just implement features when it‚Äôs really necessary.","references":"- [DRY, KISS & YAGNI Principles - Henrique Siebert Domareski](https://henriquesd.medium.com/dry-kiss-yagni-principles-1ce09d9c601f)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-dry-kiss-yagni","weblink":"https://codersnack.com/js-clean-code-dry-kiss-yagni","featured_image_preview":{"id":163,"name":"js-clean-code.jpeg","hash":"69a4d3715af945a1a52ae84af2f6b641","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/69a4d3715af945a1a52ae84af2f6b641.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-12-21T17:51:01.143Z","updated_at":"2021-12-21T17:51:01.143Z"}},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design patterns","created_at":"2021-12-21T17:52:09.254Z","updated_at":"2021-12-21T17:52:09.259Z"}]