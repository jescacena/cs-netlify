[{"id":96,"codersnack":{"id":97,"header":"What is Material Design?","created_at":"2021-10-29T10:52:19.497Z","updated_at":"2021-10-29T11:31:14.049Z","explanation":"Material Design is an **Android-oriented design language created by Google**, supporting onscreen touch experiences via cue-rich features and natural motions that **mimic real-world objects**. Designers optimize users’ experience with 3D effects, realistic lighting and animation features in immersive, platform-consistent GUIs.\n\n### Material Design – Why Users trust \"Realer\" Interfaces\n\nMaterial Design emerged as Google’s brainchild in **mid-2014**, codenamed \"Quantum Paper\" and representing a fresh \"ink-and-pen\" approach. With Material Design, the goal is to **deliver high-quality output consistently across platforms**, giving users control over clearly indicated, pleasant-looking components that behave like real-world objects. \n\nUnlike the portrayal of culture-relevant items (e.g., wastebaskets) in skeuomorphism, with **Material Design designers apply basic, natural laws from the physical world, principally concerning lighting and motion.** The idea is that by mimicking the physical world, we reduce users' cognitive loads through careful attention to layout, visual language and pattern library, maximizing predictability and eliminating ambiguity. Material Design's \"card\" concept serves as a **system for layering elements and animations**; it also permits a more personalized experience (e.g., showing followers on Twitter).\n\n\"Unlike real paper, our digital material can expand and reform intelligently. Material has physical surfaces and edges. Seams and shadows provide meaning about what you can touch.\"\n\n— Matias Duarte, VP of Material Design at Google\n\nIt’s vital for Material Design to meet users' expectations of how components should behave. For instance, onscreen objects are more credible if they follow the laws of gravity.\n\n### \"Magical\" and \"Predictable\" – an Indispensable Paradox\n\nTo apply Material Design effectively, you need to understand these principles:\n\n**1. The metaphor of material**\nYou take the concept of tactile reality, and you:\n\n- *Design to offer users attributes they find familiar as affordances*. Immediately recognizable real-world features such as buttons should instantly let users see what to do. Surfaces and seams/edges must complement these by offering hints. Use realistic light/shadowing to divide the design space and reveal moving parts.\n- *Use an adaptive design* – ensure hierarchy, colors, icons and spatial proportions are consistent across all devices through adaptive version selection.\n\n**2. Bold, graphic and well-chosen elements add meaning and are pleasing to the eye**\n- *Make designs bold so users notice hierarchy instantly and can focus and draw appropriate meanings*. Excellent color and whitespace use, strong imagery and large typography across the screen help users become immersed in the experience.\n- *Design to prompt users to act*, and show functionality by emphasizing icons and surfaces as cues.\n\n**3. Make messages with motion**\n- Put users in control by *showing changes resulting directly from their actions*.\n- Make animations play out in a single environment/stage, in continuous flowing movements.\n- *Ensure responses are clear, but subtle*: no jerky/unpredictable movements.\n\nIt's critical to combine bold, deliberate design choices with subtlety regarding their natural reactions to user input. For example, if the user drops a selected item into a group of objects, the latter should move aside, accommodating it. **In Material Design we try not to let objects do magical things,** such as vanish or move on their own. Instead, we **translate the familiarity of the limited, physical world onto screens** that have unlimited potential. YouTube’s infinite scrolling exemplifies this.\n\n![Using contrasting surface fills to depict elevation](https://codersnack.com/assets/images/ux-contrast-elevation.png)\n*Using contrasting surface fills to depict elevation*\n\n### Material Design, Redesigned\n\n**In May 2018, Google released a revised version to remedy a major problem** – the original guidelines were restrictive, emphasizing function over style. Because apps created in line with these looked alike, **many app makers disliked Material Design**. Google had to balance Material Design’s consistency with the capacity for differentiation – to grant designers the flexibility to adapt it to brand needs. \n\nVersion 2 features not only **new guidelines** but also a tool suite (including **new icon packs** and a **Material Theme editor)** you can use to **customize your designs**. Therefore, you can fine-tune aesthetics to suit your organization’s brand presence while you build on the foundation of timeless natural laws.\n\n### Learn More about Material Design\n\nYou’ll find Google’s Material Design guidelines and library here: https://design.google/resources/ and here: [Material IO Design](https://material.io/design/)\n\nLearn how to create interfaces that mimic real-world objects: \n[how-to-create-intuitive-products-by-imitating-physicality](https://www.interaction-design.org/courses/how-to-create-intuitive-products-by-imitating-physicality)\n\nA detailed piece on standing out with Material Design: \n[10-guidelines-material-design](https://usabilitygeek.com/10-guidelines-material-design/)\n\nAn enlightening do’s-and-don’ts guide to Material Design: \n[dont-risk-making-a-crappy-ui-use-material-design](https://uxplanet.org/dont-risk-making-a-crappy-ui-use-material-design-520ebaceffe4)","references":"- [Interaction Design Foundation](https://www.interaction-design.org/literature/topics/material-design)","featured_image_url":"https://codersnack.com/assets/images/ux-logo.png","slug":"what-is-material","weblink":"https://codersnack.com/what-is-material","featured_image_preview":{"id":132,"name":"ux-logo.png","hash":"d1a0fc7e44804207b250617bcf03d5b3","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/d1a0fc7e44804207b250617bcf03d5b3.png","provider":"local","provider_metadata":null,"created_at":"2021-10-29T11:21:33.887Z","updated_at":"2021-10-29T11:21:33.887Z"}},"codersnacks_category":{"id":18,"header":"User Experience","description":"User Experience, Design Tips, Usability, Accessibility, etc","snacks_by_cat_json_filename":"ux.snacks.json","key":"ux","image_url":"https://codersnack.com/assets/images/ux-logo.png","created_at":"2021-10-29T10:12:53.307Z","updated_at":"2022-01-24T16:22:54.663Z","image_preview":{"id":131,"name":"ux-logo.png","hash":"e8ce45f7475b4cf59fb77ef694e0e2a6","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/e8ce45f7475b4cf59fb77ef694e0e2a6.png","provider":"local","provider_metadata":null,"created_at":"2021-10-29T11:21:19.027Z","updated_at":"2021-10-29T11:21:19.027Z"}},"title":"UX-What is Material Design","created_at":"2021-10-29T10:53:21.576Z","updated_at":"2021-10-29T10:53:21.586Z"},{"id":137,"codersnack":{"id":134,"header":"Accessibility - What is accessibility?","created_at":"2022-01-24T17:14:05.116Z","updated_at":"2022-01-26T17:34:51.822Z","explanation":"Accessibility (often **abbreviated to A11y** — as in \"a\" then 11 characters then \"y\") in Web development **means enabling as many people as possible to use Web sites, even when those people's abilities are limited in some way.**\n\nFor many people, technology makes things easier. For people with disabilities, technology makes things possible. Accessibility means developing content to be as accessible as possible no matter an individual's physical and cognitive abilities and no matter how they access the web.\n\n> \"The Web is fundamentally designed to work for all people, whatever their hardware, software, language, culture, location, or physical or mental ability. When the Web meets this goal, it is accessible to people with a diverse range of hearing, movement, sight, and cognitive ability.\" (W3C - Accessibility)\n\n### What is accessibility?\n\nThis article starts the module off with a good look at what accessibility is — this overview includes what groups of people we need to consider and why, what tools different people use to interact with the web, and how we can make accessibility part of our web development workflow.\n\n#### So what is accessibility?\n\nAccessibility is the practice of making your websites usable by as many people as possible. We traditionally think of this as being about people with disabilities, but the practice of making sites accessible **also benefits other groups such as those using mobile devices, or those with slow network connections**.\n\n**You might also think of accessibility as treating everyone the same, and giving them equal opportunities, no matter what their ability or circumstances**. Just as it is wrong to exclude someone from a physical building because they are in a wheelchair (modern public buildings generally have wheelchair ramps or elevators), it is also not right to exclude someone from a website because they have a visual impairment. We are all different, but we are all human, and therefore have the same human rights.\n\nAccessibility is the right thing to do. **Providing accessible sites is part of the law in some countries**, which **can open up some significant markets that otherwise would not be able to use your services or buy your products.**\n\nBuilding accessible sites benefit everyone:\n\n- **Semantic HTML**, which improves accessibility, also **improves SEO**, making your site more findable.\n- Caring about accessibility demonstrates good ethics and morals, which **improves your public image.**\n- Other good practices that improve accessibility also make your site **more usable by other groups,** such as mobile phone users or those on low network speed. In fact, everyone can benefit from many such improvements.\n- Did we mention it is also the **law in some places**?\n\n### What kinds of disability are we looking at?\n\nPeople with disabilities are just as diverse as people without disabilities, and so are their disabilities. The key lesson here is to think beyond your own computer and how you use the web, and start learning about how others use it — you are not your users. The main types of disability to consider are explained below, along with any special tools they use to access web content (known as assistive technologies, or ATs).\n\n> **Note**: The World Health Organization's Disability and health fact sheet states that \"Over a billion people, about 15% of the world's population, have some form of disability\", and \"Between 110 million and 190 million adults have significant difficulties in functioning.\"\n\n#### People with visual impairments\n\n**People with visual impairments include people with blindness, low-level vision, and color blindness**. Many people with visual impairments **use screen magnifiers that are either physical magnifiers or software zoom capabilities**. Most browsers and operating systems these days have zoom capabilities. Some users will rely on **screen readers**, which is software that reads digital text aloud. Some **screen reader examples** include:\n\n- Paid commercial products, like JAWS (Windows) and Dolphin Screen Reader (Windows).\n- Free products, like NVDA (Windows), ChromeVox (Chrome), and Orca (Linux).\n- Software built into the operating system, like VoiceOver (macOS, iPadOS, iOS), Narrator (Windows), ChromeVox (on Chrome OS), and TalkBack (Android).\n\n**It is a good idea to familiarize yourself with screen readers; you should also set up a screen reader and have a play around with it, to get an idea of how it works**. See [our cross-browser testing screen readers guide](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility#screenreaders) for more details on using them. The below video also provides a brief example of what the experience is like. [Video](https://youtu.be/IK97XMibEws)\n\n\nIn terms of statistics, the **World Health Organization estimates that \"285 million people are estimated to be visually impaired worldwide**: 39 million are blind and 246 million have low vision.\" (see Visual impairment and blindness). That's a large and significant population of users to just miss out on because your site isn't coded properly — almost the same size as the population of the United States of America.\n\n#### People with hearing impairments\n\n**Deaf and hard-of-hearing (DHH) people have various levels of hearing loss ranging from mild to profound**. Although some do use AT (see Assistive Devices for People with Hearing, Voice, Speech, or Language Disorders), they are not widespread.\n\n**To provide access, textual alternatives must be provided**. Videos should be manually **captioned**, and **transcripts** should be provided for audio content. Furthermore, due to high levels of language deprivation in DHH populations, text simplification should be considered.\n\nDeaf and hard-of-hearing people also represent a significant userbase — **\"466 million people worldwide have disabling hearing loss\"**, says the World Health Organization's Deafness and hearing loss fact sheet.\n\n#### People with mobility impairments\n\nThese people have disabilities concerning movement, which might involve purely physical issues (such as loss of limb or paralysis), or neurological/genetic disorders that lead to weakness or loss of control in limbs. **Some people might have difficulty making the exact hand movements required to use a mouse**, while others might be more severely affected, perhaps being significantly paralyzed to the point where they need to use a head pointer to interact with computers.\n\nThis kind of disability can also be a **result of old age,** rather than any specific trauma or condition, and it could also result from hardware limitations — s**ome users might not have a mouse.**\n\n**The way this usually affects web development work is the requirement that controls be accessible by the keyboard** — we'll discuss keyboard accessibility in later articles in the module, but it is a good idea to try out some websites using just the keyboard to see how you get on. Can you use the Tab key to move between the different controls of a web form, for example? You can find more details about keyboard controls in our Cross browser testing Using native keyboard accessibility section.\n\nIn terms of statistics, a significant number of people have mobility impairments. The US Centers for Disease Control and Prevention Disability and Functioning (Non-institutionalized Adults 18 Years and Over) reports the USA **\"Percent of adults with any physical functioning difficulty: 16.1%\".**\n\n#### People with cognitive impairments\n\nCognitive impairment refers to a broad range of disabilities, from people with intellectual disabilities who have the most-limited capabilities, to all of us as we age and have difficulty thinking and remembering. The range includes people with mental illnesses, such as depression and schizophrenia. It also includes people with learning disabilities, such as dyslexia and attention deficit hyperactivity disorder. Importantly, though there is a lot of diversity within clinical definitions of cognitive impairments, people with them experience a common set of functional problems. These include difficulty with understanding content, remembering how to complete tasks, and confusion caused by inconsistent webpage layouts.\n\n**A good foundation of accessibility for people with cognitive impairments** includes:\n\n- Delivering content in more than one way, such as by text-to-speech or by video.\n- Easily understood content, such as text written using plain-language standards.\n- Focusing attention on important content.\n- Minimizing distractions, such as unnecessary content or advertisements.\n- Consistent webpage layout and navigation.\n- Familiar elements, such as underlined links blue when not visited and purple when visited.\n- Dividing processes into logical, essential steps with progress indicators.\n- Website authentication as easy as possible without compromising security.\n- Making forms easy to complete, such as with clear error messages and simple error recovery.\n\n**Notes**\n- Designing with cognitive accessibility will lead to good design practices. They will benefit everyone.\n- Many people with cognitive impairments also have physical disabilities. Websites must conform with the [W3C’s Web Content Accessibility Guidelines](https://www.w3.org/WAI/standards-guidelines/wcag/), including cognitive accessibility guidelines.\n- The W3C’s Cognitive and Learning Disabilities Accessibility Task Force produces web accessibility guidelines for people with cognitive impairments.\n- WebAIM has a Cognitive page of relevant information and resources.\n- The United States Centers for Disease Control estimate that, as of 2018, 1 in 4 US citizens have a disability and, of them, cognitive impairment is the most common for young people.\n- In the US, some intellectual disabilities have historically been referred to as \"mental retardation.\" Many now consider this term disparaging, so its use should be avoided.\n- In the UK, some intellectual disabilities are referred to as \"learning disabilities\" or \"learning difficulties\".\n\n### Implementing accessibility into your project\n\nA common accessibility myth is that accessibility is an expensive \"added extra\" to implement on a project. This myth actually can be true if either:\n\n- You are trying to \"retrofit\" accessibility onto an existing website that has significant accessibility issues.\n- You have only started to consider accessibility and uncovered related issues in the late stages of a project.\n\n**If however, you consider accessibility from the start of a project, the cost of making most content accessible should be fairly minimal.**\n\n**When planning your project, factor accessibility testing into your testing regime, just like testing for any other important target audience segment (e.g., target desktop or mobile browsers)**. Test early and often, ideally running automated tests to pick up on programmatically detectable missing features (such as missing image alternative text or bad link text — see Element relationships and context) and doing some testing with disabled user groups to see how well more complex site features work for them. For example:\n\n- Is my date picker widget usable by people using screen readers?\n- If content updates dynamically, do visually impaired people know about it?\n- Are my UI buttons accessible using the keyboard and on touch interfaces?\n\n**You can and should keep a note of potential problem areas in your content that will need work to make it accessible, make sure it is tested thoroughly, and think about solutions/alternatives**. Text content (as you'll see in the next article) is easy, but what about your multimedia content, and your whizzy 3D graphics? You should look at your project budget and think about what solutions you have available to make such content accessible. Having all your multimedia content transcribed is one option which, while expensive, is possible.\n\nAlso, be realistic.**\"100% accessibility\" is an unobtainable ideal** — you will always come across some kind of edge case that results in a certain user finding certain content difficult to use — but **you should do as much as you can**. If you are planning to include a whizzy 3D pie chart graphic made using WebGL, you might want to include a data table as an accessible alternative representation of the data. Or, you might want to just include the table and get rid of the 3D pie chart — the table is accessible by everyone, quicker to code, less CPU-intensive, and easier to maintain.\n\nOn the other hand, if you are working on a gallery website showing interesting 3D art, it would be unreasonable to expect every piece of art to be perfectly accessible to visually impaired people, given that it is an entirely visual medium.\n\n**To show that you care and have thought about accessibility, publish an accessibility statement on your site that details what your policy is toward accessibility, and what steps you have taken toward making the site accessible**. If someone does notify you that your site has an accessibility problem, start a dialog with them, be empathetic, and take reasonable steps to try to fix the problem.\n\n**Note**: Our [Handling common accessibility problems](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility) article covers accessibility specifics that should be tested in more detail.\n\nTo **summarize**:\n\n- **Consider accessibility from the start of a project**, and test early and often. Just like any other bug, an accessibility problem becomes more expensive to fix the later it is discovered.\n- Bear in mind that a lot of **accessibility best practices benefit everyone, not just users with disabilities**. For example, lean semantic markup is not only good for screen readers, but it is also fast to load and performant. This benefits everyone, especially those on mobile devices and/or slow connections.\n- **Publish an accessibility statement on your site and engage with people having problems**.\n\n### Accessibility guidelines and the law\n\n**There are numerous checklists and sets of guidelines available for basing accessibility tests** on, which might seem overwhelming at first glance. Our advice is to familiarize yourself with the basic areas in which you need to take care, as well as understanding the high-level structures of the guidelines that are most relevant to you.\n\n- For a start, the **W3C has published a large and very detailed document** that includes very precise, technology-agnostic criteria for accessibility conformance. These are called the [Web Content Accessibility Guidelines (WCAG)](https://www.w3.org/WAI/standards-guidelines/wcag/), and they are not a short read by any means. The criteria are split up into four main categories, which specify how implementations can be made perceivable, operable, understandable, and robust. The best place to get a light introduction and start learning is [WCAG at a Glance](https://www.w3.org/WAI/standards-guidelines/wcag/glance/). There is no need to learn all of the WCAG criteria — be aware of the major areas of concern, and use a variety of techniques and tools to highlight any areas that don't conform to the WCAG criteria (see below for more).\n\n- **Your country may also have specific legislation governing the need for websites serving their population to be accessible** — for example EN 301 549 in the EU, Section 508 of the Rehabilitation Act in the US, Federal Ordinance on Barrier-Free Information Technology in Germany, the Accessibility Regulations 2018 in the UK, Accessibilità in Italy, the Disability Discrimination Act in Australia, etc. The W3C keeps a list of Web Accessibility Laws & Policies by country.\n\nSo while the WCAG is a set of guidelines, your country will probably have laws governing web accessibility, or at least the accessibility of services available to the public (which could include websites, television, physical spaces, etc.) It is a good idea to find out what your laws are. **If you make no effort to check that your content is accessible, you could be legally liable if people complain.**\n\nThis sounds serious, but really you just need to consider accessibility as the main priority of your web development practices, as outlined above. If in doubt, **get advice from a qualified lawyer**. We're not going to offer any more advice than this, because we're not lawyers.\n\n### Accessibility APIs\n\n**Web browsers make use of special accessibility APIs (provided by the underlying operating system) that expose information useful for assistive technologies (ATs)** — ATs mostly tend to make use of semantic information, so this information doesn't include things like styling information, or JavaScript. **This information is structured in a tree of information called the accessibility tree.**\n\nDifferent operating systems have different accessibility APIs available :\n\n- Windows: MSAA/IAccessible, UIAExpress, IAccessible2\n- Mac OS X: NSAccessibility\n- Linux: AT-SPI\n- Android: Accessibility framework\n- iOS: UIAccessibility\n\nWhere the native semantic information provided by the HTML elements in your web apps falls down, you can supplement it with features from the [WAI-ARIA specification](https://www.w3.org/TR/wai-aria/), which add semantic information to the accessibility tree to improve accessibility. You can learn a lot more about WAI-ARIA in our [WAI-ARIA basics](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/WAI-ARIA_basics) article.\n\n\n### Summary\nThis article should have given you a useful high-level overview of accessibility, shown you why it's important, and looked at how you can fit it into your workflow. You should now also have a thirst to learn about the implementation details that can make sites accessible, and we'll start on that in the next section, looking at why HTML is a good basis for accessibility.","references":"- [MDN - What is Accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility)\n","featured_image_url":"https://codersnack.com/assets/images/ux-logo.png","slug":"ux-what-is-accessibility","weblink":"https://codersnack.com/ux-what-is-accessibility","featured_image_preview":{"id":171,"name":"ux-logo.png","hash":"e4df6b3d693d4a1fb9eb221e1b82d957","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/e4df6b3d693d4a1fb9eb221e1b82d957.png","provider":"local","provider_metadata":null,"created_at":"2022-01-24T17:14:05.134Z","updated_at":"2022-01-24T17:14:05.134Z"}},"codersnacks_category":{"id":18,"header":"User Experience","description":"User Experience, Design Tips, Usability, Accessibility, etc","snacks_by_cat_json_filename":"ux.snacks.json","key":"ux","image_url":"https://codersnack.com/assets/images/ux-logo.png","created_at":"2021-10-29T10:12:53.307Z","updated_at":"2022-01-24T16:22:54.663Z","image_preview":{"id":131,"name":"ux-logo.png","hash":"e8ce45f7475b4cf59fb77ef694e0e2a6","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/e8ce45f7475b4cf59fb77ef694e0e2a6.png","provider":"local","provider_metadata":null,"created_at":"2021-10-29T11:21:19.027Z","updated_at":"2021-10-29T11:21:19.027Z"}},"title":"UX - What is Accessibility","created_at":"2022-01-24T17:14:37.518Z","updated_at":"2022-01-24T17:14:37.525Z"},{"id":142,"codersnack":{"id":139,"header":"Accessibility - HTML - A good basis for accessibility - 1","created_at":"2022-01-27T11:02:46.307Z","updated_at":"2022-01-27T11:20:57.005Z","explanation":"**A great deal of web content can be made accessible just by making sure the correct Hypertext Markup Language elements are used for the correct purpose at all times**. This article looks in detail at how HTML can be used to ensure maximum accessibility.\n\n> **Prerequisites**:\tBasic computer literacy, a basic understanding of HTML (see Introduction to HTML), and an understanding of what accessibility is.\n**Objective**:\tTo gain familiarity with the features of HTML that have accessibility benefits and how to use them appropriately in your web documents.\n\n\n### HTML and accessibility\n\nAs you learn more about HTML — read more resources, look at more examples, etc. — you'll keep seeing a common theme: **the importance of using semantic HTML (sometimes called POSH, or Plain Old Semantic HTML**). This means using the correct HTML elements for their intended purpose as much as possible.\n\nYou might wonder why this is so important. After all, you can use a combination of CSS and JavaScript to make just about any HTML element behave in whatever way you want. For example, a control button to play a video on your site could be marked up like this:\n\n```\n<div>Play video</div>\n```\n\nBut as you'll see in greater detail later on, **it makes sense to use the correct element** for the job:\n\n```\n<button>Play video</button>\n```\n\n**Not only do HTML ```<button>``` s have some suitable styling applied by default (which you will probably want to override), they also have built-in keyboard accessibility** — **users can navigate between buttons using the *Tab* key** and **activate their selection using *Return* or *Enter*.**\n\n**Semantic HTML doesn't take any longer to write than non-semantic (bad) markup** if you do it consistently from the start of your project. Even better, semantic markup has **other benefits beyond accessibility**:\n\n- **Easier to develop with** — as mentioned above, you get some functionality for free, plus it is arguably easier to understand.\n- **Better on mobile** — semantic HTML is arguably lighter in file size than non-semantic spaghetti code, and easier to make responsive.\n- **Good for SEO** — search engines give more importance to keywords inside headings, links, etc. than keywords included in non-semantic <div>s, etc., so your documents will be more findable by customers.\n\nLet's get on and look at accessible HTML in more detail.\n\n> **Note**: It is a good idea to have a screen reader set up on your local computer so that you can do some testing of the examples shown below. See our [Screen readers guide](https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility#screenreaders) for more details.\n\n\n### Good semantics\n\nWe've already talked about the importance of proper semantics, and why we should use the right HTML element for the job. This cannot be ignored, as it is one of the main places that accessibility is badly broken if not handled properly.\n\n**Out there on the web, the truth is that people do some very strange things with HTML markup**. Some abuses of HTML are due to legacy practices that have not been completely forgotten, and some are just plain ignorance. Whatever the case, you should replace such bad code.\n\n**Sometimes you are not in the position to get rid of lousy markup** — your pages might be generated by some kind of server-side framework over which you don't have full control, or you might have third party content on your page (such as ad banners) over which you have no control.\n\n**The goal isn't \"all or nothing\"; every improvement you can make will help the cause of accessibility.**\n\n\n#### Text content\n\nOne of the best accessibility aids a screen reader user can have is an excellent content structure with headings, paragraphs, lists, etc. An excellent semantic example might look something like the following:\n\n```\n<h1>My heading</h1>\n\n<p>This is the first section of my document.</p>\n\n<p>I'll add another paragraph here too.</p>\n\n<ol>\n  <li>Here is</li>\n  <li>a list for</li>\n  <li>you to read</li>\n</ol>\n\n<h2>My subheading</h2>\n\n<p>This is the first subsection of my document. I'd love people to be able to find this content!</p>\n\n<h2>My 2nd subheading</h2>\n\n<p>This is the second subsection of my content. I think is more interesting than the last one.</p>\n```\n\n\nWe've prepared a version with longer text for you to try out with a screen reader (see [good-semantics.html](https://mdn.github.io/learning-area/accessibility/html/good-semantics.html)). If you try navigating through this, you'll see that this is pretty easy to navigate:\n\n- **The screen reader reads each header out as you progress through the content**, notifying you what a heading is, what is a paragraph, etc.\n- **It stops after each element**, letting you go at whatever pace is comfortable for you.\n- **You can jump to the next/previous heading** in many screen readers.\n- **You can also bring up a list of all headings in many screen readers**, allowing you to use them as a handy table of contents to find specific content.\n\n**People sometimes write headings, paragraphs, etc. using presentational HTML and line breaks**, something like the following:\n```\n<font size=\"7\">My heading</font>\n<br><br>\nThis is the first section of my document.\n<br><br>\nI'll add another paragraph here too.\n<br><br>\n1. Here is\n<br><br>\n2. a list for\n<br><br>\n3. you to read\n<br><br>\n<font size=\"5\">My subheading</font>\n<br><br>\nThis is the first subsection of my document. I'd love people to be able to find this content!\n<br><br>\n<font size=\"5\">My 2nd subheading</font>\n<br><br>\nThis is the second subsection of my content. I think is more interesting than the last one.\n```\nIf you try our longer version out with a screen reader (see [bad-semantics.html](https://mdn.github.io/learning-area/accessibility/html/bad-semantics.html)), **you'll not have a very good experience** — the screen reader hasn't got anything to use as signposts, so you can't retrieve a useful table of contents, and the whole page is seen as a single giant block, so it is just read out in one go, all at once.\n\n**There are other issues too beyond accessibility** — it is **harder to style the content** using CSS, or **manipulate it with JavaScript**, for example, because there are **no elements to use as selectors**.\n\n\n#### Using clear language\n\nThe language you use can also affect accessibility.**In general, you should use clear language that is not overly complex and doesn't use unnecessary jargon or slang terms**. This not only benefits people with cognitive or other disabilities; **it benefits readers for whom the text is not written in their first language, younger people** ... everyone, in fact! Apart from this, you should try to avoid using language and characters that don't get read out clearly by the screen reader. For example:\n\n- **Don't use dashes** if you can avoid it. Instead of writing 5–7, write 5 to 7.\n- **Expand abbreviations** — instead of writing Jan, write January.\n- **Expand acronyms, at least once or twice**. Instead of writing HTML in the first instance, write Hypertext Markup Language.\n\n\n### Page layouts\n\n**In the bad old days, people used to create page layouts using HTML tables** — using different table cells to contain the header, footer, sidebar, main content column, etc. This is not a good idea because a screen reader **will likely give out confusing readouts, especially if the layout is complex and has many nested tables**.\n\nTry our example [table-layout.html](https://mdn.github.io/learning-area/accessibility/html/table-layout.html) example, which looks something like this:\n\n```\n<table width=\"1200\">\n      <!-- main heading row -->\n      <tr id=\"heading\">\n        <td colspan=\"6\">\n\n          <h1 align=\"center\">Header</h1>\n\n        </td>\n      </tr>\n      <!-- nav menu row  -->\n      <tr id=\"nav\" bgcolor=\"#ffffff\">\n        <td width=\"200\">\n          <a href=\"#\" align=\"center\">Home</a>\n        </td>\n        <td width=\"200\">\n          <a href=\"#\" align=\"center\">Our team</a>\n        </td>\n        <td width=\"200\">\n          <a href=\"#\" align=\"center\">Projects</a>\n        </td>\n        <td width=\"200\">\n          <a href=\"#\" align=\"center\">Contact</a>\n        </td>\n        <td width=\"300\">\n          <form width=\"300\">\n            <input type=\"search\" name=\"q\" placeholder=\"Search query\" width=\"300\">\n          </form>\n        </td>\n        <td width=\"100\">\n          <button width=\"100\">Go!</button>\n        </td>\n      </tr>\n      <!-- spacer row -->\n      <tr id=\"spacer\" height=\"10\">\n        <td>\n\n        </td>\n      </tr>\n      <!-- main content and aside row -->\n      <tr id=\"main\">\n        <td id=\"content\" colspan=\"4\" bgcolor=\"#ffffff\">\n\n          <!-- main content goes here -->\n        </td>\n        <td id=\"aside\" colspan=\"2\" bgcolor=\"#ff80ff\" valign=\"top\">\n          <h2>Related</h2>\n\n          <!-- aside content goes here -->\n\n        </td>\n      </tr>\n      <!-- spacer row -->\n      <tr id=\"spacer\" height=\"10\">\n        <td>\n\n        </td>\n      </tr>\n      <!-- footer row -->\n      <tr id=\"footer\" bgcolor=\"#ffffff\">\n        <td colspan=\"6\">\n          <p>©Copyright 2050 by nobody. All rights reversed.</p>\n        </td>\n      </tr>\n    </table>\n```\n\nIf you try to navigate this using a screen reader, it will probably tell you that there's a table to be looked at (although some screen readers can guess the difference between table layouts and data tables). You'll then likely (depending on which screen reader you're using) have to go down into the table as an object and look at its features separately, then get out of the table again to carry on navigating the content.\n\n**Table layouts are a relic of the past — they made sense back when CSS support was not widespread in browsers, but now they just create confusion for screen reader users.** Additionally, their source code requires **more markup, which makes them less flexible and more difficult to maintain**. You can verify these claims by comparing your previous experience with a [more modern website structure example](https://mdn.github.io/learning-area/html/introduction-to-html/document_and_website_structure/), which could look something like this:\n\n```\n<header>\n  <h1>Header</h1>\n</header>\n\n<nav>\n  <!-- main navigation in here -->\n</nav>\n\n<!-- Here is our page's main content -->\n<main>\n\n  <!-- It contains an article -->\n  <article>\n    <h2>Article heading</h2>\n\n    <!-- article content in here -->\n  </article>\n\n  <aside>\n    <h2>Related</h2>\n\n    <!-- aside content in here -->\n  </aside>\n\n</main>\n\n<!-- And here is our main footer that is used across all the pages of our website -->\n\n<footer>\n  <!-- footer content in here -->\n</footer>\n```\n\nIf you try our more modern structure example with a screen reader, you'll see that the **layout markup no longer gets in the way and confuses the content readout. It is also much leaner and smaller in terms of code size,** which means easier to maintain code, and less bandwidth for the user to download (particularly prevalent for those on slow connections).\n\nAnother consideration when creating layouts is **using HTML5 semantic elements** as seen in the above example (see content sectioning) — you can create a layout using only nested ```<div>``` elements, but it is better to use appropriate sectioning elements to wrap your main navigation (```<nav>```), footer (```<footer>```), repeating content units (```<article>```), etc. These **provide extra semantics for screen readers (and other tools) to give users extra clues about the content they are navigating** (see Screen Reader Support for new HTML5 Section Elements for an idea of what screen reader support is like).\n\n> **Note**: In addition to having good semantics and an attractive layout, **your content should make logical sense in its source order** — you can always place it where you want using CSS later on, but you should get the source order right to start with, so what screen reader users get read out to them will make sense.\n\n","references":"- [MDN - HTML - A good basis for accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML)\n","featured_image_url":"https://codersnack.com/assets/images/ux-logo.png","slug":"ux-accessibility-html-1","weblink":"https://codersnack.com/ux-accessibility-html-1","featured_image_preview":{"id":176,"name":"ux-logo.png","hash":"6c46aba8c43d48e8806ee4b1b1e6b486","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/6c46aba8c43d48e8806ee4b1b1e6b486.png","provider":"local","provider_metadata":null,"created_at":"2022-01-27T11:02:46.326Z","updated_at":"2022-01-27T11:02:46.326Z"}},"codersnacks_category":{"id":18,"header":"User Experience","description":"User Experience, Design Tips, Usability, Accessibility, etc","snacks_by_cat_json_filename":"ux.snacks.json","key":"ux","image_url":"https://codersnack.com/assets/images/ux-logo.png","created_at":"2021-10-29T10:12:53.307Z","updated_at":"2022-01-24T16:22:54.663Z","image_preview":{"id":131,"name":"ux-logo.png","hash":"e8ce45f7475b4cf59fb77ef694e0e2a6","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/e8ce45f7475b4cf59fb77ef694e0e2a6.png","provider":"local","provider_metadata":null,"created_at":"2021-10-29T11:21:19.027Z","updated_at":"2021-10-29T11:21:19.027Z"}},"title":"UX - Accessibility - HTML 1","created_at":"2022-01-27T11:03:18.079Z","updated_at":"2022-01-27T11:03:18.087Z"},{"id":143,"codersnack":{"id":140,"header":"Accessibility - HTML - A good basis for accessibility - 2","created_at":"2022-01-27T11:44:14.783Z","updated_at":"2022-01-27T11:44:14.783Z","explanation":"\n### UI controls\n\n**By UI controls, we mean the main parts of web documents that users interact with — most commonly buttons, links, and form controls**. In this section, we'll look at the **basic accessibility concerns to be aware** of when creating such controls. Later articles on WAI-ARIA and multimedia will look at other aspects of UI accessibility.\n\n**One key aspect of the accessibility of UI controls is that by default, browsers allow them to be manipulated by the keyboard**. You can try this out using our [native-keyboard-accessibility.html](https://mdn.github.io/learning-area/tools-testing/cross-browser-testing/accessibility/native-keyboard-accessibility.html) example (see the [source code](https://github.com/mdn/learning-area/blob/main/tools-testing/cross-browser-testing/accessibility/native-keyboard-accessibility.html)). Open this in a new tab, and try **pressing the tab key; after a few presses, you should see the tab focus start to move through the different focusable elements**. The focused elements are given a highlighted default style in every browser (it differs slightly between different browsers) so that you can tell what element is focused.\n\n> **Note**: From Firefox 84 you can also enable an overlay that shows the page tabbing order. For more information see: Accessibility Inspector > Show web page tabbing order.\n\n**You can then press Enter/Return to follow a focused link or press a button** (we've included some JavaScript to make the buttons alert a message), **or start typing to enter text** in a text input. Other form elements have different controls, for example, the ```<select>``` element can have its options displayed and cycled between using the up and down arrow keys.\n\n> **Note**: Different browsers may have different keyboard control options available. See Using native keyboard accessibility for more details.\n\nYou essentially get this behavior for free, just by using the appropriate elements, e.g.\n```\n<h1>Links</h1>\n\n<p>This is a link to <a href=\"https://www.mozilla.org\">Mozilla</a>.</p>\n\n<p>Another link, to the <a href=\"https://developer.mozilla.org\">Mozilla Developer Network</a>.</p>\n\n<h2>Buttons</h2>\n\n<p>\n  <button data-message=\"This is from the first button\">Click me!</button>\n  <button data-message=\"This is from the second button\">Click me too!</button>\n  <button data-message=\"This is from the third button\">And me!</button>\n</p>\n\n<h2>Form</h2>\n\n<form>\n  <div>\n    <label for=\"name\">Fill in your name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\">\n  </div>\n  <div>\n    <label for=\"age\">Enter your age:</label>\n    <input type=\"text\" id=\"age\" name=\"age\">\n  </div>\n  <div>\n    <label for=\"mood\">Choose your mood:</label>\n    <select id=\"mood\" name=\"mood\">\n      <option>Happy</option>\n      <option>Sad</option>\n      <option>Angry</option>\n      <option>Worried</option>\n    </select>\n  </div>\n</form>\n```\n\nThis means using links, buttons, form elements, and labels appropriately (including the ```<label>```  element for form controls).\n\nHowever, it is again the case that people sometimes do strange things with HTML. For example, you sometimes see buttons marked up using ```<div>```s, for example:\n\n```\n<div data-message=\"This is from the first button\">Click me!</div>\n<div data-message=\"This is from the second button\">Click me too!</div>\n<div data-message=\"This is from the third button\">And me!</div>\n```\n\nBut using such code is not advised — **you immediately lose the native keyboard accessibility** you would have had if you'd just used ```<button>``` elements, plus you don't get any of the default CSS styling that buttons get.\n\n\n#### Building keyboard accessibility back in\n\n**Adding such advantages back in takes a bit of work** (you can see an example in our fake-div-buttons.html example — also see the source code). Here we've given our fake ```<div>``` buttons the ability to be focused (including via tab) by giving each one the **attribute tabindex=\"0\"**:\n\n```\n<div data-message=\"This is from the first button\" tabindex=\"0\">Click me!</div>\n<div data-message=\"This is from the second button\" tabindex=\"0\">Click me too!</div>\n<div data-message=\"This is from the third button\" tabindex=\"0\">And me!</div>\n```\n\n**Basically, the tabindex attribute is primarily intended to allow tabbable elements to have a custom tab order** (specified in positive numerical order), instead of just being tabbed through in their default source order. **This is nearly always a bad idea**, as it can cause major confusion. Use it only if you really need to, for example, if the layout shows things in a very different visual order to the source code, and you want to make things work more logically. There are two other options for tabindex:\n\n- **tabindex=\"0\"** — as indicated above, **this value allows elements that are not normally tabbable to become tabbable**. This is the most useful value of tabindex.\n- **tabindex=\"-1\"** — **this allows not normally tabbable elements to receive focus programmatically**, e.g., via JavaScript, or as the target of links.\n\n**Whilst the above addition allows us to tab to the buttons, it does not allow us to activate them via the Enter/Return key**. To do that, we had to add the following bit of JavaScript trickery:\n\n```\ndocument.onkeydown = function(e) {\n  if(e.keyCode === 13) { // The Enter/Return key\n    document.activeElement.click();\n  }\n};\n```\n**Here we add a listener to the document object to detect when a button has been pressed on the keyboard**. We check what button was pressed via the event object's keyCode property; if it is the keycode that matches Return/Enter, we run the function stored in the button's onclick handler using *document.activeElement.click(). activeElement* which gives us the element that is currently focused on the page.\n\n**This is a lot of extra hassle to build the functionality back in**. And there's bound to be other problems with it. Better to just use the right element for the right job in the first place.\n\n\n### Meaningful text labels\n\n**UI control text labels are very useful to all users, but getting them right is particularly important to users with disabilities**.\n\n**You should make sure that your button and link text labels are understandable and distinctive**. Don't just use \"Click here\" for your labels, as screen reader users sometimes get up a list of buttons and form controls. The following screenshot shows our controls being listed by VoiceOver on Mac.\n\n\n![voiceover-formcontrols](https://codersnack.com/assets/images/voiceover-formcontrols.png)\n\n\n**Make sure your labels make sense out of context, read on their own, as well as in the context of the paragraph they are in**. For example, the following shows an example of good link text:\n```\n<p>Whales are really awesome creatures. <a href=\"whales.html\">Find out more about whales</a>.</p>\n```\nbut this is bad link text:\n\n```\n<p>Whales are really awesome creatures. To find more out about whales, <a href=\"whales.html\">click here</a>.</p>\n```\n\n> **Note**: You can find a lot more about link implementation and best practices in our [Creating hyperlinks article](https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks). You can also see some good and bad examples at good-links.html and bad-links.html.\n\n**Form labels are also important for giving you a clue about what you need to enter into each form input**. The following seems like a reasonable enough example:\n\n```\nFill in your name: <input type=\"text\" id=\"name\" name=\"name\">\n```\n\n**However, this is not so useful for disabled users**. **There is nothing in the above example to associate the label unambiguously with the form input and make it clear how to fill it in if you cannot see it**. If you access this with some screen readers, you may only be given a description along the lines of \"edit text.\"\n\nThe following is a much better example:\n\n```\n<div>\n  <label for=\"name\">Fill in your name:</label>\n  <input type=\"text\" id=\"name\" name=\"name\">\n</div>\n```\nWith code like this, **the label will be clearly associated with the input**; the description will be more like \"Fill in your name: edit text.\"\n\n**As an added bonus, in most browsers associating a label with a form input means that you can click the label to select or activate the form element. This gives the input a bigger hit area, making it easier to select.**\n\n> **Note**: You can see some good and bad form examples in good-form.html and bad-form.html.\n\nYou can find a nice explanation of the importance of proper text labels, and how to investigate text label issues using the Firefox Accessibility Inspector, in the following [video](https://youtu.be/YhlAVlfH0rQ)\n\n","references":"- [MDN - HTML - A good basis for accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML)\n","featured_image_url":"https://codersnack.com/assets/images/ux-logo.png","slug":"ux-accessibility-html-2","weblink":"https://codersnack.com/ux-accessibility-html-2","featured_image_preview":{"id":177,"name":"ux-logo.png","hash":"494af5f7c1f7465fabb82e473ad848a3","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/494af5f7c1f7465fabb82e473ad848a3.png","provider":"local","provider_metadata":null,"created_at":"2022-01-27T11:44:14.798Z","updated_at":"2022-01-27T11:44:14.798Z"}},"codersnacks_category":{"id":18,"header":"User Experience","description":"User Experience, Design Tips, Usability, Accessibility, etc","snacks_by_cat_json_filename":"ux.snacks.json","key":"ux","image_url":"https://codersnack.com/assets/images/ux-logo.png","created_at":"2021-10-29T10:12:53.307Z","updated_at":"2022-01-24T16:22:54.663Z","image_preview":{"id":131,"name":"ux-logo.png","hash":"e8ce45f7475b4cf59fb77ef694e0e2a6","sha256":"sK0UTvFTJMNL-mO6JsooVe-EDxLjPcPFB7bre-RlHUU","ext":".png","mime":"image/png","size":158.23,"url":"/uploads/e8ce45f7475b4cf59fb77ef694e0e2a6.png","provider":"local","provider_metadata":null,"created_at":"2021-10-29T11:21:19.027Z","updated_at":"2021-10-29T11:21:19.027Z"}},"title":"UX - Accessibility - HTML 2","created_at":"2022-01-27T11:44:37.510Z","updated_at":"2022-01-27T11:44:37.517Z"}]