[{"id":3,"codersnack":{"id":3,"header":"Factory pattern","created_at":"2019-12-31T19:59:11.102Z","updated_at":"2020-01-04T21:15:18.716Z","explanation":"Factory pattern is a *class-based creational pattern*. It provides a generic interface that delegates the responsibility of object instantiation to its subclasses.\n\nThis pattern is frequently used when we need to manage or **manipulate collections of objects that are different yet have many similar characteristics**.\n\nJavascript Example\n```\nclass BallFactory {\n  constructor() {\n    this.createBall = type => {\n      let ball;\n\n      if (type === \"soccer\" || type === \"football\") {\n        ball = new Football();\n      } else if (type === \"basketball\") {\n        ball = new Basketball();\n      }\n      ball.roll = () => {\n        console.log(`The ${type} is rolling`);\n      };\n\n      return ball;\n    };\n  }\n}\n\nclass Football {\n  constructor() {\n    this._type = \"football\";\n    this.kick = () => {\n      console.log(\"You kicked the football\");\n    };\n  }\n}\n\nclass Basketball {\n  constructor() {\n    this._type = \"basketball\";\n    this.bounce = () => {\n      console.log(\"You bounced the basketball\");\n    };\n  }\n}\n\n// creating objects\nconst factory = new BallFactory();\nconst myFootball = factory.createBall(\"football\");\nconst myBasketball = factory.createBall(\"basketball\");\n\nmyFootball.roll();\nmyBasketball.roll();\n\nmyFootball.kick();\n\nmyBasketball.bounce();\n```","references":"[Medium - Javascript design psatterns](https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15)\n[Codepen example](https://codepen.io/jescacena/project/editor/ZyVyGn)\n[Essential JS design patterns book](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-factory","weblink":"https://codersnack.com/js-design-patterns-factory/","featured_image_preview":{"id":7,"name":"design-patterns.jpg","hash":"69291b42c54b4448af713c010abcaad6","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/69291b42c54b4448af713c010abcaad6.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:59:11.112Z","updated_at":"2019-12-31T19:59:11.112Z"}},"codersnacks_quiz":{"id":4,"question":"In which scenario is useful the factory pattern?","response_valid":"When we need to manipulate collections of objects that are different yet have many similar characteristics","response_invalid1":"When we need to instantiate new objects","response_invalid2":"When we want to use a sort of skeleton of an existing object","created_at":"2019-12-31T20:26:32.040Z","updated_at":"2019-12-31T20:26:32.040Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design patterns - factory - in which scenario ...","created_at":"2019-12-31T20:31:40.962Z","updated_at":"2019-12-31T20:33:39.553Z"},{"id":7,"codersnack":{"id":6,"header":"What is a design pattern?","created_at":"2020-01-05T22:13:45.020Z","updated_at":"2020-01-07T05:57:11.345Z","explanation":"We write code to solve problems. These problems usually have many similarities, and, when trying to solve them, we notice several common patterns. This is where design patterns come in.\n\n> A design pattern is a term used in software engineering for a general, reusable solution to a commonly occurring problem in software design.\n\n*Design patterns are by no means finished solutions*. They only provide us with **approaches or schemes to solve a problem**. The underlying concept of design patterns has been around in the software engineering industry since the very beginning, but they weren’t really so formalised. \n\nDesign patterns are beneficial for various reasons. They are proven solutions that industry veterans have tried and tested. They are solid approaches that solve issues in a widely accepted way and reflect the experience and insights of the industry-leading developers that helped define them. Patterns also **make your code more reusable and readable while speeding up the development process vastly**.\n\n**Design Patterns: Elements of Reusable Object-Oriented Software (1994)** is a software engineering book describing software design patterns. The book was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk.\n\n### Categories of Design Patterns\nDesign patterns are usually categorized into three major groups.\n\n#### Creational Design Patterns\nAs the name suggests, these patterns are for handling object creational mechanisms. A creational design pattern basically solves a problem by **controlling the creation process of an object**.\nIncludes: *Constructor Pattern*, *Factory Pattern*, *Prototype Pattern*, and *Singleton Pattern*.\n\n#### Structural Design Patterns\nThese patterns are concerned with **class and object composition**. They help structure or restructure one or more parts without affecting the entire system. In other words, they help obtain new functionalities without tampering with the existing ones.\nIncludes: *Adapter Pattern*, *Composite Pattern*, *Decorator Pattern,* *Façade Pattern*, *Flyweight Pattern*, and *Proxy Pattern*.\n\n#### Behavioral Design Patterns\nThese patterns are concerned with **improving communication between dissimilar objects**.\nIncludes: *Chain of Responsibility Pattern*, *Command Pattern*, *Iterator Pattern*, *Mediator Pattern*, *Observer Pattern*, *State Pattern*, S*trategy Pattern*, and *Template Pattern*.\n","references":"[Medium - javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15?)\n[Wikipedia - Desgin Patterns](https://en.wikipedia.org/wiki/Design_Patterns)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"design-pattern-what-is","weblink":"https://codersnack.com/what-is-a-design-pattern","featured_image_preview":null},"codersnacks_quiz":{"id":7,"question":"what is the purpose of design patterns?","response_valid":"Being an approach fro solving commonly occurring problem in software design.","response_invalid1":"A guide for visual components","response_invalid2":"Patterns for beginning a project","created_at":"2020-01-06T18:20:24.891Z","updated_at":"2020-01-06T18:20:24.891Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"JS design pattern - what is the purpose","created_at":"2020-01-06T18:21:06.405Z","updated_at":"2020-01-06T18:22:47.371Z"}]