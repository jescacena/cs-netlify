[{"id":3,"codersnack":{"id":3,"header":"Factory pattern","created_at":"2019-12-31T19:59:11.102Z","updated_at":"2020-01-09T11:22:59.461Z","explanation":"Factory pattern is a *class-based creational pattern*. It provides a generic interface that delegates the responsibility of object instantiation to its subclasses.\n\nThis pattern is frequently used when we need to manage or **manipulate collections of objects that are different yet have many similar characteristics**.\n\nJavascript Example\n```\nclass BallFactory {\n  constructor() {\n    this.createBall = type => {\n      let ball;\n\n      if (type === \"soccer\" || type === \"football\") {\n        ball = new Football();\n      } else if (type === \"basketball\") {\n        ball = new Basketball();\n      }\n      ball.roll = () => {\n        console.log(`The ${type} is rolling`);\n      };\n\n      return ball;\n    };\n  }\n}\n\nclass Football {\n  constructor() {\n    this._type = \"football\";\n    this.kick = () => {\n      console.log(\"You kicked the football\");\n    };\n  }\n}\n\nclass Basketball {\n  constructor() {\n    this._type = \"basketball\";\n    this.bounce = () => {\n      console.log(\"You bounced the basketball\");\n    };\n  }\n}\n\n// creating objects\nconst factory = new BallFactory();\nconst myFootball = factory.createBall(\"football\");\nconst myBasketball = factory.createBall(\"basketball\");\n\nmyFootball.roll();\nmyBasketball.roll();\n\nmyFootball.kick();\n\nmyBasketball.bounce();\n```","references":"- [Medium - Javascript design psatterns](https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15)\n- [Codepen example](https://codepen.io/jescacena/project/editor/ZyVyGn)\n- [Essential JS design patterns book](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-factory","weblink":"https://codersnack.com/js-design-patterns-factory/","featured_image_preview":{"id":7,"name":"design-patterns.jpg","hash":"69291b42c54b4448af713c010abcaad6","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/69291b42c54b4448af713c010abcaad6.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:59:11.112Z","updated_at":"2019-12-31T19:59:11.112Z"}},"codersnacks_quiz":{"id":4,"question":"In which scenario is useful the factory pattern?","response_valid":"When we need to manipulate collections of objects that are different yet have many similar characteristics","response_invalid1":"When we need to instantiate new objects","response_invalid2":"When we want to use a sort of skeleton of an existing object","created_at":"2019-12-31T20:26:32.040Z","updated_at":"2019-12-31T20:26:32.040Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design patterns - factory - in which scenario ...","created_at":"2019-12-31T20:31:40.962Z","updated_at":"2019-12-31T20:33:39.553Z"},{"id":7,"codersnack":{"id":6,"header":"What is a design pattern?","created_at":"2020-01-05T22:13:45.020Z","updated_at":"2020-01-20T15:21:15.669Z","explanation":"We write code to solve problems. These problems usually have many similarities, and, when trying to solve them, we notice several common patterns. This is where design patterns come in.\n\n> A design pattern is a term used in software engineering for a general, reusable solution to a commonly occurring problem in software design.\n\n*Design patterns are by no means finished solutions*. They only provide us with **approaches or schemes to solve a problem**. The underlying concept of design patterns has been around in the software engineering industry since the very beginning, but they weren't really so formalised. \n\nDesign patterns are beneficial for various reasons. They are proven solutions that industry veterans have tried and tested. They are solid approaches that solve issues in a widely accepted way and reflect the experience and insights of the industry-leading developers that helped define them. Patterns also **make your code more reusable and readable while speeding up the development process vastly**.\n\n**Design Patterns: Elements of Reusable Object-Oriented Software (1994)** is a software engineering book describing software design patterns. The book was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk.\n\n### Categories of Design Patterns\nDesign patterns are usually categorized into three major groups.\n\n#### Creational Design Patterns\nAs the name suggests, these patterns are for handling object creational mechanisms. A creational design pattern basically solves a problem by **controlling the creation process of an object**.\nIncludes: *Constructor Pattern*, *Factory Pattern*, *Prototype Pattern*, and *Singleton Pattern*.\n\n#### Structural Design Patterns\nThese patterns are concerned with **class and object composition**. They help structure or restructure one or more parts without affecting the entire system. In other words, they help obtain new functionalities without tampering with the existing ones.\nIncludes: *Adapter Pattern*, *Composite Pattern*, *Decorator Pattern,* *Fa√ßade Pattern*, *Flyweight Pattern*, and *Proxy Pattern*.\n\n#### Behavioral Design Patterns\nThese patterns are concerned with **improving communication between dissimilar objects**.\nIncludes: *Chain of Responsibility Pattern*, *Command Pattern*, *Iterator Pattern*, *Mediator Pattern*, *Observer Pattern*, *State Pattern*, S*trategy Pattern*, and *Template Pattern*.\n","references":"- [Medium - javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15?)\n- [Wikipedia - Desgin Patterns](https://en.wikipedia.org/wiki/Design_Patterns)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"design-pattern-what-is","weblink":"https://codersnack.com/what-is-a-design-pattern","featured_image_preview":{"id":13,"name":"design-patterns.jpg","hash":"4f21ae7a28fc41a892d1e97913389dc0","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/4f21ae7a28fc41a892d1e97913389dc0.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-09T20:02:23.437Z","updated_at":"2020-01-09T20:02:23.437Z"}},"codersnacks_quiz":{"id":7,"question":"what is the purpose of design patterns?","response_valid":"Being an approach fro solving commonly occurring problem in software design.","response_invalid1":"A guide for visual components","response_invalid2":"Patterns for beginning a project","created_at":"2020-01-06T18:20:24.891Z","updated_at":"2020-01-06T18:20:24.891Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"JS design pattern - what is the purpose","created_at":"2020-01-06T18:21:06.405Z","updated_at":"2020-01-06T18:22:47.371Z"},{"id":19,"codersnack":{"id":20,"header":"Adapter pattern","created_at":"2020-01-25T18:44:26.680Z","updated_at":"2020-01-25T18:44:26.680Z","explanation":"This is a *structural pattern* where **the interface of one class is translated into another**. \n\nThis pattern **lets classes work together that could not otherwise because of incompatible interfaces**.\n\nThis pattern is **often used to create wrappers for new refactored APIs so that other existing old APIs can still work with them**. This is usually done when new implementations or code refactoring (done for reasons like performance gains) result in a different public API, while the other parts of the system are still using the old API and need to be adapted to work together.\n\nIn this example, we have an old API, i.e. *OldCalculator* class, and a new API, i.e. *NewCalculator* class. The *OldCalculator* class provides an *operation* method for both addition and subtraction, while the *NewCalculator* provides separate methods for addition and subtraction. The Adapter class *CalcAdapterwraps* the *NewCalculator* to add the operation method to the public-facing API while using its own addition and subtraction implementation under the hood.\n\n```\n// old interface\nclass OldCalculator {\n  constructor() {\n    this.operations = function(term1, term2, operation) {\n      switch (operation) {\n        case 'add':\n          return term1 + term2;\n        case 'sub':\n          return term1 - term2;\n        default:\n          return NaN;\n      }\n    };\n  }\n}\n\n// new interface\nclass NewCalculator {\n  constructor() {\n    this.add = function(term1, term2) {\n      return term1 + term2;\n    };\n    this.sub = function(term1, term2) {\n      return term1 - term2;\n    };\n  }\n}\n\n// Adapter Class\nclass CalcAdapter {\n  constructor() {\n    const newCalc = new NewCalculator();\n\n    this.operations = function(term1, term2, operation) {\n      switch (operation) {\n        case 'add':\n          // using the new implementation under the hood\n          return newCalc.add(term1, term2);\n        case 'sub':\n          return newCalc.sub(term1, term2);\n        default:\n          return NaN;\n      }\n    };\n  }\n}\n\n// usage\nconst oldCalc = new OldCalculator();\nconsole.log(oldCalc.operations(10, 5, 'add')); // 15\n\nconst newCalc = new NewCalculator();\nconsole.log(newCalc.add(10, 5)); // 15\n\nconst adaptedCalc = new CalcAdapter();\nconsole.log(adaptedCalc.operations(10, 5, 'add')); // 15;\n``` \n\n\n","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-adapter","weblink":"https://codersnack.com/js-design-patterns-adapter/","featured_image_preview":{"id":27,"name":"design-patterns.jpg","hash":"fad84cf2c3384942b38b3bcc63a096a9","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/fad84cf2c3384942b38b3bcc63a096a9.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T18:44:26.699Z","updated_at":"2020-01-25T18:44:26.699Z"}},"codersnacks_quiz":{"id":19,"question":"Adapter pattern is often used to ...","response_valid":"create wrappers for new refactored APIs so that other existing old APIs can still work with them","response_invalid1":"create services to HTML features","response_invalid2":"connect to remote databases","created_at":"2020-01-25T18:48:13.012Z","updated_at":"2020-01-25T18:48:13.012Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design pattern - adapter pattern","created_at":"2020-01-25T18:48:49.890Z","updated_at":"2020-01-25T18:48:49.896Z"},{"id":20,"codersnack":{"id":21,"header":"Chain of responsibility pattern","created_at":"2020-01-25T18:58:04.124Z","updated_at":"2020-01-25T18:58:04.124Z","explanation":"This is a *behavioural design pattern* that **provides a chain of loosely coupled objects. Each of these objects can choose to act on or handle the request of the client.**\n\n> A good example of the chain of responsibility pattern is the event bubbling in DOM in which an event propagates through a series of nested DOM elements, one of which may have an \"event listener\" attached to listen to and act on the event.\n\nIn this example, we create a class *CumulativeSum*, which can be instantiated with an optional *initialValue*. It has a method *add* that adds the passed value to the sum attribute of the object and returns the object itself to allow chaining of add method calls.\n\n```\nclass CumulativeSum {\n  constructor(intialValue = 0) {\n    this.sum = intialValue;\n  }\n\n  add(value) {\n    this.sum += value;\n    return this;\n  }\n}\n\n// usage\nconst sum1 = new CumulativeSum();\nconsole.log(sum1.add(10).add(2).add(50).sum); // 62\n\n\nconst sum2 = new CumulativeSum(10);\nconsole.log(sum2.add(10).add(20).add(5).sum); // 45\n```\n\nThis is a common pattern that **can be seen in jQuery** as well, where almost any method call on a jQuery object returns a jQuery object so that method calls can be chained together.","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-chain-of-responsibility","weblink":"https://codersnack.com/js-design-patterns-chain-of-responsibility/","featured_image_preview":{"id":28,"name":"design-patterns.jpg","hash":"9947f82cf5154513b9677ce846430007","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/9947f82cf5154513b9677ce846430007.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T18:58:04.135Z","updated_at":"2020-01-25T18:58:04.135Z"}},"codersnacks_quiz":{"id":20,"question":"Chain of responsibility pattern ...","response_valid":"provides a chain of loosely coupled objects. Each of these objects can choose to act on or handle the request of the client.","response_invalid1":"delegates reponsability to another component ","response_invalid2":"spreads multiple calculations in a number of methods","created_at":"2020-01-25T21:28:44.787Z","updated_at":"2020-01-25T21:28:44.787Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design pattern chain of responsibility pattern quiz","created_at":"2020-01-25T21:32:22.148Z","updated_at":"2020-01-25T21:32:22.152Z"},{"id":21,"codersnack":{"id":23,"header":"Constructor pattern","created_at":"2020-01-25T22:08:15.158Z","updated_at":"2020-01-25T22:08:15.158Z","explanation":"This is a *class-based creational design pattern*. **Constructors are special functions that can be used to instantiate new objects** with methods and properties defined by that function.\n\nIt is not one of the classic design patterns. In fact, **it is more of a basic language construct than a pattern** in most object-oriented languages. But in JavaScript, objects can be created on the fly without any constructor functions or ‚Äúclass‚Äù definition. Therefore, I think it is important to lay down the foundation for other patterns to come with this simple one.\n\nIn this example, we define a *Hero* class with attributes like *name* and *specialAbility* and methods like *getDetails*. Then, we instantiate an object *IronMan* by **invoking the constructor method with the new keyword** passing in the values for the respective attributes as arguments.\n\n```\n// traditional Function-based syntax\nfunction Hero(name, specialAbility) {\n  // setting property values\n  this.name = name;\n  this.specialAbility = specialAbility;\n\n  // declaring a method on the object\n  this.getDetails = function() {\n    return this.name + ' can ' + this.specialAbility;\n  };\n}\n\n// ES6 Class syntax\nclass Hero {\n  constructor(name, specialAbility) {\n    // setting property values\n    this._name = name;\n    this._specialAbility = specialAbility;\n\n    // declaring a method on the object\n    this.getDetails = function() {\n      return `${this._name} can ${this._specialAbility}`;\n    };\n  }\n}\n\n// creating new instances of Hero\nconst IronMan = new Hero('Iron Man', 'fly');\n\nconsole.log(IronMan.getDetails()); // Iron Man can fly\n```","references":"- [Medium - Javascript design pattern](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-pattern.jpg","slug":"js-design-patterns-constructor","weblink":"https://codersnack.com/js-design-patterns-constructor/","featured_image_preview":{"id":30,"name":"design-patterns.jpg","hash":"66d9ab0016f344088504da6a21e6e5be","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/66d9ab0016f344088504da6a21e6e5be.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T22:08:15.171Z","updated_at":"2020-01-25T22:08:15.171Z"}},"codersnacks_quiz":{"id":21,"question":"In Javascript , objects can be created ...","response_valid":"on the fly without any constructor functions or ‚Äúclass‚Äù definition. Constructors are special functions that can be used to instantiate new objects","response_invalid1":"only with the constructor method and the new method","response_invalid2":"only through a Factory component","created_at":"2020-01-25T22:36:15.172Z","updated_at":"2020-01-25T22:36:15.172Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern - constructor","created_at":"2020-01-25T22:36:51.510Z","updated_at":"2020-01-25T22:36:51.513Z"},{"id":22,"codersnack":{"id":24,"header":"Composite pattern","created_at":"2020-01-25T22:45:06.053Z","updated_at":"2020-01-25T22:45:06.053Z","explanation":"This is a *structural design pattern* that **composes objects into tree-like structures to represent whole-part hierarchies**. In this pattern, each node in the tree-like structure can be either an individual object or a composed collection of objects. Regardless, each node is treated uniformly.\n\nIt is a bit complex to visualize this pattern. **The easiest way to think about this is with the example of a multi-level menu**. Each node can be a distinct option, or it can be a menu itself, which has multiple options as its child. A node component with children is a composite component, while a node component without any child is a leaf component.\n\nIn this example, we create a base class of *Component* that implements the common functionalities needed and abstracts the other methods needed. The base class also has a static method that utilises *recursion to traverse a composite tree structure made with its subclasses*. Then we create two subclasses extending the base class ‚Äî *Leaf* that does not have any children and *Composite* that can have children‚Äîand hence have methods handling adding, searching, and removing child functionalities. The two subclasses are used to create a composite structure‚Äîa tree, in this case.\n\n```\nclass Component {\n  constructor(name) {\n    this._name = name;\n  }\n\n  getNodeName() {\n    return this._name;\n  }\n\n  // abstract methods that need to be overridden\n  getType() {}\n\n  addChild(component) {}\n\n  removeChildByName(componentName) {}\n\n  removeChildByIndex(index) {}\n\n  getChildByName(componentName) {}\n\n  getChildByIndex(index) {}\n\n  noOfChildren() {}\n\n  static logTreeStructure(root) {\n    let treeStructure = '';\n    function traverse(node, indent = 0) {\n      treeStructure += `${'--'.repeat(indent)}${node.getNodeName()}\\n`;\n      indent++;\n      for (let i = 0, length = node.noOfChildren(); i < length; i++) {\n        traverse(node.getChildByIndex(i), indent);\n      }\n    }\n\n    traverse(root);\n    return treeStructure;\n  }\n}\n\nclass Leaf extends Component {\n  constructor(name) {\n    super(name);\n    this._type = 'Leaf Node';\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  noOfChildren() {\n    return 0;\n  }\n}\n\nclass Composite extends Component {\n  constructor(name) {\n    super(name);\n    this._type = 'Composite Node';\n    this._children = [];\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  addChild(component) {\n    this._children = [...this._children, component];\n  }\n\n  removeChildByName(componentName) {\n    this._children = [...this._children].filter(component => component.getNodeName() !== componentName);\n  }\n\n  removeChildByIndex(index) {\n    this._children = [...this._children.slice(0, index), ...this._children.slice(index + 1)];\n  }\n\n  getChildByName(componentName) {\n    return this._children.find(component => component.name === componentName);\n  }\n\n  getChildByIndex(index) {\n    return this._children[index];\n  }\n\n  noOfChildren() {\n    return this._children.length;\n  }\n}\n\n// usage\nconst tree = new Composite('root');\ntree.addChild(new Leaf('left'));\nconst right = new Composite('right');\ntree.addChild(right);\nright.addChild(new Leaf('right-left'));\nconst rightMid = new Composite('right-middle');\nright.addChild(rightMid);\nright.addChild(new Leaf('right-right'));\nrightMid.addChild(new Leaf('left-end'));\nrightMid.addChild(new Leaf('right-end'));\n\n// log\nconsole.log(Component.logTreeStructure(tree));\n/*\nroot\n--left\n--right\n----right-left\n----right-middle\n------left-end\n------right-end\n----right-right\n*/\n```","references":"- [Medium - Composite pattern](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-pattern.jpg","slug":"js-design-patterns-composite","weblink":"https://codersnack.com/js-design-patterns-composite","featured_image_preview":{"id":31,"name":"design-patterns.jpg","hash":"5437612f09f040e786567232e666fc9f","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/5437612f09f040e786567232e666fc9f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T22:45:06.063Z","updated_at":"2020-01-25T22:45:06.063Z"}},"codersnacks_quiz":{"id":22,"question":"Composite composes ...","response_valid":"objects into tree-like structures to represent whole-part hierarchies","response_invalid1":"multiple form fields in a group","response_invalid2":"all object properties in groups","created_at":"2020-01-25T22:48:20.697Z","updated_at":"2020-01-25T22:48:20.697Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Javascript design patterns","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-04T11:09:18.108Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Composite","created_at":"2020-01-25T22:48:49.122Z","updated_at":"2020-01-25T22:48:49.125Z"}]