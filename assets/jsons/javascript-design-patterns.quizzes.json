[{"id":3,"codersnack":{"id":3,"header":"Factory pattern","created_at":"2019-12-31T19:59:11.102Z","updated_at":"2020-02-20T22:07:14.858Z","explanation":"Factory pattern is a *class-based creational pattern*. It provides a generic interface that delegates the responsibility of object instantiation to its subclasses.\n\nThis pattern is frequently used when we need to manage or **manipulate collections of objects that are different yet have many similar characteristics**.\n\nJavascript Example\n```\nclass BallFactory {\n  constructor() {\n    this.createBall = type => {\n      let ball;\n\n      if (type === \"soccer\" || type === \"football\") {\n        ball = new Football();\n      } else if (type === \"basketball\") {\n        ball = new Basketball();\n      }\n      ball.roll = () => {\n        console.log(`The ${type} is rolling`);\n      };\n\n      return ball;\n    };\n  }\n}\n\nclass Football {\n  constructor() {\n    this._type = \"football\";\n    this.kick = () => {\n      console.log(\"You kicked the football\");\n    };\n  }\n}\n\nclass Basketball {\n  constructor() {\n    this._type = \"basketball\";\n    this.bounce = () => {\n      console.log(\"You bounced the basketball\");\n    };\n  }\n}\n\n// creating objects\nconst factory = new BallFactory();\nconst myFootball = factory.createBall(\"football\");\nconst myBasketball = factory.createBall(\"basketball\");\n\nmyFootball.roll();\nmyBasketball.roll();\n\nmyFootball.kick();\n\nmyBasketball.bounce();\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)\n- [Codepen example](https://codepen.io/jescacena/project/editor/ZyVyGn)\n- [Essential JS design patterns book](https://addyosmani.com/resources/essentialjsdesignpatterns/book/)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-factory","weblink":"https://codersnack.com/js-design-patterns-factory/","featured_image_preview":{"id":7,"name":"design-patterns.jpg","hash":"69291b42c54b4448af713c010abcaad6","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/69291b42c54b4448af713c010abcaad6.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:59:11.112Z","updated_at":"2019-12-31T19:59:11.112Z"}},"codersnacks_quiz":{"id":4,"question":"In which scenario is useful the factory pattern?","response_valid":"When we need to manipulate collections of objects that are different yet have many similar characteristics","response_invalid1":"When we need to instantiate new objects","response_invalid2":"When we want to use a sort of skeleton of an existing object","created_at":"2019-12-31T20:26:32.040Z","updated_at":"2019-12-31T20:26:32.040Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design patterns - factory - in which scenario ...","created_at":"2019-12-31T20:31:40.962Z","updated_at":"2019-12-31T20:33:39.553Z"},{"id":7,"codersnack":{"id":6,"header":"What is a design pattern?","created_at":"2020-01-05T22:13:45.020Z","updated_at":"2020-01-20T15:21:15.669Z","explanation":"We write code to solve problems. These problems usually have many similarities, and, when trying to solve them, we notice several common patterns. This is where design patterns come in.\n\n> A design pattern is a term used in software engineering for a general, reusable solution to a commonly occurring problem in software design.\n\n*Design patterns are by no means finished solutions*. They only provide us with **approaches or schemes to solve a problem**. The underlying concept of design patterns has been around in the software engineering industry since the very beginning, but they weren't really so formalised. \n\nDesign patterns are beneficial for various reasons. They are proven solutions that industry veterans have tried and tested. They are solid approaches that solve issues in a widely accepted way and reflect the experience and insights of the industry-leading developers that helped define them. Patterns also **make your code more reusable and readable while speeding up the development process vastly**.\n\n**Design Patterns: Elements of Reusable Object-Oriented Software (1994)** is a software engineering book describing software design patterns. The book was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, with a foreword by Grady Booch. The book is divided into two parts, with the first two chapters exploring the capabilities and pitfalls of object-oriented programming, and the remaining chapters describing 23 classic software design patterns. The book includes examples in C++ and Smalltalk.\n\n### Categories of Design Patterns\nDesign patterns are usually categorized into three major groups.\n\n#### Creational Design Patterns\nAs the name suggests, these patterns are for handling object creational mechanisms. A creational design pattern basically solves a problem by **controlling the creation process of an object**.\nIncludes: *Constructor Pattern*, *Factory Pattern*, *Prototype Pattern*, and *Singleton Pattern*.\n\n#### Structural Design Patterns\nThese patterns are concerned with **class and object composition**. They help structure or restructure one or more parts without affecting the entire system. In other words, they help obtain new functionalities without tampering with the existing ones.\nIncludes: *Adapter Pattern*, *Composite Pattern*, *Decorator Pattern,* *Fa√ßade Pattern*, *Flyweight Pattern*, and *Proxy Pattern*.\n\n#### Behavioral Design Patterns\nThese patterns are concerned with **improving communication between dissimilar objects**.\nIncludes: *Chain of Responsibility Pattern*, *Command Pattern*, *Iterator Pattern*, *Mediator Pattern*, *Observer Pattern*, *State Pattern*, S*trategy Pattern*, and *Template Pattern*.\n","references":"- [Medium - javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15?)\n- [Wikipedia - Desgin Patterns](https://en.wikipedia.org/wiki/Design_Patterns)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"design-pattern-what-is","weblink":"https://codersnack.com/what-is-a-design-pattern","featured_image_preview":{"id":13,"name":"design-patterns.jpg","hash":"4f21ae7a28fc41a892d1e97913389dc0","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/4f21ae7a28fc41a892d1e97913389dc0.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-09T20:02:23.437Z","updated_at":"2020-01-09T20:02:23.437Z"}},"codersnacks_quiz":{"id":7,"question":"what is the purpose of design patterns?","response_valid":"Being an approach fro solving commonly occurring problem in software design.","response_invalid1":"A guide for visual components","response_invalid2":"Patterns for beginning a project","created_at":"2020-01-06T18:20:24.891Z","updated_at":"2020-01-06T18:20:24.891Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"JS design pattern - what is the purpose","created_at":"2020-01-06T18:21:06.405Z","updated_at":"2020-01-06T18:22:47.371Z"},{"id":19,"codersnack":{"id":20,"header":"Adapter pattern","created_at":"2020-01-25T18:44:26.680Z","updated_at":"2020-02-20T22:03:57.444Z","explanation":"This is a *structural pattern* where **the interface of one class is translated into another**. \n\nThis pattern **lets classes work together that could not otherwise because of incompatible interfaces**.\n\nThis pattern is **often used to create wrappers for new refactored APIs so that other existing old APIs can still work with them**. This is usually done when new implementations or code refactoring (done for reasons like performance gains) result in a different public API, while the other parts of the system are still using the old API and need to be adapted to work together.\n\nIn this example, we have an old API, i.e. *OldCalculator* class, and a new API, i.e. *NewCalculator* class. The *OldCalculator* class provides an *operation* method for both addition and subtraction, while the *NewCalculator* provides separate methods for addition and subtraction. The Adapter class *CalcAdapterwraps* the *NewCalculator* to add the operation method to the public-facing API while using its own addition and subtraction implementation under the hood.\n\n```\n// old interface\nclass OldCalculator {\n  constructor() {\n    this.operations = function(term1, term2, operation) {\n      switch (operation) {\n        case 'add':\n          return term1 + term2;\n        case 'sub':\n          return term1 - term2;\n        default:\n          return NaN;\n      }\n    };\n  }\n}\n\n// new interface\nclass NewCalculator {\n  constructor() {\n    this.add = function(term1, term2) {\n      return term1 + term2;\n    };\n    this.sub = function(term1, term2) {\n      return term1 - term2;\n    };\n  }\n}\n\n// Adapter Class\nclass CalcAdapter {\n  constructor() {\n    const newCalc = new NewCalculator();\n\n    this.operations = function(term1, term2, operation) {\n      switch (operation) {\n        case 'add':\n          // using the new implementation under the hood\n          return newCalc.add(term1, term2);\n        case 'sub':\n          return newCalc.sub(term1, term2);\n        default:\n          return NaN;\n      }\n    };\n  }\n}\n\n// usage\nconst oldCalc = new OldCalculator();\nconsole.log(oldCalc.operations(10, 5, 'add')); // 15\n\nconst newCalc = new NewCalculator();\nconsole.log(newCalc.add(10, 5)); // 15\n\nconst adaptedCalc = new CalcAdapter();\nconsole.log(adaptedCalc.operations(10, 5, 'add')); // 15;\n``` \n\n\n","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-adapter","weblink":"https://codersnack.com/js-design-patterns-adapter/","featured_image_preview":{"id":27,"name":"design-patterns.jpg","hash":"fad84cf2c3384942b38b3bcc63a096a9","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/fad84cf2c3384942b38b3bcc63a096a9.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T18:44:26.699Z","updated_at":"2020-01-25T18:44:26.699Z"}},"codersnacks_quiz":{"id":19,"question":"Adapter pattern is often used to ...","response_valid":"create wrappers for new refactored APIs so that other existing old APIs can still work with them","response_invalid1":"create services to HTML features","response_invalid2":"connect to remote databases","created_at":"2020-01-25T18:48:13.012Z","updated_at":"2020-01-25T18:48:13.012Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design pattern - adapter pattern","created_at":"2020-01-25T18:48:49.890Z","updated_at":"2020-01-25T18:48:49.896Z"},{"id":20,"codersnack":{"id":21,"header":"Chain of responsibility pattern","created_at":"2020-01-25T18:58:04.124Z","updated_at":"2020-02-20T22:06:05.787Z","explanation":"This is a *behavioural design pattern* that **provides a chain of loosely coupled objects. Each of these objects can choose to act on or handle the request of the client.**\n\n> A good example of the chain of responsibility pattern is the event bubbling in DOM in which an event propagates through a series of nested DOM elements, one of which may have an \"event listener\" attached to listen to and act on the event.\n\nIn this example, we create a class *CumulativeSum*, which can be instantiated with an optional *initialValue*. It has a method *add* that adds the passed value to the sum attribute of the object and returns the object itself to allow chaining of add method calls.\n\n```\nclass CumulativeSum {\n  constructor(intialValue = 0) {\n    this.sum = intialValue;\n  }\n\n  add(value) {\n    this.sum += value;\n    return this;\n  }\n}\n\n// usage\nconst sum1 = new CumulativeSum();\nconsole.log(sum1.add(10).add(2).add(50).sum); // 62\n\n\nconst sum2 = new CumulativeSum(10);\nconsole.log(sum2.add(10).add(20).add(5).sum); // 45\n```\n\nThis is a common pattern that **can be seen in jQuery** as well, where almost any method call on a jQuery object returns a jQuery object so that method calls can be chained together.","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-chain-of-responsibility","weblink":"https://codersnack.com/js-design-patterns-chain-of-responsibility/","featured_image_preview":{"id":28,"name":"design-patterns.jpg","hash":"9947f82cf5154513b9677ce846430007","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/9947f82cf5154513b9677ce846430007.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T18:58:04.135Z","updated_at":"2020-01-25T18:58:04.135Z"}},"codersnacks_quiz":{"id":20,"question":"Chain of responsibility pattern ...","response_valid":"provides a chain of loosely coupled objects. Each of these objects can choose to act on or handle the request of the client.","response_invalid1":"delegates reponsability to another component ","response_invalid2":"spreads multiple calculations in a number of methods","created_at":"2020-01-25T21:28:44.787Z","updated_at":"2020-01-25T21:28:44.787Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design pattern chain of responsibility pattern quiz","created_at":"2020-01-25T21:32:22.148Z","updated_at":"2020-01-25T21:32:22.152Z"},{"id":21,"codersnack":{"id":23,"header":"Constructor pattern","created_at":"2020-01-25T22:08:15.158Z","updated_at":"2020-02-20T22:06:32.746Z","explanation":"This is a *class-based creational design pattern*. **Constructors are special functions that can be used to instantiate new objects** with methods and properties defined by that function.\n\nIt is not one of the classic design patterns. In fact, **it is more of a basic language construct than a pattern** in most object-oriented languages. But in JavaScript, objects can be created on the fly without any constructor functions or \"class\" definition. Therefore, I think it is important to lay down the foundation for other patterns to come with this simple one.\n\nIn this example, we define a *Hero* class with attributes like *name* and *specialAbility* and methods like *getDetails*. Then, we instantiate an object *IronMan* by **invoking the constructor method with the new keyword** passing in the values for the respective attributes as arguments.\n\n```\n// traditional Function-based syntax\nfunction Hero(name, specialAbility) {\n  // setting property values\n  this.name = name;\n  this.specialAbility = specialAbility;\n\n  // declaring a method on the object\n  this.getDetails = function() {\n    return this.name + ' can ' + this.specialAbility;\n  };\n}\n\n// ES6 Class syntax\nclass Hero {\n  constructor(name, specialAbility) {\n    // setting property values\n    this._name = name;\n    this._specialAbility = specialAbility;\n\n    // declaring a method on the object\n    this.getDetails = function() {\n      return `${this._name} can ${this._specialAbility}`;\n    };\n  }\n}\n\n// creating new instances of Hero\nconst IronMan = new Hero('Iron Man', 'fly');\n\nconsole.log(IronMan.getDetails()); // Iron Man can fly\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-pattern.jpg","slug":"js-design-patterns-constructor","weblink":"https://codersnack.com/js-design-patterns-constructor/","featured_image_preview":{"id":30,"name":"design-patterns.jpg","hash":"66d9ab0016f344088504da6a21e6e5be","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/66d9ab0016f344088504da6a21e6e5be.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T22:08:15.171Z","updated_at":"2020-01-25T22:08:15.171Z"}},"codersnacks_quiz":{"id":21,"question":"In Javascript , objects can be created ...","response_valid":"on the fly without any constructor functions or ‚Äúclass‚Äù definition. Constructors are special functions that can be used to instantiate new objects","response_invalid1":"only with the constructor method and the new method","response_invalid2":"only through a Factory component","created_at":"2020-01-25T22:36:15.172Z","updated_at":"2020-01-25T22:36:15.172Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern - constructor","created_at":"2020-01-25T22:36:51.510Z","updated_at":"2020-01-25T22:36:51.513Z"},{"id":22,"codersnack":{"id":24,"header":"Composite pattern","created_at":"2020-01-25T22:45:06.053Z","updated_at":"2020-02-20T22:06:23.966Z","explanation":"This is a *structural design pattern* that **composes objects into tree-like structures to represent whole-part hierarchies**. In this pattern, each node in the tree-like structure can be either an individual object or a composed collection of objects. Regardless, each node is treated uniformly.\n\nIt is a bit complex to visualize this pattern. **The easiest way to think about this is with the example of a multi-level menu**. Each node can be a distinct option, or it can be a menu itself, which has multiple options as its child. A node component with children is a composite component, while a node component without any child is a leaf component.\n\nIn this example, we create a base class of *Component* that implements the common functionalities needed and abstracts the other methods needed. The base class also has a static method that utilises *recursion to traverse a composite tree structure made with its subclasses*. Then we create two subclasses extending the base class , *Leaf* that does not have any children and *Composite* that can have children, and hence have methods handling adding, searching, and removing child functionalities. The two subclasses are used to create a composite structurem, a tree, in this case.\n\n```\nclass Component {\n  constructor(name) {\n    this._name = name;\n  }\n\n  getNodeName() {\n    return this._name;\n  }\n\n  // abstract methods that need to be overridden\n  getType() {}\n\n  addChild(component) {}\n\n  removeChildByName(componentName) {}\n\n  removeChildByIndex(index) {}\n\n  getChildByName(componentName) {}\n\n  getChildByIndex(index) {}\n\n  noOfChildren() {}\n\n  static logTreeStructure(root) {\n    let treeStructure = '';\n    function traverse(node, indent = 0) {\n      treeStructure += `${'--'.repeat(indent)}${node.getNodeName()}\\n`;\n      indent++;\n      for (let i = 0, length = node.noOfChildren(); i < length; i++) {\n        traverse(node.getChildByIndex(i), indent);\n      }\n    }\n\n    traverse(root);\n    return treeStructure;\n  }\n}\n\nclass Leaf extends Component {\n  constructor(name) {\n    super(name);\n    this._type = 'Leaf Node';\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  noOfChildren() {\n    return 0;\n  }\n}\n\nclass Composite extends Component {\n  constructor(name) {\n    super(name);\n    this._type = 'Composite Node';\n    this._children = [];\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  addChild(component) {\n    this._children = [...this._children, component];\n  }\n\n  removeChildByName(componentName) {\n    this._children = [...this._children].filter(component => component.getNodeName() !== componentName);\n  }\n\n  removeChildByIndex(index) {\n    this._children = [...this._children.slice(0, index), ...this._children.slice(index + 1)];\n  }\n\n  getChildByName(componentName) {\n    return this._children.find(component => component.name === componentName);\n  }\n\n  getChildByIndex(index) {\n    return this._children[index];\n  }\n\n  noOfChildren() {\n    return this._children.length;\n  }\n}\n\n// usage\nconst tree = new Composite('root');\ntree.addChild(new Leaf('left'));\nconst right = new Composite('right');\ntree.addChild(right);\nright.addChild(new Leaf('right-left'));\nconst rightMid = new Composite('right-middle');\nright.addChild(rightMid);\nright.addChild(new Leaf('right-right'));\nrightMid.addChild(new Leaf('left-end'));\nrightMid.addChild(new Leaf('right-end'));\n\n// log\nconsole.log(Component.logTreeStructure(tree));\n/*\nroot\n--left\n--right\n----right-left\n----right-middle\n------left-end\n------right-end\n----right-right\n*/\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-pattern.jpg","slug":"js-design-patterns-composite","weblink":"https://codersnack.com/js-design-patterns-composite","featured_image_preview":{"id":31,"name":"design-patterns.jpg","hash":"5437612f09f040e786567232e666fc9f","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/5437612f09f040e786567232e666fc9f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-25T22:45:06.063Z","updated_at":"2020-01-25T22:45:06.063Z"}},"codersnacks_quiz":{"id":22,"question":"Composite composes ...","response_valid":"objects into tree-like structures to represent whole-part hierarchies","response_invalid1":"multiple form fields in a group","response_invalid2":"all object properties in groups","created_at":"2020-01-25T22:48:20.697Z","updated_at":"2020-01-25T22:48:20.697Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Composite","created_at":"2020-01-25T22:48:49.122Z","updated_at":"2020-01-25T22:48:49.125Z"},{"id":23,"codersnack":{"id":25,"header":"Prototype pattern","created_at":"2020-01-28T09:23:49.527Z","updated_at":"2020-01-30T22:49:30.366Z","explanation":"This pattern is an *object-based creational design pattern*. In this, **we use a sort of a \"skeleton\" of an existing object to create or instantiate new objects**.\n\nThis pattern is specifically important and beneficial to JavaScript because it **utilizes prototypal inheritance instead of a classic object-oriented inheritance**. Hence, it plays to JavaScript's strength and has native support.\n\nIn this **example**, we have a car object that we use as the prototype to create another object myCar with **JavaScript's Object.create** feature and define an extra property owner on the new object.\n\n```\n// using Object.create as was recommended by ES5 standard\nconst car = {\n  noOfWheels: 4,\n  start() {\n    return 'started';\n  },\n  stop() {\n    return 'stopped';\n  },\n};\n\n// Object.create(proto[, propertiesObject])\n\nconst myCar = Object.create(car, { owner: { value: 'John' } });\n\nconsole.log(myCar.__proto__ === car); // true\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-prototype","weblink":"https://codersnack.com/js-design-patterns-prototype/","featured_image_preview":{"id":32,"name":"design-patterns.jpg","hash":"f6f151014e074a64812984c851273e5e","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/f6f151014e074a64812984c851273e5e.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-28T09:23:49.546Z","updated_at":"2020-01-28T09:23:49.546Z"}},"codersnacks_quiz":{"id":23,"question":"Prototype pattern ...","response_valid":"use a sort of a ‚Äúskeleton‚Äù of an existing object to create or instantiate new objects","response_invalid1":"add new capabilities to Javascript primitive types","response_invalid2":"create an object marked as deprecated","created_at":"2020-01-28T09:27:33.359Z","updated_at":"2020-01-28T09:27:33.359Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Prototype pattern ","created_at":"2020-01-28T09:28:13.739Z","updated_at":"2020-01-28T09:28:13.742Z"},{"id":24,"codersnack":{"id":26,"header":"Decorator pattern","created_at":"2020-01-28T09:33:50.266Z","updated_at":"2020-02-20T22:06:43.486Z","explanation":"This is also a *structural design pattern* that **focuses on the ability to add behaviour or functionalities to existing classes dynamically**. It is another viable alternative to sub-classing.\n\nThe decorator type behaviour is very easy to implement in JavaScript because **JavaScript allows us to add methods and properties to object dynamically**. The simplest approach would be to just add a property to an object, but it will not be efficiently reusable.\n\nIn this **example**, we create a *Book* class. We further create two decorator functions that accept a book object and return a \"decorated\" book object, *giftWrap* that adds one new attribute and one new function and *hardbindBook* that adds one new attribute and edits the value of one existing attribute.\n\n```\nclass Book {\n  constructor(title, author, price) {\n    this._title = title;\n    this._author = author;\n    this.price = price;\n  }\n\n  getDetails() {\n    return `${this._title} by ${this._author}`;\n  }\n}\n\n// decorator 1\nfunction giftWrap(book) {\n  book.isGiftWrapped = true;\n  book.unwrap = function() {\n    return `Unwrapped ${book.getDetails()}`;\n  };\n\n  return book;\n}\n\n// decorator 2\nfunction hardbindBook(book) {\n  book.isHardbound = true;\n  book.price += 5;\n  return book;\n}\n\n// usage\nconst alchemist = giftWrap(new Book('The Alchemist', 'Paulo Coelho', 10));\n\nconsole.log(alchemist.isGiftWrapped); // true\nconsole.log(alchemist.unwrap()); // 'Unwrapped The Alchemist by Paulo Coelho'\n\nconst inferno = hardbindBook(new Book('Inferno', 'Dan Brown', 15));\n\nconsole.log(inferno.isHardbound); // true\nconsole.log(inferno.price); // 20\n```\n","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-decorator","weblink":"https://codersnack.com/js-design-patterns-decorator/","featured_image_preview":{"id":33,"name":"design-patterns.jpg","hash":"0c80d5fbd2114f82b7567963c7f2528d","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/0c80d5fbd2114f82b7567963c7f2528d.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-28T09:33:50.278Z","updated_at":"2020-01-28T09:33:50.278Z"}},"codersnacks_quiz":{"id":24,"question":"What decorator pattern focuses on?","response_valid":"the ability to add behaviour or functionalities to existing classes dynamically","response_invalid1":"the creation of some style fixes in an object","response_invalid2":"the connectivity with other objects","created_at":"2020-01-28T09:37:07.841Z","updated_at":"2020-01-28T09:37:07.841Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"js design pattern decorator what focus on","created_at":"2020-01-28T09:37:51.508Z","updated_at":"2020-01-28T09:37:51.510Z"},{"id":25,"codersnack":{"id":27,"header":"Command pattern","created_at":"2020-01-28T09:45:59.277Z","updated_at":"2020-02-20T22:06:14.852Z","explanation":"This is a *behavioural design pattern* that **aims to encapsulate actions or operations as objects**. This pattern allows *loose coupling of systems and classes* by separating the objects that request an operation or invoke a method from the ones that execute or process the actual implementation.\n\nThe clipboard interaction API somewhat resembles the command pattern. If you are a **Redux** user, you have already come across the command pattern. The actions that allow the awesome **time-travel debugging feature are nothing but encapsulated operations that can be tracked to redo or undo operations**. Hence, time-travelling made possible.\n\nIn this **example**, we have a class called *SpecialMath* that has multiple methods and a *Command* class that encapsulates commands that are to be executed on its subject, i.e. an object of the *SpecialMath* class. The *Command* class also keeps track of all the commands executed, which can be used to extend its functionality to include undo and redo type operations.\n\n```\nclass SpecialMath {\n  constructor(num) {\n    this._num = num;\n  }\n\n  square() {\n    return this._num ** 2;\n  }\n\n  cube() {\n    return this._num ** 3;\n  }\n\n  squareRoot() {\n    return Math.sqrt(this._num);\n  }\n}\n\nclass Command {\n  constructor(subject) {\n    this._subject = subject;\n    this.commandsExecuted = [];\n  }\n  execute(command) {\n    this.commandsExecuted.push(command);\n    return this._subject[command]();\n  }\n}\n\n// usage\nconst x = new Command(new SpecialMath(5));\nx.execute('square');\nx.execute('cube');\n\nconsole.log(x.commandsExecuted); // ['square', 'cube']\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-command","weblink":"https://codersnack.com/js-design-patterns-command/","featured_image_preview":{"id":34,"name":"design-patterns.jpg","hash":"0ce875552cf84ad2be59c4f77a0c17e1","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/0ce875552cf84ad2be59c4f77a0c17e1.jpg","provider":"local","provider_metadata":null,"created_at":"2020-01-28T09:45:59.323Z","updated_at":"2020-01-28T09:45:59.323Z"}},"codersnacks_quiz":{"id":25,"question":"Command pattern ...","response_valid":"encapsulates actions or operations as objects and also keeps track of all the commands executed","response_invalid1":"add runnable features to an object","response_invalid2":"prints out object's info on terminal","created_at":"2020-01-28T09:54:42.771Z","updated_at":"2020-01-28T09:54:42.771Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern command pattern","created_at":"2020-01-28T09:55:07.686Z","updated_at":"2020-01-28T09:55:07.693Z"},{"id":32,"codersnack":{"id":35,"header":"Singleton pattern","created_at":"2020-02-02T06:07:03.969Z","updated_at":"2020-02-02T07:13:04.247Z","explanation":"Singleton is a special *creational design pattern* in which **only one instance of a class can exist**. It works like this: **if no instance of the singleton class exists then a new instance is created and returned, but if an instance already exists, then the reference to the existing instance is returned.**\n\n**A perfect real-life example would be that of mongoose** (the famous Node.js ODM library for MongoDB). It utilizes the singleton pattern.\n\nIn this **example**, we have a *Database* class that is a singleton. First, we create an object mongo by using the *new* operator to invoke the *Database* class constructor. This time an object is instantiated because none already exists. The second time, when we create the *mysql* object, no new object is instantiated but instead, the reference to the object that was instantiated earlier, i.e. the *mongo* object, is returned.\n\n```\nclass Database {\n  constructor(data) {\n    if (Database.exists) {\n      return Database.instance;\n    }\n    this._data = data;\n    Database.instance = this;\n    Database.exists = true;\n    return this;\n  }\n\n  getData() {\n    return this._data;\n  }\n\n  setData(data) {\n    this._data = data;\n  }\n}\n\n// usage\nconst mongo = new Database('mongo');\nconsole.log(mongo.getData()); // mongo\n\nconst mysql = new Database('mysql');\nconsole.log(mysql.getData()); // mongo\n\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-singleton","weblink":"https://codersnack.com/js-design-patterns-singleton/","featured_image_preview":{"id":45,"name":"design-patterns.jpg","hash":"93568ad1630347f8b5bb528e2e7f49b7","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/93568ad1630347f8b5bb528e2e7f49b7.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-02T06:07:03.995Z","updated_at":"2020-02-02T06:07:03.995Z"}},"codersnacks_quiz":{"id":32,"question":"With a Singleton pattern ... ","response_valid":"only one instance of a class can exist","response_invalid1":"can get simplified your class","response_invalid2":"only can have one public property","created_at":"2020-02-02T06:10:58.635Z","updated_at":"2020-02-02T06:10:58.635Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Singleton With singleton","created_at":"2020-02-02T06:11:53.934Z","updated_at":"2020-02-02T06:11:53.937Z"},{"id":33,"codersnack":{"id":36,"header":"Facade Pattern","created_at":"2020-02-02T06:24:53.248Z","updated_at":"2020-02-20T22:06:51.983Z","explanation":"This is a *structural design pattern* that is widely used in the JavaScript libraries. It is **used to provide a unified and simpler, public-facing interface for ease of use that shields away from the complexities of its consisting subsystems or subclasses**.\n\nThe use of this pattern is *very common in libraries like jQuery*.\n\nIn this **example**, we create a public facing *API* with the class *ComplaintRegistry*. It exposes only one method to be used by the client, i.e. *registerComplaint*. It internally handles instantiating required objects of either *ProductComplaint* or *ServiceComplaint* based on the *type* argument. It also handles all the other complex functionalities like generating a unique ID, storing the complaint in memory, etc. But, all these complexities are hidden away using the *fa√ßade pattern*.\n\n```\nlet currentId = 0;\n\nclass ComplaintRegistry {\n  registerComplaint(customer, type, details) {\n    const id = ComplaintRegistry._uniqueIdGenerator();\n    let registry;\n    if (type === 'service') {\n      registry = new ServiceComplaints();\n    } else {\n      registry = new ProductComplaints();\n    }\n    return registry.addComplaint({ id, customer, details });\n  }\n\n  static _uniqueIdGenerator() {\n    return ++currentId;\n  }\n}\n\nclass Complaints {\n  constructor() {\n    this.complaints = [];\n  }\n\n  addComplaint(complaint) {\n    this.complaints.push(complaint);\n    return this.replyMessage(complaint);\n  }\n\n  getComplaint(id) {\n    return this.complaints.find(complaint => complaint.id === id);\n  }\n\n  replyMessage(complaint) {}\n}\n\nclass ProductComplaints extends Complaints {\n  constructor() {\n    super();\n    if (ProductComplaints.exists) {\n      return ProductComplaints.instance;\n    }\n    ProductComplaints.instance = this;\n    ProductComplaints.exists = true;\n    return this;\n  }\n\n  replyMessage({ id, customer, details }) {\n    return `Complaint No. ${id} reported by ${customer} regarding ${details} have been filed with the Products Complaint Department. Replacement/Repairment of the product as per terms and conditions will be carried out soon.`;\n  }\n}\n\nclass ServiceComplaints extends Complaints {\n  constructor() {\n    super();\n    if (ServiceComplaints.exists) {\n      return ServiceComplaints.instance;\n    }\n    ServiceComplaints.instance = this;\n    ServiceComplaints.exists = true;\n    return this;\n  }\n\n  replyMessage({ id, customer, details }) {\n    return `Complaint No. ${id} reported by ${customer} regarding ${details} have been filed with the Service Complaint Department. The issue will be resolved or the purchase will be refunded as per terms and conditions.`;\n  }\n}\n\n// usage\nconst registry = new ComplaintRegistry();\n\nconst reportService = registry.registerComplaint('Martha', 'service', 'availability');\n// 'Complaint No. 1 reported by Martha regarding availability have been filed with the Service Complaint Department. The issue will be resolved or the purchase will be refunded as per terms and conditions.'\n\nconst reportProduct = registry.registerComplaint('Jane', 'product', 'faded color');\n// 'Complaint No. 2 reported by Jane regarding faded color have been filed with the Products Complaint Department. Replacement/Repairment of the product as per terms and conditions will be carried out soon.'\n\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-facade","weblink":"https://codersnack.com/js-design-patterns-facade/","featured_image_preview":{"id":46,"name":"design-patterns.jpg","hash":"e1248e70562340be9883dc28d53cf61b","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/e1248e70562340be9883dc28d53cf61b.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-02T06:24:53.260Z","updated_at":"2020-02-02T06:24:53.260Z"}},"codersnacks_quiz":{"id":33,"question":"Facade pattern provides ...","response_valid":"a unified and simpler, public-facing interface for ease of use that shields away from the complexities of its consisting subsystems or subclasses","response_invalid1":"a security wrapper for malicious software","response_invalid2":"a way of grouping related components","created_at":"2020-02-02T06:27:34.028Z","updated_at":"2020-02-02T06:27:34.028Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern facade provides","created_at":"2020-02-02T06:28:05.593Z","updated_at":"2020-02-02T06:28:05.610Z"},{"id":34,"codersnack":{"id":37,"header":"Iterator pattern","created_at":"2020-02-02T06:39:25.785Z","updated_at":"2020-02-20T22:07:32.750Z","explanation":"It is a *behavioural design pattern* that **provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.**\n\n**Iterators have a special kind of behaviour where we step through an ordered set of values one at a time by calling *next()* until we reach the end.** The introduction of *Iterator and Generators in ES6 *made the implementation of the iterator pattern extremely straightforward.\n\nWe have **two examples** below. First, one *IteratorClass* uses iterator spec, while the other one *iteratorUsingGenerator* uses generator functions.\n\nThe **Symbol.iterator** ( Symbol: a new kind of primitive data type) is used to specify the default *iterator* for an object. It must be defined for a *collection* to be able to use the *for...of looping* construct. In the first example, we define the *constructor* to store some collection of data and then define *Symbol.iterator,* which returns an object with *next* method for iteration.\n\nFor the second case, we define a *generator function* passing it an array of data and returning its elements iteratively using *next* and *yield*. A *generator* function is a special type of function that works as a *factory* for *iterators* and can explicitly maintain its own internal state and yield values iteratively. It can pause and resume its own execution cycle.\n\n```\n// using Iterator\nclass IteratorClass {\n  constructor(data) {\n    this.index = 0;\n    this.data = data;\n  }\n\n  [Symbol.iterator]() {\n    return {\n      next: () => {\n        if (this.index < this.data.length) {\n          return { value: this.data[this.index++], done: false };\n        } else {\n          this.index = 0; // to reset iteration status\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n\n// using Generator\nfunction* iteratorUsingGenerator(collection) {\n  var nextIndex = 0;\n\n  while (nextIndex < collection.length) {\n    yield collection[nextIndex++];\n  }\n}\n\n// usage\nconst gen = iteratorUsingGenerator(['Hi', 'Hello', 'Bye']);\n\nconsole.log(gen.next().value); // 'Hi'\nconsole.log(gen.next().value); // 'Hello'\nconsole.log(gen.next().value); // 'Bye'\n\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-iterator","weblink":"https://codersnack.com/js-design-patterns-iterator/","featured_image_preview":{"id":47,"name":"design-patterns.jpg","hash":"76dc19b0492244cc83e1020a9ef3fc63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/76dc19b0492244cc83e1020a9ef3fc63.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-02T06:39:25.799Z","updated_at":"2020-02-02T06:39:25.799Z"}},"codersnacks_quiz":{"id":34,"question":"With Iterator pattern ...","response_valid":"provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.","response_invalid1":"runs a loop over the class properties","response_invalid2":"prepares a component to be looped","created_at":"2020-02-02T06:44:09.245Z","updated_at":"2020-02-02T06:44:09.245Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Iterator With","created_at":"2020-02-02T06:44:52.534Z","updated_at":"2020-02-02T06:44:52.538Z"},{"id":37,"codersnack":{"id":40,"header":"Flyweight Pattern","created_at":"2020-02-03T16:33:19.221Z","updated_at":"2020-02-20T22:07:23.310Z","explanation":"This is a *structural design pattern* focused on **efficient data sharing through fine-grained objects**. It is used for efficiency and **memory conservation purposes**.\n\nThis pattern can be used for any kind of **caching purposes**. In fact, modern browsers use a variant of a flyweight pattern to prevent loading the same images twice.\n\nIn this **example**, we create a fine-grained flyweight class *Icecream* for sharing data regarding ice-cream flavours and a factory class *IcecreamFactory* to create those flyweight objects. For memory conservation, the **objects are recycled if the same object is instantiated twice**. This is a simple example of flyweight implementation.\n\n```\n// flyweight class\nclass Icecream {\n  constructor(flavour, price) {\n    this.flavour = flavour;\n    this.price = price;\n  }\n}\n\n// factory for flyweight objects\nclass IcecreamFactory {\n  constructor() {\n    this._icecreams = [];\n  }\n\n  createIcecream(flavour, price) {\n    let icecream = this.getIcecream(flavour);\n    if (icecream) {\n      return icecream;\n    } else {\n      const newIcecream = new Icecream(flavour, price);\n      this._icecreams.push(newIcecream);\n      return newIcecream;\n    }\n  }\n\n  getIcecream(flavour) {\n    return this._icecreams.find(icecream => icecream.flavour === flavour);\n  }\n}\n\n// usage\nconst factory = new IcecreamFactory();\n\nconst chocoVanilla = factory.createIcecream('chocolate and vanilla', 15);\nconst vanillaChoco = factory.createIcecream('chocolate and vanilla', 15);\n\n// reference to the same object\nconsole.log(chocoVanilla === vanillaChoco); // true\n```","references":"- [Medium - Javascript design patterns by Soumyajit Pathak](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-flyweight","weblink":"https://codersnack.com/js-design-patterns-flyweight/","featured_image_preview":{"id":51,"name":"design-patterns.jpg","hash":"5d689cfc06df48e7a7bceb944a1f4f3f","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/5d689cfc06df48e7a7bceb944a1f4f3f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-03T16:33:19.236Z","updated_at":"2020-02-03T16:33:19.236Z"}},"codersnacks_quiz":{"id":37,"question":"What purpose Flyweight pattern is used for?","response_valid":"For caching purposes","response_invalid1":"For hot reloading","response_invalid2":"For handle async calls on the fly","created_at":"2020-02-03T16:36:18.019Z","updated_at":"2020-02-03T16:36:18.019Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern flyweight what is used for","created_at":"2020-02-03T16:36:54.825Z","updated_at":"2020-02-03T16:36:54.829Z"},{"id":38,"codersnack":{"id":41,"header":"Mediator pattern","created_at":"2020-02-03T16:42:11.460Z","updated_at":"2020-02-03T16:42:11.460Z","explanation":"It is a *behavioural design pattern* that encapsulates how a set of objects interact with each other. It **provides the central authority over a group of objects by promoting loose coupling, keeping objects from referring to each other explicitly**.\n\nIn this **example**, we have *TrafficTower* as *Mediator* that controls the way *Airplane* objects interact with each other. All the *Airplane* objects register themselves with a *TrafficTower* object, and it is the mediator class object that handles how an *Airplane* object receives coordinates data of all the other *Airplane* objects.\n\n```\nclass TrafficTower {\n  constructor() {\n    this._airplanes = [];\n  }\n\n  register(airplane) {\n    this._airplanes.push(airplane);\n    airplane.register(this);\n  }\n\n  requestCoordinates(airplane) {\n    return this._airplanes.filter(plane => airplane !== plane).map(plane => plane.coordinates);\n  }\n}\n\nclass Airplane {\n  constructor(coordinates) {\n    this.coordinates = coordinates;\n    this.trafficTower = null;\n  }\n\n  register(trafficTower) {\n    this.trafficTower = trafficTower;\n  }\n\n  requestCoordinates() {\n    if (this.trafficTower) return this.trafficTower.requestCoordinates(this);\n    return null;\n  }\n}\n\n// usage\nconst tower = new TrafficTower();\n\nconst airplanes = [new Airplane(10), new Airplane(20), new Airplane(30)];\nairplanes.forEach(airplane => {\n  tower.register(airplane);\n});\n\nconsole.log(airplanes.map(airplane => airplane.requestCoordinates())) \n// [[20, 30], [10, 30], [10, 20]]\n\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-mediator","weblink":"https://codersnack.com/js-design-patterns-mediator/","featured_image_preview":{"id":52,"name":"design-patterns.jpg","hash":"2f08136473174cd79c07141847074a29","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/2f08136473174cd79c07141847074a29.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-03T16:42:11.479Z","updated_at":"2020-02-03T16:42:11.479Z"}},"codersnacks_quiz":{"id":38,"question":"Mediator pattern provides","response_valid":"the central authority over a group of objects by promoting loose coupling, keeping objects from referring to each other explicitly","response_invalid1":"a bridge between a third party component and your app","response_invalid2":"a wrapper for hide implementation details to external modules","created_at":"2020-02-04T09:54:44.075Z","updated_at":"2020-02-04T09:54:44.075Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern mediator provides","created_at":"2020-02-04T09:55:28.134Z","updated_at":"2020-02-04T09:55:28.137Z"},{"id":39,"codersnack":{"id":42,"header":"Proxy pattern","created_at":"2020-02-04T10:08:54.965Z","updated_at":"2020-02-04T10:12:00.319Z","explanation":"This is a *structural design pattern* that behaves exactly as its name suggests. It **acts as a surrogate or placeholder for another object to control access to it**.\n\n**It is usually used in situations in which a target object is under constraints and may not be able to handle all its responsibilities efficiently**. A proxy, in this case, usually provides the same interface to the client and adds a level of indirection to support controlled access to the target object to avoid undue pressure on it.\n\nThe proxy pattern can be **very useful when working with network request-heavy applications** to avoid unnecessary or redundant network requests.\n\nIn this **example**, *we will use two new **ES6 features, Proxy and Reflect**.*:\n- **A Proxy object is used to define custom behaviour for fundamental operations of a JavaScript object** (remember, function and arrays are also object in JavaScript). It is a constructor method that can be used to create a Proxy object. It accepts a target object that is to be proxied and a handler object that will define the necessary customisation. The handler object allows for defining some trap functions like get, set, has, apply, etc. that are used to add custom behaviour attached to their usage. \n- **Reflect, on the other hand, is a built-in object that provides similar methods that are supported by the handler object of Proxy as static methods on itself**. It is not a constructor; its static methods are used for intercept-able JavaScript operations.\n\nNow, we create a function that can be thought of as a network request. We named it as *networkFetch*. It accepts a URL and responds accordingly. We want to implement a proxy where *we only get the response from the network if it is not available in our cache. Otherwise, we just return a response from the cache*.\n\nThe *cache global variable will store our cached responses*. We create a proxy named *proxiedNetworkFetch* with our original *networkFetch* as the targetand use apply method in our handler object to proxy the function invocation. The *apply* method gets passed on the target object itself. This value as *thisArg* and the arguments are passed to it in an array-like structure args.\n\nWe check if the passed url argument is in the cache. If it exists in the cache, we return the response from there, never invoking the original target function. If it does not, then we use the *Reflect.apply* method to invoke the *targetfunction* with *thisArg* (although it‚Äôs not of any significance in our case here) and the arguments it passed.\n\n```\n// Target\nfunction networkFetch(url) {\n  return `${url} - Response from network`;\n}\n\n// Proxy\n// ES6 Proxy API = new Proxy(target, handler);\nconst cache = [];\nconst proxiedNetworkFetch = new Proxy(networkFetch, {\n  apply(target, thisArg, args) {\n    const urlParam = args[0];\n    if (cache.includes(urlParam)) {\n      return `${urlParam} - Response from cache`;\n    } else {\n      cache.push(urlParam);\n      return Reflect.apply(target, thisArg, args);\n    }\n  },\n});\n\n// usage\nconsole.log(proxiedNetworkFetch('dogPic.jpg')); // 'dogPic.jpg - Response from network'\nconsole.log(proxiedNetworkFetch('dogPic.jpg')); // 'dogPic.jpg - Response from cache'\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)\n- [MDN Web docs - ES6 Reflect](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect)\n- [MDN Web docs - ES6 Proxy](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-proxy","weblink":"https://codersnack.com/js-design-patterns-proxy/","featured_image_preview":{"id":53,"name":"design-patterns.jpg","hash":"0c6f8403aa214c009d7b286046f40afc","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/0c6f8403aa214c009d7b286046f40afc.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T10:08:54.984Z","updated_at":"2020-02-04T10:08:54.984Z"}},"codersnacks_quiz":{"id":39,"question":"Proxy pattern is usually used in ...","response_valid":"situations in which a target object is under constraints and may not be able to handle all its responsibilities efficiently","response_invalid1":"situations where there is a proxy server to connect to backend","response_invalid2":"complex scenarios in terms of business logic to hide this logic to other layers of the app","created_at":"2020-02-04T10:15:43.566Z","updated_at":"2020-02-04T10:15:43.566Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Proxy is usually used in","created_at":"2020-02-04T10:16:17.684Z","updated_at":"2020-02-04T10:16:17.687Z"},{"id":40,"codersnack":{"id":43,"header":"Observer Pattern","created_at":"2020-02-04T10:26:42.213Z","updated_at":"2020-02-04T10:26:42.213Z","explanation":"It is a crucial *behavioural design pattern* that **defines one-to-many dependencies between objects so that when one object (publisher) changes its state, all the other dependent objects (subscribers) are notified and updated automatically.** This is also called **PubSub (publisher/subscribers) or event dispatcher/listeners pattern**. The publisher is sometimes called the **subject**, and the subscribers are sometimes called **observers**.\n\nChances are, you‚Äôre already somewhat familiar with this pattern if you have used **addEventListener or jQuery‚Äôs** .on to write even-handling code. It has its influences in **Reactive Programming (think RxJS)** as well.\n\nIn the **example**, we create a simple *Subject* class that has methods to add and remove objects of *Observer* class from subscriber collection. Also, a *fire method* to propagate any changes in the *Subject* class object to the subscribed *Observers*. The *Observer* class, on the other hand, has its internal state and a method to update its internal state based on the change propagated from the *Subject* it has subscribed to.\n```\nclass Subject {\n  constructor() {\n    this._observers = [];\n  }\n\n  subscribe(observer) {\n    this._observers.push(observer);\n  }\n\n  unsubscribe(observer) {\n    this._observers = this._observers.filter(obs => observer !== obs);\n  }\n\n  fire(change) {\n    this._observers.forEach(observer => {\n      observer.update(change);\n    });\n  }\n}\n\nclass Observer {\n  constructor(state) {\n    this.state = state;\n    this.initialState = state;\n  }\n\n  update(change) {\n    let state = this.state;\n    switch (change) {\n      case 'INC':\n        this.state = ++state;\n        break;\n      case 'DEC':\n        this.state = --state;\n        break;\n      default:\n        this.state = this.initialState;\n    }\n  }\n}\n\n// usage\nconst sub = new Subject();\n\nconst obs1 = new Observer(1);\nconst obs2 = new Observer(19);\n\nsub.subscribe(obs1);\nsub.subscribe(obs2);\n\nsub.fire('INC');\n\nconsole.log(obs1.state); // 2\nconsole.log(obs2.state); // 20\n\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-observer","weblink":"https://codersnack.com/js-design-patterns-observer/","featured_image_preview":{"id":54,"name":"design-patterns.jpg","hash":"282d95353af342298c7d16247c9e621a","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/282d95353af342298c7d16247c9e621a.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T10:26:42.221Z","updated_at":"2020-02-04T10:26:42.221Z"}},"codersnacks_quiz":{"id":40,"question":"Observer pattern defines ...","response_valid":"one-to-many dependencies between objects so that when one object (publisher) changes its state, all the other dependent objects (subscribers) are notified and updated automatically","response_invalid1":"relations between presentational components and statefull components for data communication","response_invalid2":"some rules between related components in terms of exchanging data","created_at":"2020-02-04T10:32:04.880Z","updated_at":"2020-02-04T10:32:04.880Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern Observer defines","created_at":"2020-02-04T10:32:37.126Z","updated_at":"2020-02-04T10:32:37.131Z"},{"id":41,"codersnack":{"id":44,"header":"State pattern","created_at":"2020-02-04T11:03:08.671Z","updated_at":"2020-02-04T11:03:08.671Z","explanation":"It is a *behavioural design pattern* that **allows an object to alter its behaviour based on changes to its internal state**. The object returned by a state pattern class seems to change its class. It **provides state-specific logic to a limited set of objects in which each object type represents a particular state**.\n\nWe will take a simple **example** of a *traffic light* to understand this pattern. The *TrafficLight* class changes the object it returns based on its internal state, which is an object of *Red*, *Yellow*, or *Green* class.\n\n```\nclass TrafficLight {\n  constructor() {\n    this.states = [new GreenLight(), new RedLight(), new YellowLight()];\n    this.current = this.states[0];\n  }\n\n  change() {\n    const totalStates = this.states.length;\n    let currentIndex = this.states.findIndex(light => light === this.current);\n    if (currentIndex + 1 < totalStates) this.current = this.states[currentIndex + 1];\n    else this.current = this.states[0];\n  }\n\n  sign() {\n    return this.current.sign();\n  }\n}\n\nclass Light {\n  constructor(light) {\n    this.light = light;\n  }\n}\n\nclass RedLight extends Light {\n  constructor() {\n    super('red');\n  }\n\n  sign() {\n    return 'STOP';\n  }\n}\n\nclass YellowLight extends Light {\n  constructor() {\n    super('yellow');\n  }\n\n  sign() {\n    return 'STEADY';\n  }\n}\n\nclass GreenLight extends Light {\n\tconstructor() {\n\t\tsuper('green');\n\t}\n\n\tsign() {\n\t\treturn 'GO';\n\t}\n}\n\n// usage\nconst trafficLight = new TrafficLight();\n\nconsole.log(trafficLight.sign()); // 'GO'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'STOP'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'STEADY'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'GO'\ntrafficLight.change();\n\nconsole.log(trafficLight.sign()); // 'STOP'\n```","references":null,"featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-state","weblink":"https://codersnack.com/js-design-patterns-state/","featured_image_preview":{"id":55,"name":"design-patterns.jpg","hash":"384819d3113a45478cb5897679c479d6","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/384819d3113a45478cb5897679c479d6.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T11:03:08.680Z","updated_at":"2020-02-04T11:03:08.680Z"}},"codersnacks_quiz":{"id":41,"question":"State pattern allows an object to ...","response_valid":"alter its behaviour based on changes to its internal state","response_invalid1":"print out its internal state in output console","response_invalid2":"notify children components some command","created_at":"2020-02-04T11:05:46.605Z","updated_at":"2020-02-04T11:05:46.605Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern state allows","created_at":"2020-02-04T11:06:10.545Z","updated_at":"2020-02-04T11:06:10.547Z"},{"id":42,"codersnack":{"id":45,"header":"Strategy Pattern","created_at":"2020-02-04T11:10:29.214Z","updated_at":"2020-02-04T11:10:29.214Z","explanation":"It is a *behavioural design pattern* that **allows encapsulation of alternative algorithms for a particular task**. It **defines a family of algorithms and encapsulates them in such a way that they are interchangeable at runtime without client interference or knowledge**.\n\nIn the **example** below, we create a class *Commute* for encapsulating all the possible strategies for commuting to work. Then, we define three strategies namely *Bus*, *PersonalCar*, and *Taxi*. Using this pattern we can swap the implementation to use for the travel method of the *Commute* object at runtime.\n\n```\n// encapsulation\nclass Commute {\n  travel(transport) {\n    return transport.travelTime();\n  }\n}\n\nclass Vehicle {\n  travelTime() {\n    return this._timeTaken;\n  }\n}\n\n// strategy 1\nclass Bus extends Vehicle {\n  constructor() {\n    super();\n    this._timeTaken = 10;\n  }\n}\n\n// strategy 2\nclass Taxi extends Vehicle {\n  constructor() {\n    super();\n    this._timeTaken = 5;\n  }\n}\n\n// strategy 3\nclass PersonalCar extends Vehicle {\n  constructor() {\n    super();\n    this._timeTaken = 3;\n  }\n}\n\n// usage\nconst commute = new Commute();\n\nconsole.log(commute.travel(new Taxi())); // 5\nconsole.log(commute.travel(new Bus())); // 10\n```","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-strategy","weblink":"https://codersnack.com/js-design-patterns-strategy/","featured_image_preview":{"id":56,"name":"design-patterns.jpg","hash":"29dea63348644054a38824e968a30f3d","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/29dea63348644054a38824e968a30f3d.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T11:10:29.221Z","updated_at":"2020-02-04T11:10:29.221Z"}},"codersnacks_quiz":{"id":42,"question":"Strategy pattern defines ...","response_valid":"a family of algorithms and encapsulates them in such a way that they are interchangeable at runtime without client interference or knowledge","response_invalid1":"the way of communication between components","response_invalid2":"how the app will be bundled in different environments","created_at":"2020-02-04T11:12:37.403Z","updated_at":"2020-02-04T11:12:37.403Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design pattern stratety defines","created_at":"2020-02-04T11:13:00.017Z","updated_at":"2020-02-04T11:13:00.021Z"},{"id":43,"codersnack":{"id":46,"header":"Template pattern","created_at":"2020-02-04T11:17:13.865Z","updated_at":"2020-02-04T11:17:13.865Z","explanation":"This is a *behavioural design pattern* based on **defining the skeleton of the algorithm or implementation of an operation, but deferring some steps to subclasses**. It lets subclasses redefine certain steps of an algorithm without changing the algorithm‚Äôs outward structure.\n\nIn this **example**, we have a *Template* class *Employee* that implements *work* method partially. It is for the subclasses to implement responsibilities method to make it work as a whole. We then create two subclasses *Developer* and *Tester* that extend the template class and implement the required method to fill the implementation gap.\n\n```\nclass Employee {\n  constructor(name, salary) {\n    this._name = name;\n    this._salary = salary;\n  }\n\n  work() {\n    return `${this._name} handles ${this.responsibilities() /* gap to be filled by subclass */}`;\n  }\n\n  getPaid() {\n    return `${this._name} got paid ${this._salary}`;\n  }\n}\n\nclass Developer extends Employee {\n  constructor(name, salary) {\n    super(name, salary);\n  }\n\n  // details handled by subclass\n  responsibilities() {\n    return 'application development';\n  }\n}\n\nclass Tester extends Employee {\n  constructor(name, salary) {\n    super(name, salary);\n  }\n\n  // details handled by subclass\n  responsibilities() {\n    return 'testing';\n  }\n}\n\n// usage\nconst dev = new Developer('Nathan', 100000);\nconsole.log(dev.getPaid()); // 'Nathan got paid 100000'\nconsole.log(dev.work()); // 'Nathan handles application development'\n\nconst tester = new Tester('Brian', 90000);\nconsole.log(tester.getPaid()); // 'Brian got paid 90000'\nconsole.log(tester.work()); \n```\n","references":"- [Medium - Javascript design patterns](https://medium.com/better-programming/javascript-design-patterns-25f0faaaa15)","featured_image_url":"https://codersnack.com/assets/images/design-patterns.jpg","slug":"js-design-patterns-template","weblink":"https://codersnack.com/js-design-patterns-template/","featured_image_preview":{"id":57,"name":"design-patterns.jpg","hash":"c6dec9fc6afc48c0a73a229c6ae66dec","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/c6dec9fc6afc48c0a73a229c6ae66dec.jpg","provider":"local","provider_metadata":null,"created_at":"2020-02-04T11:17:13.876Z","updated_at":"2020-02-04T11:17:13.876Z"}},"codersnacks_quiz":{"id":43,"question":"Template pattern defines ...","response_valid":"the skeleton of the algorithm or implementation of an operation, but deferring some steps to subclasses","response_invalid1":"a parent class to be inherited from","response_invalid2":"a common location to global variables","created_at":"2020-02-04T11:19:25.459Z","updated_at":"2020-02-04T11:19:25.459Z"},"codersnacks_category":{"id":3,"header":"Javascript design patterns","description":"Re-usable forms of a solution to common design problem with examples in JS","snacks_by_cat_json_filename":"javascript-design-patterns.snacks.json","key":"javascript-design-patterns","image_url":"https://codersnack.com/assets/images/design-patterns.jpg","created_at":"2019-12-31T19:53:03.454Z","updated_at":"2020-01-27T20:11:09.733Z","image_preview":{"id":5,"name":"design-patterns.jpg","hash":"da61a2c1b67445b99b18a96470e15d63","sha256":"VsHmj4Ik_4HvdSZoE8wLe3nE7RbkzGzaMehB3mO1T4A","ext":".jpg","mime":"image/jpeg","size":23.12,"url":"/uploads/da61a2c1b67445b99b18a96470e15d63.jpg","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:53:03.466Z","updated_at":"2019-12-31T19:53:03.466Z"}},"title":"Js design patter Template defines","created_at":"2020-02-04T11:19:49.778Z","updated_at":"2020-02-04T11:19:49.780Z"}]