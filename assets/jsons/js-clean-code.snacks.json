[{"id":111,"codersnack":{"id":113,"header":"JS Clean Code - Introduction - Variables","created_at":"2021-11-28T11:06:02.741Z","updated_at":"2021-11-28T11:25:30.251Z","explanation":"![js-clean-code-wtfs](https://codersnack.com/assets/images/js-clean-code-wtfs.jpeg)\n\nSoftware engineering principles, from Robert C. Martin's book [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882), **adapted for JavaScript**. This **is not a style guide**. It's a **guide to producing readable, reusable, and refactorable software in JavaScript.**\n\n**Not every principle herein has to be strictly followed**, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified **over many years of collective experience** by the authors of Clean Code.\n\nOur craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to **assess the quality of the JavaScript code that you and your team produce**.\n\nOne more thing: knowing these won't immediately make you a better software developer, and working with them for many years doesn't mean you won't make mistakes. **Every piece of code starts as a first draft,** like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. **Don't beat yourself up for first drafts that need improvement**. Beat up the code instead!\n\n\n### Variables\n\n\n####Â Use meaningful and pronounceable variable names\n\n\n*Bad:*\n\n```\nconst yyyymmdstr = moment().format(\"YYYY/MM/DD\");\n```\n*Good:*\n```\nconst currentDate = moment().format(\"YYYY/MM/DD\");\n```\n\n\n#### Use the same vocabulary for the same type of variable\n\n\n*Bad:*\n```\ngetUserInfo();\ngetClientData();\ngetCustomerRecord();\n```\n*Good:*\n```\ngetUser();\n```\n\n\n#### Use searchable names\n\n\n**We will read more code than we will ever write. It's important that the code we do write is readable and searchable.** By not naming variables that end up being meaningful for understanding our program, we hurt our readers. **Make your names searchable**. Tools like *[buddy.js](https://github.com/danielstjules/buddy.js/)* and *ESLint* can help identify unnamed constants.\n\n*Bad:*\n```\n// What the heck is 86400000 for?\nsetTimeout(blastOff, 86400000);\n```\n\n*Good:*\n\n```\n// Declare them as capitalized named constants.\nconst MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;\nsetTimeout(blastOff, MILLISECONDS_PER_DAY);\n```\n\n\n#### Use explanatory variables\n\n\n*Bad:*\n```\nconst address = \"One Infinite Loop, Cupertino 95014\";\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nsaveCityZipCode(\n  address.match(cityZipCodeRegex)[1],\n  address.match(cityZipCodeRegex)[2]\n);\n```\n*Good:*\n```\nconst address = \"One Infinite Loop, Cupertino 95014\";\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nconst [_, city, zipCode] = address.match(cityZipCodeRegex) || [];\nsaveCityZipCode(city, zipCode);\n```\n\n#### Avoid Mental Mapping\n\nExplicit is better than implicit.\n\n*Bad:*\n```\nconst locations = [\"Austin\", \"New York\", \"San Francisco\"];\nlocations.forEach(l => {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  // Wait, what is `l` for again?\n  dispatch(l);\n});\n```\n\n*Good:*\n```\nconst locations = [\"Austin\", \"New York\", \"San Francisco\"];\nlocations.forEach(location => {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  dispatch(location);\n});\n```\n\n\n#### Don't add unneeded context\n\n\nIf your class/object name tells you something, don't repeat that in your variable name.\n\n*Bad:*\n```\nconst Car = {\n  carMake: \"Honda\",\n  carModel: \"Accord\",\n  carColor: \"Blue\"\n};\n\nfunction paintCar(car, color) {\n  car.carColor = color;\n}\n```\n*Good:*\n```\nconst Car = {\n  make: \"Honda\",\n  model: \"Accord\",\n  color: \"Blue\"\n};\n\nfunction paintCar(car, color) {\n  car.color = color;\n}\n```\n\n\n#### Use default arguments instead of short circuiting or conditionals\n\n\n**Default arguments are often cleaner than short circuiting**. Be aware that if you use them, your function will only provide default values for undefined arguments. Other \"falsy\" values such as '', \"\", false, null, 0, and NaN, will not be replaced by a default value.\n\n*Bad:*\n```\nfunction createMicrobrewery(name) {\n  const breweryName = name || \"Hipster Brew Co.\";\n  // ...\n}\n```\n*Good:*\n```\nfunction createMicrobrewery(name = \"Hipster Brew Co.\") {\n  // ...\n}\n```","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-variables","weblink":"https://codersnack.com/js-clean-code-variables","featured_image_preview":{"id":149,"name":"js-clean-code.jpeg","hash":"60954e923b5b4e45957a8940c33a0058","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/60954e923b5b4e45957a8940c33a0058.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T11:06:02.755Z","updated_at":"2021-11-28T11:06:02.755Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"javascript clean code - introduction - variables","created_at":"2021-11-28T11:06:33.856Z","updated_at":"2021-11-28T11:06:33.859Z"},{"id":112,"codersnack":{"id":114,"header":"Javascript Clean Code - Functions","created_at":"2021-11-28T11:48:33.336Z","updated_at":"2021-11-28T19:31:10.112Z","explanation":"#### Function arguments (2 or fewer ideally)\n\n**Limiting the amount of function parameters is incredibly important because it makes testing your function easier**. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.\n\n**One or two arguments is the ideal case, and three should be avoided if possible**. Anything more than that should be consolidated. Usually, **if you have more than two arguments then your function is trying to do too much**. In cases where it's not, most of the time a **higher-level object will suffice as an argument**.\n\nSince JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.\n\n**To make it obvious what properties the function expects, you can use the *ES2015/ES6 destructuring syntax***. This has a few advantages:\n\n- When someone looks at the function signature, it's immediately clear what properties are being used.\n- It can be used to **simulate named parameters**.\n- Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. ***Note*: objects and arrays that are destructured from the argument object are NOT cloned**.\n- **Linters can warn you about unused properties**, which would be impossible without destructuring.\n\n*Bad:*\n```\nfunction createMenu(title, body, buttonText, cancellable) {\n  // ...\n}\n\ncreateMenu(\"Foo\", \"Bar\", \"Baz\", true);\n```\n*Good:*\n```\nfunction createMenu({ title, body, buttonText, cancellable }) {\n  // ...\n}\n\ncreateMenu({\n  title: \"Foo\",\n  body: \"Bar\",\n  buttonText: \"Baz\",\n  cancellable: true\n});\n```\n\n\n#### Functions should do one thing\n\nThis is by far the most important rule in software engineering. **When functions do more than one thing, they are harder to compose, test, and reason about**. When you can isolate a function to just one action, **it can be refactored easily and your code will read much cleaner**. If you take nothing else away from this guide other than this, you'll be ahead of many developers.\n\n*Bad:*\n```\nfunction emailClients(clients) {\n  clients.forEach(client => {\n    const clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n```\n*Good:*\n```\nfunction emailActiveClients(clients) {\n  clients.filter(isActiveClient).forEach(email);\n}\n\nfunction isActiveClient(client) {\n  const clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n``` \n\n\n#### Function names should say what they do\n\n*Bad:*\n```\nfunction addToDate(date, month) {\n  // ...\n}\n\nconst date = new Date();\n\n// It's hard to tell from the function name what is added\naddToDate(date, 1);\n```\n\n*Good:*\n```\nfunction addMonthToDate(month, date) {\n  // ...\n}\n\nconst date = new Date();\naddMonthToDate(1, date);\n```\n\n\n#### Functions should only be one level of abstraction\n\n**When you have more than one level of abstraction your function is usually doing too much**. Splitting up functions leads to reusability and easier testing.\n\n*Bad:*\n```\nfunction parseBetterJSAlternative(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(\" \");\n  const tokens = [];\n  REGEXES.forEach(REGEX => {\n    statements.forEach(statement => {\n      // ...\n    });\n  });\n\n  const ast = [];\n  tokens.forEach(token => {\n    // lex...\n  });\n\n  ast.forEach(node => {\n    // parse...\n  });\n}\n```\n\n*Good:*\n```\nfunction parseBetterJSAlternative(code) {\n  const tokens = tokenize(code);\n  const syntaxTree = parse(tokens);\n  syntaxTree.forEach(node => {\n    // parse...\n  });\n}\n\nfunction tokenize(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(\" \");\n  const tokens = [];\n  REGEXES.forEach(REGEX => {\n    statements.forEach(statement => {\n      tokens.push(/* ... */);\n    });\n  });\n\n  return tokens;\n}\n\nfunction parse(tokens) {\n  const syntaxTree = [];\n  tokens.forEach(token => {\n    syntaxTree.push(/* ... */);\n  });\n\n  return syntaxTree;\n}\n```\n\n#### Remove duplicate code\n\nDo your absolute best to avoid duplicate code. **Duplicate code is bad because it means that there's more than one place to alter something if you need to change some logic**.\n\nImagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there's only one place to update!\n\nOftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things.**Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class**.\n\n**Getting the abstraction right is critical, that's why you should follow the [SOLID](https://en.wikipedia.org/wiki/SOLID) principles laid out in the Classes section**. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don't repeat yourself, otherwise you'll find yourself updating multiple places anytime you want to change one thing.\n\n*Bad:*\n```\nfunction showDeveloperList(developers) {\n  developers.forEach(developer => {\n    const expectedSalary = developer.calculateExpectedSalary();\n    const experience = developer.getExperience();\n    const githubLink = developer.getGithubLink();\n    const data = {\n      expectedSalary,\n      experience,\n      githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers) {\n  managers.forEach(manager => {\n    const expectedSalary = manager.calculateExpectedSalary();\n    const experience = manager.getExperience();\n    const portfolio = manager.getMBAProjects();\n    const data = {\n      expectedSalary,\n      experience,\n      portfolio\n    };\n\n    render(data);\n  });\n}\n```\n*Good:*\n```\nfunction showEmployeeList(employees) {\n  employees.forEach(employee => {\n    const expectedSalary = employee.calculateExpectedSalary();\n    const experience = employee.getExperience();\n\n    const data = {\n      expectedSalary,\n      experience\n    };\n\n    switch (employee.type) {\n      case \"manager\":\n        data.portfolio = employee.getMBAProjects();\n        break;\n      case \"developer\":\n        data.githubLink = employee.getGithubLink();\n        break;\n    }\n\n    render(data);\n  });\n}\n```\n\n\n#### Set default objects with Object.assign\n\n\n*Bad:*\n```\nconst menuConfig = {\n  title: null,\n  body: \"Bar\",\n  buttonText: null,\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  config.title = config.title || \"Foo\";\n  config.body = config.body || \"Bar\";\n  config.buttonText = config.buttonText || \"Baz\";\n  config.cancellable =\n    config.cancellable !== undefined ? config.cancellable : true;\n}\n\ncreateMenu(menuConfig);\n```\n*Good:*\n```\nconst menuConfig = {\n  title: \"Order\",\n  // User did not include 'body' key\n  buttonText: \"Send\",\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  let finalConfig = Object.assign(\n    {\n      title: \"Foo\",\n      body: \"Bar\",\n      buttonText: \"Baz\",\n      cancellable: true\n    },\n    config\n  );\n  return finalConfig\n  // config now equals: {title: \"Order\", body: \"Bar\", buttonText: \"Send\", cancellable: true}\n  // ...\n}\n\ncreateMenu(menuConfig);\n```\n\n\n#### Don't use flags as function parameters\n\n**Flags tell your user that this function does more than one thing**. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.\n\n*Bad:*\n```\nfunction createFile(name, temp) {\n  if (temp) {\n    fs.create(`./temp/${name}`);\n  } else {\n    fs.create(name);\n  }\n}\n```\n*Good:*\n```\nfunction createFile(name) {\n  fs.create(name);\n}\n\nfunction createTempFile(name) {\n  createFile(`./temp/${name}`);\n}\n```\n\n\n#### Avoid Side Effects (part 1)\n\n**A function produces a side effect if it does anything other than take a value in and return another value or values**. A side effect could be **writing to a file**, **modifying some global variable**, or accidentally wiring all your money to a stranger.\n\n**Now, you do need to have side effects in a program on occasion**. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. **Don't have several functions and classes that write to a particular file. Have one service that does it**. One and only one.\n\nThe main point is to **avoid** common pitfalls like **sharing state between objects without any structure**, **using mutable data types that can be written to by anything**, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.\n\n*Bad:*\n```\n// Global variable referenced by following function.\n// If we had another function that used this name, now it'd be an array and it could break it.\nlet name = \"Ryan McDermott\";\n\nfunction splitIntoFirstAndLastName() {\n  name = name.split(\" \");\n}\n\nsplitIntoFirstAndLastName();\n\nconsole.log(name); // ['Ryan', 'McDermott'];\n```\n\n*Good:*\n\n```\nfunction splitIntoFirstAndLastName(name) {\n  return name.split(\" \");\n}\n\nconst name = \"Ryan McDermott\";\nconst newName = splitIntoFirstAndLastName(name);\n\nconsole.log(name); // 'Ryan McDermott';\nconsole.log(newName); // ['Ryan', 'McDermott'];\n```\n\n\n\n#### Avoid Side Effects (part 2)\n\nIn JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). **Objects and arrays are two kinds of mutable values so it's important to handle them carefully when they're passed as parameters to a function**. A JavaScript function can change an object's properties or alter the contents of an array which could easily cause bugs elsewhere.\n\n**Example**\nSuppose there's a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same cart array will be affected by this addition. That may be great, however it could also be bad. Let's imagine a bad situation:\nThe user clicks the \"Purchase\" button which calls a purchase function that spawns a network request and sends the cart array to the server. Because of a bad network connection, the purchase function has to keep retrying the request. Now, what if in the meantime the **user accidentally clicks an \"Add to Cart\"** button on an item they don't actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the cart array was modified.\n\n**A great solution would be for the addItemToCart function to always clone the cart, edit it, and return the clone**. This would ensure that functions that are still using the old shopping cart wouldn't be affected by the changes.\n\n**Two caveats** to mention to this approach:\n\n- There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. **Most things can be refactored to have no side effects**!\n\n- **Cloning big objects can be very expensive in terms of performance**. Luckily, this isn't a big issue in practice because there are great libraries that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.\n\n*Bad:*\n```\n\nconst addItemToCart = (cart, item) => {\n  cart.push({ item, date: Date.now() });\n};\n```\n*Good:*\n\n```\nconst addItemToCart = (cart, item) => {\n  return [...cart, { item, date: Date.now() }];\n};\n```\n\n\n#### Don't write to global functions\n\n**Polluting globals is a bad practice in JavaScript because you could clash with another library** and the user of your API would be none-the-wiser until they get an exception in production. Let's think about an **example**: what if you wanted to extend JavaScript's native Array method to have a diff method that could show the difference between two arrays? **You could write your new function to the Array.prototype, but it could clash with another library** that tried to do the same thing. What if that other library was just using diff to find the difference between the first and last elements of an array? This is why it would be much better to **just use ES2015/ES6 classes and simply extend the Array global.**\n\n*Bad:*\n```\nArray.prototype.diff = function diff(comparisonArray) {\n  const hash = new Set(comparisonArray);\n  return this.filter(elem => !hash.has(elem));\n};\n```\n*Good:*\n\n```\nclass SuperArray extends Array {\n  diff(comparisonArray) {\n    const hash = new Set(comparisonArray);\n    return this.filter(elem => !hash.has(elem));\n  }\n}\n```\n\n#### Favor functional programming over imperative programming\n\n**JavaScript isn't a functional language** in the way that Haskell is, but **it has a functional flavor to it**. **Functional languages can be cleaner and easier to test**. Favor this style of programming when you can.\n\n*Bad:*\n```\nconst programmerOutput = [\n  {\n    name: \"Uncle Bobby\",\n    linesOfCode: 500\n  },\n  {\n    name: \"Suzie Q\",\n    linesOfCode: 1500\n  },\n  {\n    name: \"Jimmy Gosling\",\n    linesOfCode: 150\n  },\n  {\n    name: \"Gracie Hopper\",\n    linesOfCode: 1000\n  }\n];\n\nlet totalOutput = 0;\n\nfor (let i = 0; i < programmerOutput.length; i++) {\n  totalOutput += programmerOutput[i].linesOfCode;\n}\n```\n*Good:*\n```\nconst programmerOutput = [\n  {\n    name: \"Uncle Bobby\",\n    linesOfCode: 500\n  },\n  {\n    name: \"Suzie Q\",\n    linesOfCode: 1500\n  },\n  {\n    name: \"Jimmy Gosling\",\n    linesOfCode: 150\n  },\n  {\n    name: \"Gracie Hopper\",\n    linesOfCode: 1000\n  }\n];\n\nconst totalOutput = programmerOutput.reduce(\n  (totalLines, output) => totalLines + output.linesOfCode,\n  0\n);\n```\n\n\n#### Encapsulate conditionals\n\n*Bad:*\n\n```\nif (fsm.state === \"fetching\" && isEmpty(listNode)) {\n  // ...\n}\n```\n*Good:*\n\n```\nfunction shouldShowSpinner(fsm, listNode) {\n  return fsm.state === \"fetching\" && isEmpty(listNode);\n}\n\nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\n  // ...\n}\n```\n\n\n\n#### Avoid negative conditionals\n\n\n*Bad:*\n```\nfunction isDOMNodeNotPresent(node) {\n  // ...\n}\n\nif (!isDOMNodeNotPresent(node)) {\n  // ...\n}\n```\n*Good:*\n```\nfunction isDOMNodePresent(node) {\n  // ...\n}\n\nif (isDOMNodePresent(node)) {\n  // ...\n}\n```\n\n\n####Â Avoid conditionals\n\nThis seems like an impossible task. Upon first hearing this, most people say, \"how am I supposed to do anything without an if statement?\" The answer is that **you can use *polymorphism* to achieve the same task in many cases**. \nThe second question is usually, \"well that's great but **why would I want to do that?**\" The answer is a previous clean code concept we learned: a function should only do one thing. **When you have classes and functions that have if statements, you are telling your user that your function does more than one thing**. Remember, just do one thing.\n\n*Bad:*\n```\nclass Airplane {\n  // ...\n  getCruisingAltitude() {\n    switch (this.type) {\n      case \"777\":\n        return this.getMaxAltitude() - this.getPassengerCount();\n      case \"Air Force One\":\n        return this.getMaxAltitude();\n      case \"Cessna\":\n        return this.getMaxAltitude() - this.getFuelExpenditure();\n    }\n  }\n}\n```\n*Good:*\n```\nclass Airplane {\n  // ...\n}\n\nclass Boeing777 extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getPassengerCount();\n  }\n}\n\nclass AirForceOne extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude();\n  }\n}\n\nclass Cessna extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getFuelExpenditure();\n  }\n}\n```\n\n\n#### Avoid type-checking (part 1)\n\n**JavaScript is untyped**, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it **becomes tempting to do type-checking in your functions**. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.\n\n*Bad:*\n```\nfunction travelToTexas(vehicle) {\n  if (vehicle instanceof Bicycle) {\n    vehicle.pedal(this.currentLocation, new Location(\"texas\"));\n  } else if (vehicle instanceof Car) {\n    vehicle.drive(this.currentLocation, new Location(\"texas\"));\n  }\n}\n```\n*Good:*\n\n```\nfunction travelToTexas(vehicle) {\n  vehicle.move(this.currentLocation, new Location(\"texas\"));\n}\n```\n\n\n#### Avoid type-checking (part 2)\n\n**If you are working with basic primitive values like strings and integers, and you can't use polymorphism but you still feel the need to type-check, you should consider using *TypeScript***. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux \"type-safety\" you get doesn't make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).\n\n*Bad:*\n```\nfunction combine(val1, val2) {\n  if (\n    (typeof val1 === \"number\" && typeof val2 === \"number\") ||\n    (typeof val1 === \"string\" && typeof val2 === \"string\")\n  ) {\n    return val1 + val2;\n  }\n\n  throw new Error(\"Must be of type String or Number\");\n}\n```\n*Good:*\n\n```\nfunction combine(val1, val2) {\n  return val1 + val2;\n}\n```\n\n\n####Â Don't over-optimize\n\n**Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time**. There are good resources for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.\n\n*Bad:*\n```\n// On old browsers, each iteration with uncached `list.length` would be costly\n// because of `list.length` recomputation. In modern browsers, this is optimized.\nfor (let i = 0, len = list.length; i < len; i++) {\n  // ...\n}\n```\n*Good:*\n```\nfor (let i = 0; i < list.length; i++) {\n  // ...\n}\n```\n\n\n#### Remove dead code\n\n**Dead code is just as bad as duplicate code**. There's no reason to keep it in your codebase. If it's not being called, get rid of it! **It will still be safe in your version history if you still need it.**\n\n*Bad:*\n\n```\nfunction oldRequestModule(url) {\n  // ...\n}\n\nfunction newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker(\"apples\", req, \"www.inventory-awesome.io\");\n```\n\n*Good:*\n\n```\nfunction newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker(\"apples\", req, \"www.inventory-awesome.io\");\n```\n\n","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-functions","weblink":"https://codersnack.com/js-clean-code-functions","featured_image_preview":{"id":150,"name":"js-clean-code.png","hash":"9bd347eb8c284806858f6cf3b6c202dd","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/9bd347eb8c284806858f6cf3b6c202dd.png","provider":"local","provider_metadata":null,"created_at":"2021-11-28T11:48:33.349Z","updated_at":"2021-11-28T11:48:33.349Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript clean code - Functions","created_at":"2021-11-28T19:31:40.343Z","updated_at":"2021-11-28T19:31:40.353Z"},{"id":113,"codersnack":{"id":115,"header":"Javascript Clean Code - Objects and Data Structures","created_at":"2021-11-28T22:08:37.818Z","updated_at":"2021-11-28T22:08:37.818Z","explanation":"\n### Use getters and setters\n\nUsing getters and setters to access data on objects could be better than simply looking for a property on an object. \"**Why?**\" you might ask. Well, here's an unorganized list of reasons why:\n\n- When **you want to do more beyond getting an object property**, you don't have to look up and change every accessor in your codebase.\n- Makes **adding validation simple when doing a set**.\n- **Encapsulates the internal representation**.\n- Easy to **add logging and error handling** when getting and setting.\n- You can **lazy load your object's properties, let's say getting it from a server**.\n\n*Bad:*\n```\nfunction makeBankAccount() {\n  // ...\n\n  return {\n    balance: 0\n    // ...\n  };\n}\n\nconst account = makeBankAccount();\naccount.balance = 100;\n```\n*Good:*\n```\nfunction makeBankAccount() {\n  // this one is private\n  let balance = 0;\n\n  // a \"getter\", made public via the returned object below\n  function getBalance() {\n    return balance;\n  }\n\n  // a \"setter\", made public via the returned object below\n  function setBalance(amount) {\n    // ... validate before updating the balance\n    balance = amount;\n  }\n\n  return {\n    // ...\n    getBalance,\n    setBalance\n  };\n}\n\nconst account = makeBankAccount();\naccount.setBalance(100);\n```\n\n### Make objects have private members\n\nThis can be accomplished through **closures** (for ES5 and below).\n\n*Bad:*\n```\nconst Employee = function(name) {\n  this.name = name;\n};\n\nEmployee.prototype.getName = function getName() {\n  return this.name;\n};\n\nconst employee = new Employee(\"John Doe\");\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: undefined\n```\n\n*Good:*\n\n```\nfunction makeEmployee(name) {\n  return {\n    getName() {\n      return name;\n    }\n  };\n}\n\nconst employee = makeEmployee(\"John Doe\");\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\n```\n\n\n### Classes\n\n#### Prefer ES2015/ES6 classes over ES5 plain functions\n\nIt's very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. **If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes**. However, prefer small functions over classes until you find yourself needing larger and more complex objects.\n\n*Bad:*\n```\nconst Animal = function(age) {\n  if (!(this instanceof Animal)) {\n    throw new Error(\"Instantiate Animal with `new`\");\n  }\n\n  this.age = age;\n};\n\nAnimal.prototype.move = function move() {};\n\nconst Mammal = function(age, furColor) {\n  if (!(this instanceof Mammal)) {\n    throw new Error(\"Instantiate Mammal with `new`\");\n  }\n\n  Animal.call(this, age);\n  this.furColor = furColor;\n};\n\nMammal.prototype = Object.create(Animal.prototype);\nMammal.prototype.constructor = Mammal;\nMammal.prototype.liveBirth = function liveBirth() {};\n\nconst Human = function(age, furColor, languageSpoken) {\n  if (!(this instanceof Human)) {\n    throw new Error(\"Instantiate Human with `new`\");\n  }\n\n  Mammal.call(this, age, furColor);\n  this.languageSpoken = languageSpoken;\n};\n\nHuman.prototype = Object.create(Mammal.prototype);\nHuman.prototype.constructor = Human;\nHuman.prototype.speak = function speak() {};\n```\n*Good:*\n```\nclass Animal {\n  constructor(age) {\n    this.age = age;\n  }\n\n  move() {\n    /* ... */\n  }\n}\n\nclass Mammal extends Animal {\n  constructor(age, furColor) {\n    super(age);\n    this.furColor = furColor;\n  }\n\n  liveBirth() {\n    /* ... */\n  }\n}\n\nclass Human extends Mammal {\n  constructor(age, furColor, languageSpoken) {\n    super(age, furColor);\n    this.languageSpoken = languageSpoken;\n  }\n\n  speak() {\n    /* ... */\n  }\n}\n```\n\n\n### Use method chaining\n\nThis pattern is very useful in JavaScript and **you see it in many libraries such as *jQuery* and *Lodash***. **It allows your code to be expressive, and less verbose**. For that reason, I say, use method chaining and take a look at how clean your code will be. **In your class functions, simply return *this* at the end of every function, and you can chain further class methods onto it.**\n\n*Bad:*\n```\nclass Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n  }\n\n  setModel(model) {\n    this.model = model;\n  }\n\n  setColor(color) {\n    this.color = color;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n  }\n}\n\nconst car = new Car(\"Ford\", \"F-150\", \"red\");\ncar.setColor(\"pink\");\ncar.save();\n```\n\n*Good:*\n\n```\nclass Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setModel(model) {\n    this.model = model;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setColor(color) {\n    this.color = color;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n    // NOTE: Returning this for chaining\n    return this;\n  }\n}\n\nconst car = new Car(\"Ford\", \"F-150\", \"red\").setColor(\"pink\").save();\n```\n\n\n### Prefer composition over inheritance\n\nAs stated famously in [Design Patterns by the Gang of Four](https://en.wikipedia.org/wiki/Design_Patterns), **you should prefer composition over inheritance where you can**. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.\n\nYou might be wondering then, **\"when should I use inheritance?\"** It depends on your problem at hand, but this is a **decent list of when inheritance makes more sense than composition:**\n\n- **Your inheritance represents an \"is-a\" relationship and not a \"has-a\" relationship** (Human->Animal vs. User->UserDetails).\n- You **can reuse code from the base classes** (Humans can move like all animals).\n- You **want to make global changes to derived classes by changing a base class**. (Change the caloric expenditure of all animals when they move).\n\n*Bad:*\n```\nclass Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  // ...\n}\n\n// Bad because Employees \"have\" tax data. EmployeeTaxData is not a type of Employee\nclass EmployeeTaxData extends Employee {\n  constructor(ssn, salary) {\n    super();\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n```\n\n*Good:*\n\n```\nclass EmployeeTaxData {\n  constructor(ssn, salary) {\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n\nclass Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  setTaxData(ssn, salary) {\n    this.taxData = new EmployeeTaxData(ssn, salary);\n  }\n  // ...\n}\n```","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-objects-data-structures","weblink":"https://codersnack.com/js-clean-code-objects-data-structures","featured_image_preview":{"id":151,"name":"js-clean-code.png","hash":"2b2e7c287351441ab4f637667ae7be4c","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/2b2e7c287351441ab4f637667ae7be4c.png","provider":"local","provider_metadata":null,"created_at":"2021-11-28T22:08:37.835Z","updated_at":"2021-11-28T22:08:37.835Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - Objects and Data Structures","created_at":"2021-11-28T22:09:08.529Z","updated_at":"2021-11-28T22:09:08.533Z"},{"id":114,"codersnack":{"id":116,"header":"JS Clean Code - SOLID principles","created_at":"2021-11-28T22:48:49.129Z","updated_at":"2021-11-28T22:48:49.129Z","explanation":"## SOLID\n\n### Single Responsibility Principle (SRP)\n\nAs stated in Clean Code, \"There should never be more than one reason for a class to change\". It's tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won't be conceptually cohesive and it will give it many reasons to change. **Minimizing the amount of times you need to change a class is important. It's important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase**.\n\n*Bad:*\n```\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n  }\n\n  changeSettings(settings) {\n    if (this.verifyCredentials()) {\n      // ...\n    }\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n```\n*Good:*\n\n```\nclass UserAuth {\n  constructor(user) {\n    this.user = user;\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n    this.auth = new UserAuth(user);\n  }\n\n  changeSettings(settings) {\n    if (this.auth.verifyCredentials()) {\n      // ...\n    }\n  }\n}\n```\n\n\n### Open/Closed Principle (OCP)\n\nAs stated by Bertrand Meyer, \"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.\" What does that mean though? This principle basically states that **you should allow users to add new functionalities without changing existing code.**\n\n*Bad:*\n```\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"ajaxAdapter\";\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"nodeAdapter\";\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    if (this.adapter.name === \"ajaxAdapter\") {\n      return makeAjaxCall(url).then(response => {\n        // transform response and return\n      });\n    } else if (this.adapter.name === \"nodeAdapter\") {\n      return makeHttpCall(url).then(response => {\n        // transform response and return\n      });\n    }\n  }\n}\n\nfunction makeAjaxCall(url) {\n  // request and return promise\n}\n\nfunction makeHttpCall(url) {\n  // request and return promise\n}\n```\n\n*Good:*\n```\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"ajaxAdapter\";\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"nodeAdapter\";\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    return this.adapter.request(url).then(response => {\n      // transform response and return\n    });\n  }\n}\n```\n\n\n### Liskov Substitution Principle (LSP)\n\nThis is a scary term for a very simple concept. It's formally defined as \"If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).\" That's an even scarier definition.\n\n**The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results**. This might still be confusing, so let's take a look at the classic **Square-Rectangle example**. Mathematically, a square is a rectangle, but if you model it using the \"is-a\" relationship via inheritance, you quickly get into trouble.\n\n*Bad:*\n```\nclass Rectangle {\n  constructor() {\n    this.width = 0;\n    this.height = 0;\n  }\n\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Rectangle {\n  setWidth(width) {\n    this.width = width;\n    this.height = width;\n  }\n\n  setHeight(height) {\n    this.width = height;\n    this.height = height;\n  }\n}\n\nfunction renderLargeRectangles(rectangles) {\n  rectangles.forEach(rectangle => {\n    rectangle.setWidth(4);\n    rectangle.setHeight(5);\n    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.\n    rectangle.render(area);\n  });\n}\n\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\nrenderLargeRectangles(rectangles);\n```\n\n*Good:*\n\n```\nclass Shape {\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(width, height) {\n    super();\n    this.width = width;\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Shape {\n  constructor(length) {\n    super();\n    this.length = length;\n  }\n\n  getArea() {\n    return this.length * this.length;\n  }\n}\n\nfunction renderLargeShapes(shapes) {\n  shapes.forEach(shape => {\n    const area = shape.getArea();\n    shape.render(area);\n  });\n}\n\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\nrenderLargeShapes(shapes);\n```\n\n\n### Interface Segregation Principle (ISP)\n\nJavaScript doesn't have interfaces so this principle doesn't apply as strictly as others. However, it's important and relevant even with JavaScript's lack of type system.\n\nISP states that **\"Clients should not be forced to depend upon interfaces that they do not use.\"** Interfaces are implicit contracts in JavaScript because of duck typing.\n\n**A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects**. Not requiring clients to setup huge amounts of options is beneficial, because most of the time **they won't need all of the settings. Making them optional helps prevent having a \"fat interface\".**\n\n*Bad:*\n```\nclass DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.settings.animationModule.setup();\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName(\"body\"),\n  animationModule() {} // Most of the time, we won't need to animate when traversing.\n  // ...\n});\n```\n\n*Good:*\n```\nclass DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.options = settings.options;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.setupOptions();\n  }\n\n  setupOptions() {\n    if (this.options.animationModule) {\n      // ...\n    }\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName(\"body\"),\n  options: {\n    animationModule() {}\n  }\n});\n```\n\n\n### Dependency Inversion Principle (DIP)\n\nThis principle states two essential things:\n\n- **High-level modules should not depend on low-level modules. Both should depend on abstractions.**\n- **Abstractions should not depend upon details. Details should depend on abstractions.**\n\nThis can be hard to understand at first, but **if you've worked with AngularJS, you've seen an implementation of this principle in the form of Dependency Injection (DI).** While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. **A huge benefit of this is that it reduces the coupling between modules**. \n\n> Coupling is a very bad development pattern because it makes your code hard to refactor.\n\nAs stated previously, **JavaScript doesn't have interfaces so the abstractions that are depended upon are implicit contracts**. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an InventoryTracker will have a requestItems method.\n\n*Bad:*\n```\nclass InventoryRequester {\n  constructor() {\n    this.REQ_METHODS = [\"HTTP\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryTracker {\n  constructor(items) {\n    this.items = items;\n\n    // BAD: We have created a dependency on a specific request implementation.\n    // We should just have requestItems depend on a request method: `request`\n    this.requester = new InventoryRequester();\n  }\n\n  requestItems() {\n    this.items.forEach(item => {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nconst inventoryTracker = new InventoryTracker([\"apples\", \"bananas\"]);\ninventoryTracker.requestItems();\n```\n*Good:*\n```\nclass InventoryTracker {\n  constructor(items, requester) {\n    this.items = items;\n    this.requester = requester;\n  }\n\n  requestItems() {\n    this.items.forEach(item => {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nclass InventoryRequesterV1 {\n  constructor() {\n    this.REQ_METHODS = [\"HTTP\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryRequesterV2 {\n  constructor() {\n    this.REQ_METHODS = [\"WS\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\n// By constructing our dependencies externally and injecting them, we can easily\n// substitute our request module for a fancy new one that uses WebSockets.\nconst inventoryTracker = new InventoryTracker(\n  [\"apples\", \"bananas\"],\n  new InventoryRequesterV2()\n);\ninventoryTracker.requestItems();\n```\n\n","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-solid-principles","weblink":"https://codersnack.com/js-clean-code-solid-principles","featured_image_preview":{"id":152,"name":"js-clean-code.png","hash":"75c7bbc3969c4b7f9f8f1e453d7f90a0","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/75c7bbc3969c4b7f9f8f1e453d7f90a0.png","provider":"local","provider_metadata":null,"created_at":"2021-11-28T22:48:49.144Z","updated_at":"2021-11-28T22:48:49.144Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - SOLID principles","created_at":"2021-11-28T22:49:19.042Z","updated_at":"2021-11-28T22:49:19.050Z"},{"id":115,"codersnack":{"id":117,"header":"JS Clean Code - Testing - Concurrency - Error Handling","created_at":"2021-11-29T09:29:29.850Z","updated_at":"2021-11-29T09:29:29.850Z","explanation":"\n### Testing\n\nTesting is more important than shipping.**If you have no tests or an inadequate amount, then every time you ship code you won't be sure that you didn't break anything**. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a good coverage tool.\n\n**There's no excuse to not write tests**. There are plenty of good JS test frameworks, so find one that your team prefers. When you find one that works for your team, then **aim to always write tests for every new feature/module you introduce.** If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.\n\n####Â Single concept per test\n\n*Bad:*\n``` \nimport assert from \"assert\";\n\ndescribe(\"MomentJS\", () => {\n  it(\"handles date boundaries\", () => {\n    let date;\n\n    date = new MomentJS(\"1/1/2015\");\n    date.addDays(30);\n    assert.equal(\"1/31/2015\", date);\n\n    date = new MomentJS(\"2/1/2016\");\n    date.addDays(28);\n    assert.equal(\"02/29/2016\", date);\n\n    date = new MomentJS(\"2/1/2015\");\n    date.addDays(28);\n    assert.equal(\"03/01/2015\", date);\n  });\n});\n```\n*Good:*\n```\nimport assert from \"assert\";\n\ndescribe(\"MomentJS\", () => {\n  it(\"handles 30-day months\", () => {\n    const date = new MomentJS(\"1/1/2015\");\n    date.addDays(30);\n    assert.equal(\"1/31/2015\", date);\n  });\n\n  it(\"handles leap year\", () => {\n    const date = new MomentJS(\"2/1/2016\");\n    date.addDays(28);\n    assert.equal(\"02/29/2016\", date);\n  });\n\n  it(\"handles non-leap year\", () => {\n    const date = new MomentJS(\"2/1/2015\");\n    date.addDays(28);\n    assert.equal(\"03/01/2015\", date);\n  });\n});\n```\n\n###Â Concurrency\n********\n\n#### Use Promises, not callbacks\n\n**Callbacks aren't clean, and they cause excessive amounts of nesting**. With ES2015/ES6, Promises are a built-in global type. Use them!\n\n*Bad:*\n```\nimport { get } from \"request\";\nimport { writeFile } from \"fs\";\n\nget(\n  \"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\",\n  (requestErr, response, body) => {\n    if (requestErr) {\n      console.error(requestErr);\n    } else {\n      writeFile(\"article.html\", body, writeErr => {\n        if (writeErr) {\n          console.error(writeErr);\n        } else {\n          console.log(\"File written\");\n        }\n      });\n    }\n  }\n);\n```\n\n*Good:*\n```\nimport { get } from \"request-promise\";\nimport { writeFile } from \"fs-extra\";\n\nget(\"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\")\n  .then(body => {\n    return writeFile(\"article.html\", body);\n  })\n  .then(() => {\n    console.log(\"File written\");\n  })\n  .catch(err => {\n    console.error(err);\n  });\n```\n\n\n#### Async/Await are even cleaner than Promises\n\n**Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution**. All you need is a function that is prefixed in an async keyword, and then you can write your logic imperatively without a then chain of functions. Use this if you can take advantage of ES2017/ES8 features today!\n\n*Bad:*\n```\nimport { get } from \"request-promise\";\nimport { writeFile } from \"fs-extra\";\n\nget(\"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\")\n  .then(body => {\n    return writeFile(\"article.html\", body);\n  })\n  .then(() => {\n    console.log(\"File written\");\n  })\n  .catch(err => {\n    console.error(err);\n  });\n```\n\n*Good:*\n```\nimport { get } from \"request-promise\";\nimport { writeFile } from \"fs-extra\";\n\nasync function getCleanCodeArticle() {\n  try {\n    const body = await get(\n      \"https://en.wikipedia.org/wiki/Robert_Cecil_Martin\"\n    );\n    await writeFile(\"article.html\", body);\n    console.log(\"File written\");\n  } catch (err) {\n    console.error(err);\n  }\n}\n\ngetCleanCodeArticle()\n```\n\n\n### Error Handling\n\n**Thrown errors are a good thing!** They mean the **runtime has successfully identified when something in your program has gone wrong** and it's letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.\n\n#### Don't ignore caught errors\n\n**Doing nothing with a caught error doesn't give you the ability to ever fix or react to said error**. Logging the error to the console (console.log) isn't much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a try/catch it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.\n\n*Bad:*\n```\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  console.log(error);\n}\n```\n*Good:*\n\n```\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  // One option (more noisy than console.log):\n  console.error(error);\n  // Another option:\n  notifyUserOfError(error);\n  // Another option:\n  reportErrorToService(error);\n  // OR do all three!\n}\n```\n\n####Â Don't ignore rejected promises\n\nFor the same reason you shouldn't ignore caught errors from try/catch.\n\n*Bad:*\n```\ngetdata()\n  .then(data => {\n    functionThatMightThrow(data);\n  })\n  .catch(error => {\n    console.log(error);\n  });\n```\n\n*Good:*\n\n```\ngetdata()\n  .then(data => {\n    functionThatMightThrow(data);\n  })\n  .catch(error => {\n    // One option (more noisy than console.log):\n    console.error(error);\n    // Another option:\n    notifyUserOfError(error);\n    // Another option:\n    reportErrorToService(error);\n    // OR do all three!\n  });\n```","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-testing-concurrency-error-handling","weblink":"https://codersnack.com/js-clean-code-testing-concurrency-error-handling","featured_image_preview":{"id":153,"name":"js-clean-code.png","hash":"dc35860973874ba49ba008d44f33aa8e","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/dc35860973874ba49ba008d44f33aa8e.png","provider":"local","provider_metadata":null,"created_at":"2021-11-29T09:29:29.866Z","updated_at":"2021-11-29T09:29:29.866Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - Testing - Concurrency - Error Handling","created_at":"2021-11-29T09:30:01.281Z","updated_at":"2021-11-29T09:30:01.284Z"},{"id":116,"codersnack":{"id":118,"header":"Javascript Clean Code - Formatting - Comments","created_at":"2021-11-29T09:42:12.887Z","updated_at":"2021-11-29T09:42:12.887Z","explanation":"### Formatting\n\n**Formatting is subjective**. Like many rules herein, there is no hard and fast rule that you must follow. **The main point is DO NOT ARGUE over formatting**. **There are tons of tools to automate this**. Use one! It's a waste of time and money for engineers to argue over formatting.\n\nFor things that don't fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.\n\n#### Use consistent capitalization\n\n**JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc.** These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, **just be consistent**.\n\n*Bad:*\n```\nconst DAYS_IN_WEEK = 7;\nconst daysInMonth = 30;\n\nconst songs = [\"Back In Black\", \"Stairway to Heaven\", \"Hey Jude\"];\nconst Artists = [\"ACDC\", \"Led Zeppelin\", \"The Beatles\"];\n\nfunction eraseDatabase() {}\nfunction restore_database() {}\n\nclass animal {}\nclass Alpaca {}\n```\n\n*Good:*\n\n```\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = 30;\n\nconst SONGS = [\"Back In Black\", \"Stairway to Heaven\", \"Hey Jude\"];\nconst ARTISTS = [\"ACDC\", \"Led Zeppelin\", \"The Beatles\"];\n\nfunction eraseDatabase() {}\nfunction restoreDatabase() {}\n\nclass Animal {}\nclass Alpaca {}\n```\n\n#### Function callers and callees should be close\n\n**If a function calls another, keep those functions vertically close in the source file**. Ideally, **keep the caller right above the callee**. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.\n\n*Bad:*\n```\nclass PerformanceReview {\n  constructor(employee) {\n    this.employee = employee;\n  }\n\n  lookupPeers() {\n    return db.lookup(this.employee, \"peers\");\n  }\n\n  lookupManager() {\n    return db.lookup(this.employee, \"manager\");\n  }\n\n  getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  perfReview() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n  }\n\n  getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.perfReview();\n\n```\n*Good:*\n```\nclass PerformanceReview {\n  constructor(employee) {\n    this.employee = employee;\n  }\n\n  perfReview() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n  }\n\n  getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  lookupPeers() {\n    return db.lookup(this.employee, \"peers\");\n  }\n\n  getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  lookupManager() {\n    return db.lookup(this.employee, \"manager\");\n  }\n\n  getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.perfReview();\n```\n\n### Comments\n\n**-------**\n\n#### Only comment things that have business logic complexity.\nComments are an apology, not a requirement. **Good code mostly documents itself**.\n\n*Bad:*\n```\nfunction hashIt(data) {\n  // The hash\n  let hash = 0;\n\n  // Length of string\n  const length = data.length;\n\n  // Loop through every character in data\n  for (let i = 0; i < length; i++) {\n    // Get character code.\n    const char = data.charCodeAt(i);\n    // Make the hash\n    hash = (hash << 5) - hash + char;\n    // Convert to 32-bit integer\n    hash &= hash;\n  }\n}\n```\n*Good:*\n```\nfunction hashIt(data) {\n  let hash = 0;\n  const length = data.length;\n\n  for (let i = 0; i < length; i++) {\n    const char = data.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n\n    // Convert to 32-bit integer\n    hash &= hash;\n  }\n}\n```\n\n\n#### Don't leave commented out code in your codebase\n\nVersion control exists for a reason. Leave old code in your history.\n\n*Bad:*\n```\ndoStuff();\n// doOtherStuff();\n// doSomeMoreStuff();\n// doSoMuchStuff();\n```\nGood:\n```\ndoStuff();\n```\n\n####Â Don't have journal comments\n\nRemember, use version control! There's no need for dead code, commented code, and especially journal comments. **Use git log to get history!**\n\n*Bad:*\n```\n/**\n * 2016-12-20: Removed monads, didn't understand them (RM)\n * 2016-10-01: Improved using special monads (JP)\n * 2016-02-03: Removed type-checking (LI)\n * 2015-03-14: Added combine with type-checking (JR)\n */\nfunction combine(a, b) {\n  return a + b;\n}\n```\n\n*Good:*\n```\nfunction combine(a, b) {\n  return a + b;\n}\n```\n\n####Â Avoid positional markers\n\nThey usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.\n\n*Bad:*\n```\n////////////////////////////////////////////////////////////////////////////////\n// Scope Model Instantiation\n////////////////////////////////////////////////////////////////////////////////\n$scope.model = {\n  menu: \"foo\",\n  nav: \"bar\"\n};\n\n////////////////////////////////////////////////////////////////////////////////\n// Action setup\n////////////////////////////////////////////////////////////////////////////////\nconst actions = function() {\n  // ...\n};\n```\n*Good:*\n```\n$scope.model = {\n  menu: \"foo\",\n  nav: \"bar\"\n};\n\nconst actions = function() {\n  // ...\n};\n```","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-formatting-comment","weblink":"https://codersnack.com/js-clean-code-formatting-comment","featured_image_preview":{"id":154,"name":"js-clean-code.png","hash":"ac01e5bb7f0d476da2169f51a8c3e466","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/ac01e5bb7f0d476da2169f51a8c3e466.png","provider":"local","provider_metadata":null,"created_at":"2021-11-29T09:42:12.898Z","updated_at":"2021-11-29T09:42:12.898Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - Formatting - Comments","created_at":"2021-11-29T09:42:40.584Z","updated_at":"2021-11-29T09:42:40.587Z"},{"id":123,"codersnack":{"id":123,"header":"Refactoring - Composing Methods","created_at":"2021-12-01T22:04:08.825Z","updated_at":"2021-12-01T22:04:08.825Z","explanation":"Much of refactoring is devoted to correctly composing methods. In most cases, **excessively long methods are the root of all evil**. The vagaries of code inside these methods conceal the execution logic and **make the method extremely hard to understand**âand **even harder to change**.\n\nThe refactoring techniques in this group **streamline methods**, **remove code duplication**, and **pave the way for future improvements**.\n\n##Â Extract Method\n\n**Problem**\nYou have a code fragment that can be grouped together.\n\n**Solution**\nMove this code to a separate new method (or function) and replace the old code with a call to the method.\n\n*Bad*\n``` \nprintOwing(): void {\n  printBanner();\n\n  // Print details.\n  console.log(\"name: \" + name);\n  console.log(\"amount: \" + getOutstanding());\n}\n``` \n*Good*\n``` \nprintOwing(): void {\n  printBanner();\n  printDetails(getOutstanding());\n}\n\nprintDetails(outstanding: number): void {\n  console.log(\"name: \" + name);\n  console.log(\"amount: \" + outstanding);\n}\n``` \n\n***************\n> **Why Refactor**\n**The more lines found in a method, the harder itâs to figure out what the method does**. This is the main reason for this refactoring.\nBesides eliminating rough edges in your code, extracting methods is also a step in many other refactoring approaches.\n\n***************\n> **Benefits**\n- **More readable code!** Be sure to give the new method a name that describes the methodâs purpose: createOrder(), renderCustomerInfo(), etc.\n- **Less code duplication**. Often the code thatâs found in a method can be reused in other places in your program. So you can replace duplicates with calls to your new method.\n- **Isolates independent parts of code**, meaning that errors are less likely (such as if the wrong variable is modified).\n\n***************\n> **How to Refactor**\nCreate a new method and name it in a way that makes its purpose self-evident.\n**Copy the relevant code fragment to your new method**. Delete the fragment from its old location and put a call for the new method there instead.\n**Find all variables used in this code fragment**. If theyâre declared inside the fragment and not used outside of it, simply leave them unchangedâtheyâll become local variables for the new method.\nIf the variables are declared prior to the code that youâre extracting, you will need to pass these variables to the parameters of your new method in order to use the values previously contained in them. Sometimes itâs easier to get rid of these variables by resorting to *Replace Temp with Query*.\nIf you see that a local variable changes in your extracted code in some way, this may mean that this changed value will be needed later in your main method. Double-check! And if this is indeed the case, return the value of this variable to the main method to keep everything functioning.\n\n\n## Inline Method\n\n**Problem**\nWhen a method body is more obvious than the method itself, use this technique.\n\n**Solution**\nReplace calls to the method with the methodâs content and delete the method itself.\n\n*Bad*\n```\nclass PizzaDelivery {\n  // ...\n  getRating(): number {\n    return moreThanFiveLateDeliveries() ? 2 : 1;\n  }\n  moreThanFiveLateDeliveries(): boolean {\n    return numberOfLateDeliveries > 5;\n  }\n}\n```\n*Good*\n```\nclass PizzaDelivery {\n  // ...\n  getRating(): number {\n    return numberOfLateDeliveries > 5 ? 2 : 1;\n  }\n}\n```\n> **Why Refactor**\nA method simply delegates to another method. In itself, this delegation is no problem. **But when there are many such methods, they become a confusing tangle thatâs hard to sort through.**\nOften methods arenât too short originally, but become that way as changes are made to the program. So donât be shy about getting rid of methods that have outlived their use.\n\n***************\n\n> **Benefits**\nBy minimizing the number of unneeded methods, you make the code more straightforward.\n\n***************\n\n> **How to Refactor**\n**Make sure that the method isnât redefined in subclasses**. If the method is redefined, refrain from this technique.\n**Find all calls to the method**. Replace these calls with the content of the method.\nDelete the method.\n\n\n##Â Extract Variable\n\n**Problem**\nYou have an expression thatâs hard to understand.\n\n**Solution**\nPlace the result of the expression or its parts in separate variables that are self-explanatory.\n\n*Bad*\n```\nrenderBanner(): void {\n  if ((platform.toUpperCase().indexOf(\"MAC\") > -1) &&\n       (browser.toUpperCase().indexOf(\"IE\") > -1) &&\n        wasInitialized() && resize > 0 )\n  {\n    // do something\n  }\n}\n```\n\n*Good*\n```\nrenderBanner(): void {\n  const isMacOs = platform.toUpperCase().indexOf(\"MAC\") > -1;\n  const isIE = browser.toUpperCase().indexOf(\"IE\") > -1;\n  const wasResized = resize > 0;\n\n  if (isMacOs && isIE && wasInitialized() && wasResized) {\n    // do something\n  }\n}\n```\n> **Why Refactor**\nThe main reason for extracting variables is to make a complex expression more understandable, by dividing it into its intermediate parts. These could be:\nCondition of the if() operator or a part of the ?: operator in C-based languages\nA long arithmetic expression without intermediate results\nLong multipart lines\nExtracting a variable may be the first step towards performing **Extract Method** if you see that the extracted expression is used in other places in your code.\n\n*************\n> **Benefits**\n**More readable code!** Try to give the extracted variables good names that announce the variableâs purpose loud and clear. More readability, fewer long-winded comments. Go for names like customerTaxValue, cityUnemploymentRate, clientSalutationString, etc.\n\n*************\n> **Drawbacks**\nMore variables are present in your code. But this is counterbalanced by the ease of reading your code.\nWhen refactoring conditional expressions, remember that the compiler will most likely optimize it to minimize the amount of calculations needed to establish the resulting value. **Say you have a following expression if (a() || b()) .... The program wonât call the method b if the method a returns true because the resulting value will still be true**, no matter what value returns b.\nHowever, if you extract parts of this expression into variables, both methods will always be called, which might hurt performance of the program, especially if these methods do some heavyweight work.\n\n*************\n> **How to Refactor**\nInsert a new line before the relevant expression and declare a new variable there. Assign part of the complex expression to this variable.\nReplace that part of the expression with the new variable.\nRepeat the process for all complex parts of the expression.\n\n\n## Inline Temp\n\n**Problem**\nYou have a temporary variable thatâs assigned the result of a simple expression and nothing more.\n\n**Solution**\nReplace the references to the variable with the expression itself.\n\n*Bad*\n```\nhasDiscount(order: Order): boolean {\n  let basePrice: number = order.basePrice();\n  return basePrice > 1000;\n}\n```\n*Good*\n```\nhasDiscount(order: Order): boolean {\n  return order.basePrice() > 1000;\n}\n```\n> **Why Refactor**\nInline local variables are almost always used as part of Replace Temp with Query or to pave the way for Extract Method.\n\n****************\n\n> **Benefits**\nThis refactoring technique offers almost no benefit in and of itself. However, if the variable is assigned the result of a method, you can marginally **improve the readability of the program by getting rid of the unnecessary variable**.\n\n****************\n\n> **Drawbacks**\n**Sometimes seemingly useless temps are used to cache the result of an expensive operation thatâs reused several times**. So before using this refactoring technique, **make sure that simplicity wonât come at the cost of performance**.\n\n****************\n\n> **How to Refactor**\nFind all places that use the variable. Instead of the variable, use the expression that had been assigned to it.\nDelete the declaration of the variable and its assignment line.\n\n\n## Replace Temp with Query\n\n**Problem**\nYou place the result of an expression in a local variable for later use in your code.\n\n**Solution**\nMove the entire expression to a separate method and return the result from it. Query the method instead of using a variable. Incorporate the new method in other methods, if necessary.\n\n*Bad*\n```\n calculateTotal(): number {\n  let basePrice = quantity * itemPrice;\n  if (basePrice > 1000) {\n    return basePrice * 0.95;\n  }\n  else {\n    return basePrice * 0.98;\n  }\n}\n```\n*Good*\n```\ncalculateTotal(): number {\n  if (basePrice() > 1000) {\n    return basePrice() * 0.95;\n  }\n  else {\n    return basePrice() * 0.98;\n  }\n}\nbasePrice(): number {\n  return quantity * itemPrice;\n}\n```\n\n> **Why Refactor**\nThis refactoring can lay the groundwork for applying Extract Method for a portion of a very long method.\nThe same expression may sometimes be found in other methods as well, which is one reason to consider creating a common method.\n\n*****************\n\n> **Benefits**\n**Code readability**. Itâs much easier to understand the purpose of the method getTax() than the line orderPrice() * 0.2.\nSlimmer code via deduplication, if the line being replaced is used in multiple methods.\n\n*****************\n\n> **Good to Know**\n**Performance**\nThis refactoring may prompt the question of whether this approach is **liable to cause a performance hit**. The honest answer is: yes, it is, since the resulting code may be burdened by querying a new method. **But with todayâs fast CPUs and excellent compilers, the burden will almost always be minimal.** By contrast, readable code and the ability to reuse this method in other places in program codeâthanks to this refactoring approachâare very noticeable benefits.\nNonetheless, **if your temp variable is used to cache the result of a truly time-consuming expression**, you may want to stop this refactoring after extracting the expression to a new method.\n\n*****************\n\n> **How to Refactor**\nMake sure that a value is assigned to the variable once and only once within the method. If not, use Split Temporary Variable to ensure that the variable will be used only to store the result of your expression.\nUse Extract Method to place the expression of interest in a new method. Make sure that this method only returns a value and doesnât change the state of the object. If the method affects the visible state of the object, use Separate Query from Modifier.\nReplace the variable with a query to your new method.\n\n\n##Â Split Temporary Variable\n\n**Problem**\nYou have a local variable thatâs used to store various intermediate values inside a method (except for cycle variables).\n\n**Solution**\nUse different variables for different values. Each variable should be responsible for only one particular thing.\n\n*Bad*\n```\nlet temp = 2 * (height + width);\nconsole.log(temp);\ntemp = height * width;\nconsole.log(temp);\n```\n*Good*\n```\nconst perimeter = 2 * (height + width);\nconsole.log(perimeter);\nconst area = height * width;\nconsole.log(area);\n```\n\n> **Why Refactor**\n**If youâre skimping on the number of variables inside a function and reusing them for various unrelated purposes, youâre sure to encounter problems as soon as you need to make changes to the code containing the variables**. You will have to recheck each case of variable use to make sure that the correct values are used.\n\n***************\n\n> **Benefits**\n**Each component of the program code should be responsible for one and one thing only**. This makes it much easier to maintain the code, since you can easily replace any particular thing without fear of unintended effects.\n**Code becomes more readable**. If a variable was created long ago in a rush, it probably has a name that doesnât explain anything: k, a2, value, etc. But you can fix this situation by naming the new variables in an understandable, self-explanatory way. Such names might resemble customerTaxValue, cityUnemploymentRate, clientSalutationString and the like.\nThis refactoring technique is useful if you anticipate using Extract Method later.\n\n***************\n\n> **How to Refactor**\nFind the first place in the code where the variable is given a value. Here you should rename the variable with a name that corresponds to the value being assigned.\nUse the new name instead of the old one in places where this value of the variable is used.\nRepeat as needed for places where the variable is assigned a different value.\n\n\n## Remove Assignments to Parameters\n\n**Problem**\nSome value is assigned to a parameter inside methodâs body.\n\n**Solution**\nUse a local variable instead of a parameter.\n\n*Bad*\n```\ndiscount(inputVal: number, quantity: number): number {\n  if (quantity > 50) {\n    inputVal -= 2;\n  }\n  // ...\n}\n```\n*Good*\n```\ndiscount(inputVal: number, quantity: number): number {\n  let result = inputVal;\n  if (quantity > 50) {\n    result -= 2;\n  }\n  // ...\n}\n```\n> **Why Refactor**\n**The reasons for this refactoring are the same as for Split Temporary Variable, but in this case weâre dealing with a parameter, not a local variable.**\nFirst, if a **parameter is passed via reference**, then after the parameter value is changed inside the method, this value is passed to the argument that requested calling this method. Very often, this occurs accidentally and leads to unfortunate effects. Even if parameters are usually passed by value (and not by reference) in your programming language, this coding quirk may alienate those who are unaccustomed to it.\nSecond, **multiple assignments of different values to a single parameter make it difficult for you to know what data should be contained in the parameter at any particular point in time**. The problem worsens if your parameter and its contents are documented but the actual value is capable of differing from whatâs expected inside the method.\n\n**************\n\n> **Benefits**\n**Each element of the program should be responsible for only one thing**. This makes code maintenance much easier going forward, since you can safely replace code without any side effects.\nThis refactoring helps to extract repetitive code to separate methods.\n\n**************\n\n> **How to Refactor**\nCreate a local variable and assign the initial value of your parameter.\nIn all method code that follows this line, replace the parameter with your new local variable.\n\n\n##Â Replace Method with Method Object\n\n**Problem**\nYou have a long method in which the local variables are so intertwined that you canât apply Extract Method.\n\n**Solution**\nTransform the method into a separate class so that the local variables become fields of the class. Then you can split the method into several methods within the same class.\n\n*Bad*\n```\nclass Order {\n  // ...\n  price(): number {\n    let primaryBasePrice;\n    let secondaryBasePrice;\n    let tertiaryBasePrice;\n    // Perform long computation.\n  }\n}\n```\n*Good*\n```\nclass Order {\n  // ...\n  price(): number {\n    return new PriceCalculator(this).compute();\n  }\n}\n\nclass PriceCalculator {\n  private _primaryBasePrice: number;\n  private _secondaryBasePrice: number;\n  private _tertiaryBasePrice: number;\n  \n  constructor(order: Order) {\n    // Copy relevant information from the\n    // order object.\n  }\n  \n  compute(): number {\n    // Perform long computation.\n  }\n}\n```\n> **Why Refactor**\n**A method is too long and you canât separate it due to tangled masses of local variables that are hard to isolate from each other**.\nThe first step is to isolate the entire method into a separate class and turn its local variables into fields of the class.\nFirstly, this allows isolating the problem at the class level. Secondly, it paves the way for splitting a large and unwieldy method into smaller ones that wouldnât fit with the purpose of the original class anyway.\n\n**************\n\n> **Benefits**\nIsolating a long method in its own class allows stopping a method from ballooning in size. This also allows splitting it into submethods within the class, without polluting the original class with utility methods.\n\n**************\n\n> **Drawbacks**\n**Another class is added, increasing the overall complexity of the program.**\n\n**************\n\n> **How to Refactor**\nCreate a new class. Name it based on the purpose of the method that youâre refactoring.\nIn the new class, create a private field for storing a reference to an instance of the class in which the method was previously located. It could be used to get some required data from the original class if needed.\nCreate a separate private field for each local variable of the method.\nCreate a constructor that accepts as parameters the values of all local variables of the method and also initializes the corresponding private fields.\nDeclare the main method and copy the code of the original method to it, replacing the local variables with private fields.\nReplace the body of the original method in the original class by creating a method object and calling its main method.\n\n\n##Â Substitute Algorithm\n\n**Problem**\nSo you want to replace an existing algorithm with a new one?\n\n**Solution**\nReplace the body of the method that implements the algorithm with a new algorithm.\n\n*Bad*\n```\nfoundPerson(people: string[]): string{\n  for (let person of people) {\n    if (person.equals(\"Don\")){\n      return \"Don\";\n    }\n    if (person.equals(\"John\")){\n      return \"John\";\n    }\n    if (person.equals(\"Kent\")){\n      return \"Kent\";\n    }\n  }\n  return \"\";\n}\n```\n*Good*\n```\nfoundPerson(people: string[]): string{\n  let candidates = [\"Don\", \"John\", \"Kent\"];\n  for (let person of people) {\n    if (candidates.includes(person)) {\n      return person;\n    }\n  }\n  return \"\";\n}\n```\n> **Why Refactor**\nGradual refactoring isnât the only method for improving a program. Sometimes a method is so cluttered with issues that itâs easier to tear down the method and start fresh. And perhaps you have found an algorithm thatâs much simpler and more efficient. If this is the case, you should simply replace the old algorithm with the new one.\nAs time goes on, your algorithm may be incorporated into a well-known library or framework and you want to get rid of your independent implementation, in order to simplify maintenance.\nThe requirements for your program may change so heavily that your existing algorithm canât be salvaged for the task.\n\n**************\n\n> **How to Refactor**\nMake sure that you have simplified the existing algorithm as much as possible. Move unimportant code to other methods using Extract Method. The fewer moving parts in your algorithm, the easier itâs to replace.\nCreate your new algorithm in a new method. Replace the old algorithm with the new one and start testing the program.\nIf the results donât match, return to the old implementation and compare the results. Identify the causes of the discrepancy. While the cause is often an error in the old algorithm, itâs more likely due to something not working in the new one.\nWhen all tests are successfully completed, delete the old algorithm for good!\n\n","references":"\n- [Refactoring Catalog - Composing methods](https://refactoring.guru/refactoring/techniques/composing-methods)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-refactoring-catalog-composing-methods","weblink":"https://codersnack.com/js-clean-code-refactoring-catalog-composing-methods","featured_image_preview":{"id":159,"name":"js-clean-code.png","hash":"7da36b41bbd94f2298e68133f6333f3c","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/7da36b41bbd94f2298e68133f6333f3c.png","provider":"local","provider_metadata":null,"created_at":"2021-12-01T22:04:08.841Z","updated_at":"2021-12-01T22:04:08.841Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - Refactoring - Composing Methods","created_at":"2021-12-01T22:04:49.181Z","updated_at":"2021-12-01T22:04:49.186Z"},{"id":125,"codersnack":{"id":124,"header":"Refactoring - Moving features between objects","created_at":"2021-12-02T15:52:55.948Z","updated_at":"2021-12-02T15:52:55.948Z","explanation":"Even if you have distributed functionality among different classes in a less-than-perfect way, thereâs still hope.\n\nThese refactoring techniques show **how to safely move functionality between classes, create new classes, and hide implementation details from public access**.\n\n##Â Move Method\n\n**Problem**\nA **method is used more in another class than in its own class**.\n\n**Solution**\nCreate a new method in the class that uses the method the most, then move code from the old method to there. Turn the code of the original method into a reference to the new method in the other class or else remove it entirely.\n\n> **Why Refactor**\nYou want to move a method to a class that contains most of the data used by the method. This **makes classes more internally coherent**.\nYou want to move a method in order to reduce or eliminate the dependency of the class calling the method on the class in which itâs located. This can be useful if the calling class is already dependent on the class to which youâre planning to move the method. This reduces dependency between classes.\n\n******************\n\n> **How to Refactor**\n1.-**Verify all features used by the old method in its class**. It may be a good idea to move them as well. **As a rule, if a feature is used only by the method under consideration, you should certainly move the feature to it**. If the feature is used by other methods too, you should move these methods as well. Sometimes itâs much easier to move a large number of methods than to set up relationships between them in different classes.\n2.-**Make sure that the method isnât declared in superclasses and subclasses**. If this is the case, you will either have to refrain from moving or else implement a kind of polymorphism in the recipient class in order to ensure varying functionality of a method split up among donor classes.\n3.-**Declare the new method in the recipient class**. You may want to give a new name for the method thatâs more appropriate for it in the new class.\n4.-**Decide how you will refer to the recipient class**. You may already have a field or method that returns an appropriate object, but if not, you will need to write a new method or field to store the object of the recipient class.\n5.-Now you have a way to refer to the recipient object and a new method in its class. With all this under your belt, you can turn the old method into a reference to the new method.\nTake a look: can you delete the old method entirely? If so, **place a reference to the new method in all places that use the old one**.\n\n\n## Move Field\n\n**Problem**\nA **field is used more in another class than in its own class.**\n\n**Solution**\nCreate a field in a new class and redirect all users of the old field to it.\n\n\n> **Why Refactor**\nOften fields are moved as part of the Extract Class technique. Deciding which class to leave the field in can be tough. **Here is our rule of thumb: put a field in the same place as the methods that use it (or else where most of these methods are).**\nThis rule will help in other cases when a field is simply located in the wrong place.\n\n***************\n\n> **How to Refactor**\n1.-If the field is public, refactoring will be much easier if you make the field private and provide public access methods (for this, you can use Encapsulate Field).\n2.-Create the same field with access methods in the recipient class.\n3.-Decide how you will refer to the recipient class. You may already have a field or method that returns the appropriate object; if not, you will need to write a new method or field to store the object of the recipient class.\n4.-Replace all references to the old field with appropriate calls to methods in the recipient class. If the field isnât private, take care of this in the superclass and subclasses.\n5.-Delete the field in the original class.\n\n\n\n##  Extract Class\n\n**Problem**\n**When one class does the work of two, awkwardness results.**\n\n**Solution**\nInstead, create a new class and place the fields and methods responsible for the relevant functionality in it.\n\n![js-clean-code-refactoring-extract-class](https://codersnack.com/assets/images/js-clean-code-refactoring-extract-class.png)\n\n\n> **Why Refactor**\nClasses always start out clear and easy to understand. They do their job and mind their own business as it were, without butting into the work of other classes. But **as the program expands, a method is added and then a field... and eventually, some classes are performing more responsibilities than ever envisioned.**\n\n**************\n\n> **Benefits**\n**This refactoring method will help maintain adherence to the Single Responsibility Principle**. The code of your classes will be more obvious and understandable.\nSingle-responsibility classes are more reliable and tolerant of changes. For example, say that you have a class responsible for ten different things. When you change this class to make it better for one thing, you risk breaking it for the nine others.\n\n**************\n\n> **Drawbacks**\nIf you âoverdo itâ with this refactoring technique, you will have to resort to Inline Class.\n\n**************\n\n> **How to Refactor**\n1.-Before starting, decide on how exactly you want to split up the responsibilities of the class.\n2.-Create a new class to contain the relevant functionality.\n3.-Create a relationship between the old class and the new one. Optimally, this relationship is unidirectional; this allows reusing the second class without any issues. Nonetheless, if you think that a two-way relationship is necessary, this can always be set up.\n4.-**Use Move Field and Move Method for each field and method that you have decided to move to the new class**. For methods, start with private ones in order to reduce the risk of making a large number of errors. Try to relocate just a little bit at a time and test the results after each move, in order to avoid a pileup of error-fixing at the very end.\nAfter youâre done moving, take one more look at the resulting classes. An old class with changed responsibilities may be renamed for increased clarity. Check again to see whether you can get rid of two-way class relationships, if any are present.\n5.-**Also give thought to accessibility to the new class from the outside**. You can hide the class from the client entirely by making it private, managing it via the fields from the old class. Alternatively, you can make it a public one by allowing the client to change values directly. Your decision here depends on how safe itâs for the behavior of the old class when unexpected direct changes are made to the values in the new class.\n\n\n##Â  Inline Class\n\n**Problem**\n**A class does almost nothing and isnât responsible for anything, and no additional responsibilities are planned for it.**\n\n**Solution**\nMove all features from the class to another one.\n\n![js-clean-code-refactoring-inline-class](https://codersnack.com/assets/images/js-clean-code-refactoring-inline-class.png)\n\n> **Why Refactor**\nOften this technique is needed after the features of one class are âtransplantedâ to other classes, leaving that class with little to do.\n\n**************\n\n> **Benefits**\n**Eliminating needless classes frees up operating memory on the computerâand bandwidth in your head**.\n\n**************\n\n> **How to Refactor**\n1.-In the recipient class, create the public fields and methods present in the donor class. 2.-Methods should refer to the equivalent methods of the donor class.\n3.-Replace all references to the donor class with references to the fields and methods of the recipient class.\n4.-Now test the program and make sure that no errors have been added. If tests show that everything is working A-OK, start using Move Method and Move Field to completely transplant all functionality to the recipient class from the original one. Continue doing so until the original class is completely empty.\n5.-Delete the original class.\n\n\n##  Hide Delegate\n\n**Problem**\nThe client gets object B from a field or method of object Ð. Then the client calls a method of object B.\n\n**Solution**\nCreate a new method in class A that delegates the call to object B. Now **the client doesnât know about, or depend on, class B.**\n\n![js-clean-code-refactoring-hide-delegate](https://codersnack.com/assets/images/js-clean-code-refactoring-hide-delegate.png)\n\n> **Why Refactor**\nTo start with, letâs look at terminology:\n- **Server is the object to which the client has direct access**.\n- **Delegate is the end object that contains the functionality needed by the client**.\nA call chain appears when a client requests an object from another object, then the second object requests another one, and so on. **These sequences of calls involve the client in navigation along the class structure. Any changes in these interrelationships will require changes on the client side**.\n\n**************\n\n> **Benefits**\n**Hides delegation from the client**. The less that the client code needs to know about the details of relationships between objects, the **easier itâs to make changes to your program.**\n\n**************\n\n> **Drawbacks**\nIf you need to create an excessive number of delegating methods, server-class risks becoming an unneeded go-between, leading to an **excess of Middle Man**.\n\n**************\n\n> **How to Refactor**\n1.-For each method of the delegate-class called by the client, create a method in the server-class that delegates the call to the delegate-class.\n2.-Change the client code so that it calls the methods of the server-class.\n3.-If your changes free the client from needing the delegate-class, you can remove the access method to the delegate-class from the server-class (the method that was originally used to get the delegate-class).\n\n\n##  Remove Middle Man\n**Problem**\n**A class has too many methods that simply delegate to other objects.**\n\n**Solution**\nDelete these methods and force the client to call the end methods directly.\n\n![js-clean-code-refactoring-remove-middle-man](https://codersnack.com/assets/images/js-clean-code-refactoring-remove-middle-man.png)\n\n> **Why Refactor**\nTo describe this technique, weâll use the terms from Hide Delegate, which are:\n- Server is the object to which the client has direct access.\n- Delegate is the end object that contains the functionality needed by the client.\nThere are two types of problems:\nThe server-class doesnât do anything itself and simply creates needless complexity. In this case, give thought to whether this class is needed at all.\nEvery time a new feature is added to the delegate, you need to create a delegating method for it in the server-class. If a lot of changes are made, this will be rather tiresome.\n\n**************\n\n> **How to Refactor**\nCreate a getter for accessing the delegate-class object from the server-class object.\nReplace calls to delegating methods in the server-class with direct calls for methods in the delegate-class.\n\n\n##  Introduce Foreign Method\n**Problem**\nA utility class doesnât contain the method that you need and you canât add the method to the class.\n\n**Solution**\nAdd the method to a client class and pass an object of the utility class to it as an argument.\n\n```\nclass Report {\n  // ...\n  sendReport(): void {\n    let nextDay: Date = new Date(previousEnd.getYear(),\n      previousEnd.getMonth(), previousEnd.getDate() + 1);\n    // ...\n  }\n}\n```\n```\nclass Report {\n  // ...\n  sendReport() {\n    let newStart: Date = nextDay(previousEnd);\n    // ...\n  }\n  private static nextDay(arg: Date): Date {\n    return new Date(arg.getFullYear(), arg.getMonth(), arg.getDate() + 1);\n  }\n}\n```\n\n> **Why Refactor**\nYou have code that uses the data and methods of a certain class. You realize that the code will look and work much better inside a new method in the class. But you canât add the method to the class because, for example, the class is located in a third-party library.\nThis refactoring has a big payoff when the code that you want to move to the method is repeated several times in different places in your program.\nSince youâre passing an object of the utility class to the parameters of the new method, you have access to all of its fields. Inside the method, you can do practically everything that you want, as if the method were part of the utility class.\n\n**************\n\n> **Benefits**\n**Removes code duplication**. If your code is repeated in several places, you can replace these code fragments with a method call. This is better than duplication even considering that the foreign method is located in a suboptimal place.\n\n**************\n\n> **Drawbacks**\nThe reasons for having the method of a utility class in a client class wonât always be clear to the person maintaining the code after you. If the method can be used in other classes, you could benefit by creating a wrapper for the utility class and placing the method there. This is also beneficial when there are several such utility methods. Introduce Local Extension can help with this.\n\n**************\n\n> **How to Refactor**\n1.-Create a new method in the client class.\n2.-In this method, create a parameter to which the object of the utility class will be passed. If this object can be obtained from the client class, you donât have to create such a parameter.\n3.-Extract the relevant code fragments to this method and replace them with method calls.\n4.-Be sure to leave the Foreign method tag in the comments for the method along with the advice to place this method in a utility class if such becomes possible later. This will make it easier to understand why this method is located in this particular class for those whoâll be maintaining the software in the future.\n\n\n##  Introduce Local Extension\n\n**Problem**\nA utility class doesnât contain some methods that you need. But you canât add these methods to the class.\n\n**Solution**\nCreate a new class containing the methods and make it either the child or wrapper of the utility class.\n\n![js-clean-code-refactoring-introduce-local-extension](https://codersnack.com/assets/images/js-clean-code-refactoring-introduce-local-extension.png)\n\n> **Why Refactor**\nThe class that youâre using doesnât have the methods that you need. Whatâs worse, you canât add these methods (because the classes are in a third-party library, for example). There are two ways out:\n- **Create a subclass from the relevant class, containing the methods and inheriting everything else from the parent class**. This way is easier but is sometimes blocked by the utility class itself (due to final).\n- **Create a wrapper class that contains all the new methods and elsewhere will delegate to the related object from the utility class**. This method is more work since you need not only code to maintain the relationship between the wrapper and utility object, but also a large number of simple delegating methods in order to emulate the public interface of the utility class.\n\n**************\n\n> **Benefits**\nBy moving additional methods to a separate extension class (wrapper or subclass), you avoid gumming up client classes with code that doesnât fit. Program components are more coherent and are more reusable.\n\n**************\n\n> **How to Refactor**\n1.-Create a new extension class:\nOption A: **Make it a child of the utility class**.\nOption B: **If you have decided to make a wrapper, create a field in it for storing the utility class object to which delegation will be made**. When using this option, you will need to also create methods that repeat the public methods of the utility class and contain simple delegation to the methods of the utility object.\n2.-Create a constructor that uses the parameters of the constructor of the utility class.\n3.-Also create an alternative âconvertingâ constructor that takes only the object of the original class in its parameters. This will help to substitute the extension for the objects of the original class.\n4.-Create new extended methods in the class. Move foreign methods from other classes to this class or else delete the foreign methods if their functionality is already present in the extension.\n5.-Replace use of the utility class with the new extension class in places where its functionality is needed.\n","references":"- [Refactoring  - Moving features between objects](https://refactoring.guru/refactoring/techniques/moving-features-between-objects)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-refactoring-catalog-move-features-between-objects","weblink":"https://codersnack.com/js-clean-code-refactoring-catalog-move-features-between-objects","featured_image_preview":{"id":160,"name":"js-clean-code.png","hash":"a8dab32803cc49e0a29615ff99c9a756","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/a8dab32803cc49e0a29615ff99c9a756.png","provider":"local","provider_metadata":null,"created_at":"2021-12-02T15:52:55.964Z","updated_at":"2021-12-02T15:52:55.964Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - Refactoring - Moving features between objects","created_at":"2021-12-02T15:53:59.490Z","updated_at":"2021-12-02T15:53:59.494Z"},{"id":129,"codersnack":{"id":127,"header":"JS Clean Code - DRY-KISS-YAGNI Principles","created_at":"2021-12-21T17:51:01.125Z","updated_at":"2021-12-21T17:55:06.366Z","explanation":"Those are three principles that every developer should care, because they are about clean code. In this article we are going to understand what each one of them means.\n\n##  DRY Principle\n\nDRY stands for **Donât Repeat Yourself.** In the book âThe Pragmatic Programmerâ, we can see this definition for DRY:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nThis means that you should not have duplicated code. Itâs easier to maintain a code that is only in one place, because if you need to change something in the code, you just need to change in one place. Besides that, **if you have the same code in two or more places, the chance of this code become different during the time is high, and when this happens it will become an easy way to introduce bugs in your system**. Duplicated code also makes the code **more complex and unnecessarily larger**.\n\n**You also should not write ambiguous code. Your classes, your variables, your functions, they should have a specific name, and their name must match their responsibility**. If you have a function, you should know what the function does by just reading its name, **without being needed to read the code inside of it**.\n\nIn the book âThe Pragmatic Programmerâ we also can see that:\nDRY is about the duplication of knowledge, of intent. Itâs about expressing\nthe same thing in two different places, possibly in two totally different ways\nIt means that itâs not only about copy and past code â yes, this is also included - but goes beyond that. Itâs also about having different code that does the same thing. **Maybe you can have different code in two or more places, but they do the same thing in different ways, this also should be avoided.**\n\n**Bad**\n``` \nfunction orderInfo(order){\n     \n    // Comprobar estado del pedido\n    if(order.status==\"sent\"){\n        console.log(\"your order was already sent\");\n         \n    }else{\n        console.log(\"your order isn't send yet, is in the process\" + order.status);\n    }\n \n    // ....\n \n}\n \nfunction editOrder(order){\n     \n    // Comprobar estado del pedido\n    if(order.status==\"sent\"){\n        console.log(\"your order was already sent\");\n         \n    }else{\n        console.log(\"your order isn't send yet, is in the process\" + order.status);\n    }\n \n    // Edit order\n    // ....\n \n}\n``` \n**Good**\nEncapsular en una funciÃ³n y llamarla desde distintos sitios:\n``` \nfunction orderInfo(order){\n     \n    getOrderStatusInfo(order);\n \n    // ....\n \n}\n \nfunction editOrder(order){\n     \n    getOrderStatusInfo(order);\n \n    // Edit order\n    // ....\n \n}\n \nfunction getOrderStatusInfo(order){\n     \n    // Comprobar estado del pedido\n    if(order.status==\"sent\"){\n        console.log(\"your order was already sent\");\n    }else{\n        console.log(\"your order isn't send yet, is in the process\"+order.status);\n    }\n}\n``` \n\n\n\n##Â  KISS Principle\n\n\nKISS is an acronym for **Keep It Simple, Stupid**. This principle says about to make your code simple. You should avoid **unnecessary complexity**. A simple code itâs **easier to maintain and easier to understand.**\n\nYou can apply this principle in the design and in the implementation of the code. You should eliminate duplicated code, should remove unnecessary features, donât use unnecessary variables and methods, **use names for variables and methods that makes sense and matches their responsibilities**, and always when itâs possible, follow know standards of code development. You also should separate the responsibilities of your classes and the responsibilities from the layers of the project.\n\nSometimes you donât need to implement something new to attend your needs, **you can simply make use of the features of the programming language that you are using**. For that, itâs good that you know the features of the programming language that you are working with.\n\nIf you are working in a code that itâs already implemented, **and you see something that itâs not necessary or could be simpler, you should consider refactoring it**.\n\n**Bad**\n```\ngetBooleanValue() {\n    x = true;\n    if ( x == true) {\n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\n**Good**\n```\ngetBooleanValue() {\n    x = true;\n    return x || false;\n}\n```\n\n\n\n\n## YAGNI Principle\n\nYAGNI stands for **You Ainât Gonna Need It**. Itâs a principle from software development methodology of Extreme Programming (XP). This principle says that **you should not create features that itâs not really necessary.**\n\nThis principle itâs similar to the KISS principle, once that both of them aim for a simpler solution. The difference between them itâs that **YAGNI focus on removing unnecessary functionality and logic, and KISS focus on the complexity.**\n\n> Ron Jeffries, one of the co-founders of the XP, once said:\nAlways implement things when you actually need them, never when you just foresee that you need them.\n\nIt means that you should not implement functionality just because you think that you may need it someday, but implement it just when you really need it. Doing that you will avoid spending time with implementations that were not even necessary, and maybe will never be used.\n\n##Â  Conclusion\n\nFollow these principles, will allow you to write better code. Remember that **a clean code itâs easier to main, easier to understand and for sure it will save your time** when you need to change or implement something. Avoid use duplicated code, try to keep your code as simple as possible, and just implement features when itâs really necessary.","references":"- [DRY, KISS & YAGNI Principles - Henrique Siebert Domareski](https://henriquesd.medium.com/dry-kiss-yagni-principles-1ce09d9c601f)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-dry-kiss-yagni","weblink":"https://codersnack.com/js-clean-code-dry-kiss-yagni","featured_image_preview":{"id":163,"name":"js-clean-code.jpeg","hash":"69a4d3715af945a1a52ae84af2f6b641","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/69a4d3715af945a1a52ae84af2f6b641.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-12-21T17:51:01.143Z","updated_at":"2021-12-21T17:51:01.143Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Js clean code dry kiss yagni principles","created_at":"2021-12-21T17:51:42.448Z","updated_at":"2021-12-21T17:51:42.451Z"}]