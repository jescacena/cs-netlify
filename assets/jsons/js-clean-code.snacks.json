[{"id":111,"codersnack":{"id":113,"header":"JS Clean Code - Introduction - Variables","created_at":"2021-11-28T11:06:02.741Z","updated_at":"2021-11-28T11:25:30.251Z","explanation":"![js-clean-code-wtfs](https://codersnack.com/assets/images/js-clean-code-wtfs.jpeg)\n\nSoftware engineering principles, from Robert C. Martin's book [Clean Code](https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882), **adapted for JavaScript**. This **is not a style guide**. It's a **guide to producing readable, reusable, and refactorable software in JavaScript.**\n\n**Not every principle herein has to be strictly followed**, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified **over many years of collective experience** by the authors of Clean Code.\n\nOur craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to **assess the quality of the JavaScript code that you and your team produce**.\n\nOne more thing: knowing these won't immediately make you a better software developer, and working with them for many years doesn't mean you won't make mistakes. **Every piece of code starts as a first draft,** like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. **Don't beat yourself up for first drafts that need improvement**. Beat up the code instead!\n\n\n### Variables\n\n\n####Â Use meaningful and pronounceable variable names\n\n\n*Bad:*\n\n```\nconst yyyymmdstr = moment().format(\"YYYY/MM/DD\");\n```\n*Good:*\n```\nconst currentDate = moment().format(\"YYYY/MM/DD\");\n```\n\n\n#### Use the same vocabulary for the same type of variable\n\n\n*Bad:*\n```\ngetUserInfo();\ngetClientData();\ngetCustomerRecord();\n```\n*Good:*\n```\ngetUser();\n```\n\n\n#### Use searchable names\n\n\n**We will read more code than we will ever write. It's important that the code we do write is readable and searchable.** By not naming variables that end up being meaningful for understanding our program, we hurt our readers. **Make your names searchable**. Tools like *[buddy.js](https://github.com/danielstjules/buddy.js/)* and *ESLint* can help identify unnamed constants.\n\n*Bad:*\n```\n// What the heck is 86400000 for?\nsetTimeout(blastOff, 86400000);\n```\n\n*Good:*\n\n```\n// Declare them as capitalized named constants.\nconst MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;\nsetTimeout(blastOff, MILLISECONDS_PER_DAY);\n```\n\n\n#### Use explanatory variables\n\n\n*Bad:*\n```\nconst address = \"One Infinite Loop, Cupertino 95014\";\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nsaveCityZipCode(\n  address.match(cityZipCodeRegex)[1],\n  address.match(cityZipCodeRegex)[2]\n);\n```\n*Good:*\n```\nconst address = \"One Infinite Loop, Cupertino 95014\";\nconst cityZipCodeRegex = /^[^,\\\\]+[,\\\\\\s]+(.+?)\\s*(\\d{5})?$/;\nconst [_, city, zipCode] = address.match(cityZipCodeRegex) || [];\nsaveCityZipCode(city, zipCode);\n```\n\n#### Avoid Mental Mapping\n\nExplicit is better than implicit.\n\n*Bad:*\n```\nconst locations = [\"Austin\", \"New York\", \"San Francisco\"];\nlocations.forEach(l => {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  // Wait, what is `l` for again?\n  dispatch(l);\n});\n```\n\n*Good:*\n```\nconst locations = [\"Austin\", \"New York\", \"San Francisco\"];\nlocations.forEach(location => {\n  doStuff();\n  doSomeOtherStuff();\n  // ...\n  // ...\n  // ...\n  dispatch(location);\n});\n```\n\n\n#### Don't add unneeded context\n\n\nIf your class/object name tells you something, don't repeat that in your variable name.\n\n*Bad:*\n```\nconst Car = {\n  carMake: \"Honda\",\n  carModel: \"Accord\",\n  carColor: \"Blue\"\n};\n\nfunction paintCar(car, color) {\n  car.carColor = color;\n}\n```\n*Good:*\n```\nconst Car = {\n  make: \"Honda\",\n  model: \"Accord\",\n  color: \"Blue\"\n};\n\nfunction paintCar(car, color) {\n  car.color = color;\n}\n```\n\n\n#### Use default arguments instead of short circuiting or conditionals\n\n\n**Default arguments are often cleaner than short circuiting**. Be aware that if you use them, your function will only provide default values for undefined arguments. Other \"falsy\" values such as '', \"\", false, null, 0, and NaN, will not be replaced by a default value.\n\n*Bad:*\n```\nfunction createMicrobrewery(name) {\n  const breweryName = name || \"Hipster Brew Co.\";\n  // ...\n}\n```\n*Good:*\n```\nfunction createMicrobrewery(name = \"Hipster Brew Co.\") {\n  // ...\n}\n```","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-variables","weblink":"https://codersnack.com/js-clean-code-variables","featured_image_preview":{"id":149,"name":"js-clean-code.jpeg","hash":"60954e923b5b4e45957a8940c33a0058","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/60954e923b5b4e45957a8940c33a0058.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T11:06:02.755Z","updated_at":"2021-11-28T11:06:02.755Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"javascript clean code - introduction - variables","created_at":"2021-11-28T11:06:33.856Z","updated_at":"2021-11-28T11:06:33.859Z"},{"id":112,"codersnack":{"id":114,"header":"Javascript Clean Code - Functions","created_at":"2021-11-28T11:48:33.336Z","updated_at":"2021-11-28T19:31:10.112Z","explanation":"#### Function arguments (2 or fewer ideally)\n\n**Limiting the amount of function parameters is incredibly important because it makes testing your function easier**. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.\n\n**One or two arguments is the ideal case, and three should be avoided if possible**. Anything more than that should be consolidated. Usually, **if you have more than two arguments then your function is trying to do too much**. In cases where it's not, most of the time a **higher-level object will suffice as an argument**.\n\nSince JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.\n\n**To make it obvious what properties the function expects, you can use the *ES2015/ES6 destructuring syntax***. This has a few advantages:\n\n- When someone looks at the function signature, it's immediately clear what properties are being used.\n- It can be used to **simulate named parameters**.\n- Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. ***Note*: objects and arrays that are destructured from the argument object are NOT cloned**.\n- **Linters can warn you about unused properties**, which would be impossible without destructuring.\n\n*Bad:*\n```\nfunction createMenu(title, body, buttonText, cancellable) {\n  // ...\n}\n\ncreateMenu(\"Foo\", \"Bar\", \"Baz\", true);\n```\n*Good:*\n```\nfunction createMenu({ title, body, buttonText, cancellable }) {\n  // ...\n}\n\ncreateMenu({\n  title: \"Foo\",\n  body: \"Bar\",\n  buttonText: \"Baz\",\n  cancellable: true\n});\n```\n\n\n#### Functions should do one thing\n\nThis is by far the most important rule in software engineering. **When functions do more than one thing, they are harder to compose, test, and reason about**. When you can isolate a function to just one action, **it can be refactored easily and your code will read much cleaner**. If you take nothing else away from this guide other than this, you'll be ahead of many developers.\n\n*Bad:*\n```\nfunction emailClients(clients) {\n  clients.forEach(client => {\n    const clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n```\n*Good:*\n```\nfunction emailActiveClients(clients) {\n  clients.filter(isActiveClient).forEach(email);\n}\n\nfunction isActiveClient(client) {\n  const clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n``` \n\n\n#### Function names should say what they do\n\n*Bad:*\n```\nfunction addToDate(date, month) {\n  // ...\n}\n\nconst date = new Date();\n\n// It's hard to tell from the function name what is added\naddToDate(date, 1);\n```\n\n*Good:*\n```\nfunction addMonthToDate(month, date) {\n  // ...\n}\n\nconst date = new Date();\naddMonthToDate(1, date);\n```\n\n\n#### Functions should only be one level of abstraction\n\n**When you have more than one level of abstraction your function is usually doing too much**. Splitting up functions leads to reusability and easier testing.\n\n*Bad:*\n```\nfunction parseBetterJSAlternative(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(\" \");\n  const tokens = [];\n  REGEXES.forEach(REGEX => {\n    statements.forEach(statement => {\n      // ...\n    });\n  });\n\n  const ast = [];\n  tokens.forEach(token => {\n    // lex...\n  });\n\n  ast.forEach(node => {\n    // parse...\n  });\n}\n```\n\n*Good:*\n```\nfunction parseBetterJSAlternative(code) {\n  const tokens = tokenize(code);\n  const syntaxTree = parse(tokens);\n  syntaxTree.forEach(node => {\n    // parse...\n  });\n}\n\nfunction tokenize(code) {\n  const REGEXES = [\n    // ...\n  ];\n\n  const statements = code.split(\" \");\n  const tokens = [];\n  REGEXES.forEach(REGEX => {\n    statements.forEach(statement => {\n      tokens.push(/* ... */);\n    });\n  });\n\n  return tokens;\n}\n\nfunction parse(tokens) {\n  const syntaxTree = [];\n  tokens.forEach(token => {\n    syntaxTree.push(/* ... */);\n  });\n\n  return syntaxTree;\n}\n```\n\n#### Remove duplicate code\n\nDo your absolute best to avoid duplicate code. **Duplicate code is bad because it means that there's more than one place to alter something if you need to change some logic**.\n\nImagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there's only one place to update!\n\nOftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things.**Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class**.\n\n**Getting the abstraction right is critical, that's why you should follow the [SOLID](https://en.wikipedia.org/wiki/SOLID) principles laid out in the Classes section**. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don't repeat yourself, otherwise you'll find yourself updating multiple places anytime you want to change one thing.\n\n*Bad:*\n```\nfunction showDeveloperList(developers) {\n  developers.forEach(developer => {\n    const expectedSalary = developer.calculateExpectedSalary();\n    const experience = developer.getExperience();\n    const githubLink = developer.getGithubLink();\n    const data = {\n      expectedSalary,\n      experience,\n      githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers) {\n  managers.forEach(manager => {\n    const expectedSalary = manager.calculateExpectedSalary();\n    const experience = manager.getExperience();\n    const portfolio = manager.getMBAProjects();\n    const data = {\n      expectedSalary,\n      experience,\n      portfolio\n    };\n\n    render(data);\n  });\n}\n```\n*Good:*\n```\nfunction showEmployeeList(employees) {\n  employees.forEach(employee => {\n    const expectedSalary = employee.calculateExpectedSalary();\n    const experience = employee.getExperience();\n\n    const data = {\n      expectedSalary,\n      experience\n    };\n\n    switch (employee.type) {\n      case \"manager\":\n        data.portfolio = employee.getMBAProjects();\n        break;\n      case \"developer\":\n        data.githubLink = employee.getGithubLink();\n        break;\n    }\n\n    render(data);\n  });\n}\n```\n\n\n#### Set default objects with Object.assign\n\n\n*Bad:*\n```\nconst menuConfig = {\n  title: null,\n  body: \"Bar\",\n  buttonText: null,\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  config.title = config.title || \"Foo\";\n  config.body = config.body || \"Bar\";\n  config.buttonText = config.buttonText || \"Baz\";\n  config.cancellable =\n    config.cancellable !== undefined ? config.cancellable : true;\n}\n\ncreateMenu(menuConfig);\n```\n*Good:*\n```\nconst menuConfig = {\n  title: \"Order\",\n  // User did not include 'body' key\n  buttonText: \"Send\",\n  cancellable: true\n};\n\nfunction createMenu(config) {\n  let finalConfig = Object.assign(\n    {\n      title: \"Foo\",\n      body: \"Bar\",\n      buttonText: \"Baz\",\n      cancellable: true\n    },\n    config\n  );\n  return finalConfig\n  // config now equals: {title: \"Order\", body: \"Bar\", buttonText: \"Send\", cancellable: true}\n  // ...\n}\n\ncreateMenu(menuConfig);\n```\n\n\n#### Don't use flags as function parameters\n\n**Flags tell your user that this function does more than one thing**. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.\n\n*Bad:*\n```\nfunction createFile(name, temp) {\n  if (temp) {\n    fs.create(`./temp/${name}`);\n  } else {\n    fs.create(name);\n  }\n}\n```\n*Good:*\n```\nfunction createFile(name) {\n  fs.create(name);\n}\n\nfunction createTempFile(name) {\n  createFile(`./temp/${name}`);\n}\n```\n\n\n#### Avoid Side Effects (part 1)\n\n**A function produces a side effect if it does anything other than take a value in and return another value or values**. A side effect could be **writing to a file**, **modifying some global variable**, or accidentally wiring all your money to a stranger.\n\n**Now, you do need to have side effects in a program on occasion**. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. **Don't have several functions and classes that write to a particular file. Have one service that does it**. One and only one.\n\nThe main point is to **avoid** common pitfalls like **sharing state between objects without any structure**, **using mutable data types that can be written to by anything**, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.\n\n*Bad:*\n```\n// Global variable referenced by following function.\n// If we had another function that used this name, now it'd be an array and it could break it.\nlet name = \"Ryan McDermott\";\n\nfunction splitIntoFirstAndLastName() {\n  name = name.split(\" \");\n}\n\nsplitIntoFirstAndLastName();\n\nconsole.log(name); // ['Ryan', 'McDermott'];\n```\n\n*Good:*\n\n```\nfunction splitIntoFirstAndLastName(name) {\n  return name.split(\" \");\n}\n\nconst name = \"Ryan McDermott\";\nconst newName = splitIntoFirstAndLastName(name);\n\nconsole.log(name); // 'Ryan McDermott';\nconsole.log(newName); // ['Ryan', 'McDermott'];\n```\n\n\n\n#### Avoid Side Effects (part 2)\n\nIn JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). **Objects and arrays are two kinds of mutable values so it's important to handle them carefully when they're passed as parameters to a function**. A JavaScript function can change an object's properties or alter the contents of an array which could easily cause bugs elsewhere.\n\n**Example**\nSuppose there's a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same cart array will be affected by this addition. That may be great, however it could also be bad. Let's imagine a bad situation:\nThe user clicks the \"Purchase\" button which calls a purchase function that spawns a network request and sends the cart array to the server. Because of a bad network connection, the purchase function has to keep retrying the request. Now, what if in the meantime the **user accidentally clicks an \"Add to Cart\"** button on an item they don't actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the cart array was modified.\n\n**A great solution would be for the addItemToCart function to always clone the cart, edit it, and return the clone**. This would ensure that functions that are still using the old shopping cart wouldn't be affected by the changes.\n\n**Two caveats** to mention to this approach:\n\n- There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. **Most things can be refactored to have no side effects**!\n\n- **Cloning big objects can be very expensive in terms of performance**. Luckily, this isn't a big issue in practice because there are great libraries that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.\n\n*Bad:*\n```\n\nconst addItemToCart = (cart, item) => {\n  cart.push({ item, date: Date.now() });\n};\n```\n*Good:*\n\n```\nconst addItemToCart = (cart, item) => {\n  return [...cart, { item, date: Date.now() }];\n};\n```\n\n\n#### Don't write to global functions\n\n**Polluting globals is a bad practice in JavaScript because you could clash with another library** and the user of your API would be none-the-wiser until they get an exception in production. Let's think about an **example**: what if you wanted to extend JavaScript's native Array method to have a diff method that could show the difference between two arrays? **You could write your new function to the Array.prototype, but it could clash with another library** that tried to do the same thing. What if that other library was just using diff to find the difference between the first and last elements of an array? This is why it would be much better to **just use ES2015/ES6 classes and simply extend the Array global.**\n\n*Bad:*\n```\nArray.prototype.diff = function diff(comparisonArray) {\n  const hash = new Set(comparisonArray);\n  return this.filter(elem => !hash.has(elem));\n};\n```\n*Good:*\n\n```\nclass SuperArray extends Array {\n  diff(comparisonArray) {\n    const hash = new Set(comparisonArray);\n    return this.filter(elem => !hash.has(elem));\n  }\n}\n```\n\n#### Favor functional programming over imperative programming\n\n**JavaScript isn't a functional language** in the way that Haskell is, but **it has a functional flavor to it**. **Functional languages can be cleaner and easier to test**. Favor this style of programming when you can.\n\n*Bad:*\n```\nconst programmerOutput = [\n  {\n    name: \"Uncle Bobby\",\n    linesOfCode: 500\n  },\n  {\n    name: \"Suzie Q\",\n    linesOfCode: 1500\n  },\n  {\n    name: \"Jimmy Gosling\",\n    linesOfCode: 150\n  },\n  {\n    name: \"Gracie Hopper\",\n    linesOfCode: 1000\n  }\n];\n\nlet totalOutput = 0;\n\nfor (let i = 0; i < programmerOutput.length; i++) {\n  totalOutput += programmerOutput[i].linesOfCode;\n}\n```\n*Good:*\n```\nconst programmerOutput = [\n  {\n    name: \"Uncle Bobby\",\n    linesOfCode: 500\n  },\n  {\n    name: \"Suzie Q\",\n    linesOfCode: 1500\n  },\n  {\n    name: \"Jimmy Gosling\",\n    linesOfCode: 150\n  },\n  {\n    name: \"Gracie Hopper\",\n    linesOfCode: 1000\n  }\n];\n\nconst totalOutput = programmerOutput.reduce(\n  (totalLines, output) => totalLines + output.linesOfCode,\n  0\n);\n```\n\n\n#### Encapsulate conditionals\n\n*Bad:*\n\n```\nif (fsm.state === \"fetching\" && isEmpty(listNode)) {\n  // ...\n}\n```\n*Good:*\n\n```\nfunction shouldShowSpinner(fsm, listNode) {\n  return fsm.state === \"fetching\" && isEmpty(listNode);\n}\n\nif (shouldShowSpinner(fsmInstance, listNodeInstance)) {\n  // ...\n}\n```\n\n\n\n#### Avoid negative conditionals\n\n\n*Bad:*\n```\nfunction isDOMNodeNotPresent(node) {\n  // ...\n}\n\nif (!isDOMNodeNotPresent(node)) {\n  // ...\n}\n```\n*Good:*\n```\nfunction isDOMNodePresent(node) {\n  // ...\n}\n\nif (isDOMNodePresent(node)) {\n  // ...\n}\n```\n\n\n####Â Avoid conditionals\n\nThis seems like an impossible task. Upon first hearing this, most people say, \"how am I supposed to do anything without an if statement?\" The answer is that **you can use *polymorphism* to achieve the same task in many cases**. \nThe second question is usually, \"well that's great but **why would I want to do that?**\" The answer is a previous clean code concept we learned: a function should only do one thing. **When you have classes and functions that have if statements, you are telling your user that your function does more than one thing**. Remember, just do one thing.\n\n*Bad:*\n```\nclass Airplane {\n  // ...\n  getCruisingAltitude() {\n    switch (this.type) {\n      case \"777\":\n        return this.getMaxAltitude() - this.getPassengerCount();\n      case \"Air Force One\":\n        return this.getMaxAltitude();\n      case \"Cessna\":\n        return this.getMaxAltitude() - this.getFuelExpenditure();\n    }\n  }\n}\n```\n*Good:*\n```\nclass Airplane {\n  // ...\n}\n\nclass Boeing777 extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getPassengerCount();\n  }\n}\n\nclass AirForceOne extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude();\n  }\n}\n\nclass Cessna extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getFuelExpenditure();\n  }\n}\n```\n\n\n#### Avoid type-checking (part 1)\n\n**JavaScript is untyped**, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it **becomes tempting to do type-checking in your functions**. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.\n\n*Bad:*\n```\nfunction travelToTexas(vehicle) {\n  if (vehicle instanceof Bicycle) {\n    vehicle.pedal(this.currentLocation, new Location(\"texas\"));\n  } else if (vehicle instanceof Car) {\n    vehicle.drive(this.currentLocation, new Location(\"texas\"));\n  }\n}\n```\n*Good:*\n\n```\nfunction travelToTexas(vehicle) {\n  vehicle.move(this.currentLocation, new Location(\"texas\"));\n}\n```\n\n\n#### Avoid type-checking (part 2)\n\n**If you are working with basic primitive values like strings and integers, and you can't use polymorphism but you still feel the need to type-check, you should consider using *TypeScript***. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux \"type-safety\" you get doesn't make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).\n\n*Bad:*\n```\nfunction combine(val1, val2) {\n  if (\n    (typeof val1 === \"number\" && typeof val2 === \"number\") ||\n    (typeof val1 === \"string\" && typeof val2 === \"string\")\n  ) {\n    return val1 + val2;\n  }\n\n  throw new Error(\"Must be of type String or Number\");\n}\n```\n*Good:*\n\n```\nfunction combine(val1, val2) {\n  return val1 + val2;\n}\n```\n\n\n####Â Don't over-optimize\n\n**Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time**. There are good resources for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.\n\n*Bad:*\n```\n// On old browsers, each iteration with uncached `list.length` would be costly\n// because of `list.length` recomputation. In modern browsers, this is optimized.\nfor (let i = 0, len = list.length; i < len; i++) {\n  // ...\n}\n```\n*Good:*\n```\nfor (let i = 0; i < list.length; i++) {\n  // ...\n}\n```\n\n\n#### Remove dead code\n\n**Dead code is just as bad as duplicate code**. There's no reason to keep it in your codebase. If it's not being called, get rid of it! **It will still be safe in your version history if you still need it.**\n\n*Bad:*\n\n```\nfunction oldRequestModule(url) {\n  // ...\n}\n\nfunction newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker(\"apples\", req, \"www.inventory-awesome.io\");\n```\n\n*Good:*\n\n```\nfunction newRequestModule(url) {\n  // ...\n}\n\nconst req = newRequestModule;\ninventoryTracker(\"apples\", req, \"www.inventory-awesome.io\");\n```\n\n","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-functions","weblink":"https://codersnack.com/js-clean-code-functions","featured_image_preview":{"id":150,"name":"js-clean-code.png","hash":"9bd347eb8c284806858f6cf3b6c202dd","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/9bd347eb8c284806858f6cf3b6c202dd.png","provider":"local","provider_metadata":null,"created_at":"2021-11-28T11:48:33.349Z","updated_at":"2021-11-28T11:48:33.349Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript clean code - Functions","created_at":"2021-11-28T19:31:40.343Z","updated_at":"2021-11-28T19:31:40.353Z"},{"id":113,"codersnack":{"id":115,"header":"Javascript Clean Code - Objects and Data Structures","created_at":"2021-11-28T22:08:37.818Z","updated_at":"2021-11-28T22:08:37.818Z","explanation":"\n### Use getters and setters\n\nUsing getters and setters to access data on objects could be better than simply looking for a property on an object. \"**Why?**\" you might ask. Well, here's an unorganized list of reasons why:\n\n- When **you want to do more beyond getting an object property**, you don't have to look up and change every accessor in your codebase.\n- Makes **adding validation simple when doing a set**.\n- **Encapsulates the internal representation**.\n- Easy to **add logging and error handling** when getting and setting.\n- You can **lazy load your object's properties, let's say getting it from a server**.\n\n*Bad:*\n```\nfunction makeBankAccount() {\n  // ...\n\n  return {\n    balance: 0\n    // ...\n  };\n}\n\nconst account = makeBankAccount();\naccount.balance = 100;\n```\n*Good:*\n```\nfunction makeBankAccount() {\n  // this one is private\n  let balance = 0;\n\n  // a \"getter\", made public via the returned object below\n  function getBalance() {\n    return balance;\n  }\n\n  // a \"setter\", made public via the returned object below\n  function setBalance(amount) {\n    // ... validate before updating the balance\n    balance = amount;\n  }\n\n  return {\n    // ...\n    getBalance,\n    setBalance\n  };\n}\n\nconst account = makeBankAccount();\naccount.setBalance(100);\n```\n\n### Make objects have private members\n\nThis can be accomplished through **closures** (for ES5 and below).\n\n*Bad:*\n```\nconst Employee = function(name) {\n  this.name = name;\n};\n\nEmployee.prototype.getName = function getName() {\n  return this.name;\n};\n\nconst employee = new Employee(\"John Doe\");\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: undefined\n```\n\n*Good:*\n\n```\nfunction makeEmployee(name) {\n  return {\n    getName() {\n      return name;\n    }\n  };\n}\n\nconst employee = makeEmployee(\"John Doe\");\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\ndelete employee.name;\nconsole.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe\n```\n\n\n### Classes\n\n#### Prefer ES2015/ES6 classes over ES5 plain functions\n\nIt's very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. **If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes**. However, prefer small functions over classes until you find yourself needing larger and more complex objects.\n\n*Bad:*\n```\nconst Animal = function(age) {\n  if (!(this instanceof Animal)) {\n    throw new Error(\"Instantiate Animal with `new`\");\n  }\n\n  this.age = age;\n};\n\nAnimal.prototype.move = function move() {};\n\nconst Mammal = function(age, furColor) {\n  if (!(this instanceof Mammal)) {\n    throw new Error(\"Instantiate Mammal with `new`\");\n  }\n\n  Animal.call(this, age);\n  this.furColor = furColor;\n};\n\nMammal.prototype = Object.create(Animal.prototype);\nMammal.prototype.constructor = Mammal;\nMammal.prototype.liveBirth = function liveBirth() {};\n\nconst Human = function(age, furColor, languageSpoken) {\n  if (!(this instanceof Human)) {\n    throw new Error(\"Instantiate Human with `new`\");\n  }\n\n  Mammal.call(this, age, furColor);\n  this.languageSpoken = languageSpoken;\n};\n\nHuman.prototype = Object.create(Mammal.prototype);\nHuman.prototype.constructor = Human;\nHuman.prototype.speak = function speak() {};\n```\n*Good:*\n```\nclass Animal {\n  constructor(age) {\n    this.age = age;\n  }\n\n  move() {\n    /* ... */\n  }\n}\n\nclass Mammal extends Animal {\n  constructor(age, furColor) {\n    super(age);\n    this.furColor = furColor;\n  }\n\n  liveBirth() {\n    /* ... */\n  }\n}\n\nclass Human extends Mammal {\n  constructor(age, furColor, languageSpoken) {\n    super(age, furColor);\n    this.languageSpoken = languageSpoken;\n  }\n\n  speak() {\n    /* ... */\n  }\n}\n```\n\n\n### Use method chaining\n\nThis pattern is very useful in JavaScript and **you see it in many libraries such as *jQuery* and *Lodash***. **It allows your code to be expressive, and less verbose**. For that reason, I say, use method chaining and take a look at how clean your code will be. **In your class functions, simply return *this* at the end of every function, and you can chain further class methods onto it.**\n\n*Bad:*\n```\nclass Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n  }\n\n  setModel(model) {\n    this.model = model;\n  }\n\n  setColor(color) {\n    this.color = color;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n  }\n}\n\nconst car = new Car(\"Ford\", \"F-150\", \"red\");\ncar.setColor(\"pink\");\ncar.save();\n```\n\n*Good:*\n\n```\nclass Car {\n  constructor(make, model, color) {\n    this.make = make;\n    this.model = model;\n    this.color = color;\n  }\n\n  setMake(make) {\n    this.make = make;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setModel(model) {\n    this.model = model;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  setColor(color) {\n    this.color = color;\n    // NOTE: Returning this for chaining\n    return this;\n  }\n\n  save() {\n    console.log(this.make, this.model, this.color);\n    // NOTE: Returning this for chaining\n    return this;\n  }\n}\n\nconst car = new Car(\"Ford\", \"F-150\", \"red\").setColor(\"pink\").save();\n```\n\n\n### Prefer composition over inheritance\n\nAs stated famously in [Design Patterns by the Gang of Four](https://en.wikipedia.org/wiki/Design_Patterns), **you should prefer composition over inheritance where you can**. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.\n\nYou might be wondering then, **\"when should I use inheritance?\"** It depends on your problem at hand, but this is a **decent list of when inheritance makes more sense than composition:**\n\n- **Your inheritance represents an \"is-a\" relationship and not a \"has-a\" relationship** (Human->Animal vs. User->UserDetails).\n- You **can reuse code from the base classes** (Humans can move like all animals).\n- You **want to make global changes to derived classes by changing a base class**. (Change the caloric expenditure of all animals when they move).\n\n*Bad:*\n```\nclass Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  // ...\n}\n\n// Bad because Employees \"have\" tax data. EmployeeTaxData is not a type of Employee\nclass EmployeeTaxData extends Employee {\n  constructor(ssn, salary) {\n    super();\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n```\n\n*Good:*\n\n```\nclass EmployeeTaxData {\n  constructor(ssn, salary) {\n    this.ssn = ssn;\n    this.salary = salary;\n  }\n\n  // ...\n}\n\nclass Employee {\n  constructor(name, email) {\n    this.name = name;\n    this.email = email;\n  }\n\n  setTaxData(ssn, salary) {\n    this.taxData = new EmployeeTaxData(ssn, salary);\n  }\n  // ...\n}\n```","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-objects-data-structures","weblink":"https://codersnack.com/js-clean-code-objects-data-structures","featured_image_preview":{"id":151,"name":"js-clean-code.png","hash":"2b2e7c287351441ab4f637667ae7be4c","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/2b2e7c287351441ab4f637667ae7be4c.png","provider":"local","provider_metadata":null,"created_at":"2021-11-28T22:08:37.835Z","updated_at":"2021-11-28T22:08:37.835Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - Objects and Data Structures","created_at":"2021-11-28T22:09:08.529Z","updated_at":"2021-11-28T22:09:08.533Z"},{"id":114,"codersnack":{"id":116,"header":"JS Clean Code - SOLID principles","created_at":"2021-11-28T22:48:49.129Z","updated_at":"2021-11-28T22:48:49.129Z","explanation":"## SOLID\n\n### Single Responsibility Principle (SRP)\n\nAs stated in Clean Code, \"There should never be more than one reason for a class to change\". It's tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won't be conceptually cohesive and it will give it many reasons to change. **Minimizing the amount of times you need to change a class is important. It's important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase**.\n\n*Bad:*\n```\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n  }\n\n  changeSettings(settings) {\n    if (this.verifyCredentials()) {\n      // ...\n    }\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n```\n*Good:*\n\n```\nclass UserAuth {\n  constructor(user) {\n    this.user = user;\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n\nclass UserSettings {\n  constructor(user) {\n    this.user = user;\n    this.auth = new UserAuth(user);\n  }\n\n  changeSettings(settings) {\n    if (this.auth.verifyCredentials()) {\n      // ...\n    }\n  }\n}\n```\n\n\n### Open/Closed Principle (OCP)\n\nAs stated by Bertrand Meyer, \"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.\" What does that mean though? This principle basically states that **you should allow users to add new functionalities without changing existing code.**\n\n*Bad:*\n```\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"ajaxAdapter\";\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"nodeAdapter\";\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    if (this.adapter.name === \"ajaxAdapter\") {\n      return makeAjaxCall(url).then(response => {\n        // transform response and return\n      });\n    } else if (this.adapter.name === \"nodeAdapter\") {\n      return makeHttpCall(url).then(response => {\n        // transform response and return\n      });\n    }\n  }\n}\n\nfunction makeAjaxCall(url) {\n  // request and return promise\n}\n\nfunction makeHttpCall(url) {\n  // request and return promise\n}\n```\n\n*Good:*\n```\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"ajaxAdapter\";\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n    this.name = \"nodeAdapter\";\n  }\n\n  request(url) {\n    // request and return promise\n  }\n}\n\nclass HttpRequester {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n\n  fetch(url) {\n    return this.adapter.request(url).then(response => {\n      // transform response and return\n    });\n  }\n}\n```\n\n\n### Liskov Substitution Principle (LSP)\n\nThis is a scary term for a very simple concept. It's formally defined as \"If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).\" That's an even scarier definition.\n\n**The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results**. This might still be confusing, so let's take a look at the classic **Square-Rectangle example**. Mathematically, a square is a rectangle, but if you model it using the \"is-a\" relationship via inheritance, you quickly get into trouble.\n\n*Bad:*\n```\nclass Rectangle {\n  constructor() {\n    this.width = 0;\n    this.height = 0;\n  }\n\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n\n  setWidth(width) {\n    this.width = width;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Rectangle {\n  setWidth(width) {\n    this.width = width;\n    this.height = width;\n  }\n\n  setHeight(height) {\n    this.width = height;\n    this.height = height;\n  }\n}\n\nfunction renderLargeRectangles(rectangles) {\n  rectangles.forEach(rectangle => {\n    rectangle.setWidth(4);\n    rectangle.setHeight(5);\n    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.\n    rectangle.render(area);\n  });\n}\n\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\nrenderLargeRectangles(rectangles);\n```\n\n*Good:*\n\n```\nclass Shape {\n  setColor(color) {\n    // ...\n  }\n\n  render(area) {\n    // ...\n  }\n}\n\nclass Rectangle extends Shape {\n  constructor(width, height) {\n    super();\n    this.width = width;\n    this.height = height;\n  }\n\n  getArea() {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Shape {\n  constructor(length) {\n    super();\n    this.length = length;\n  }\n\n  getArea() {\n    return this.length * this.length;\n  }\n}\n\nfunction renderLargeShapes(shapes) {\n  shapes.forEach(shape => {\n    const area = shape.getArea();\n    shape.render(area);\n  });\n}\n\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\nrenderLargeShapes(shapes);\n```\n\n\n### Interface Segregation Principle (ISP)\n\nJavaScript doesn't have interfaces so this principle doesn't apply as strictly as others. However, it's important and relevant even with JavaScript's lack of type system.\n\nISP states that **\"Clients should not be forced to depend upon interfaces that they do not use.\"** Interfaces are implicit contracts in JavaScript because of duck typing.\n\n**A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects**. Not requiring clients to setup huge amounts of options is beneficial, because most of the time **they won't need all of the settings. Making them optional helps prevent having a \"fat interface\".**\n\n*Bad:*\n```\nclass DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.settings.animationModule.setup();\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName(\"body\"),\n  animationModule() {} // Most of the time, we won't need to animate when traversing.\n  // ...\n});\n```\n\n*Good:*\n```\nclass DOMTraverser {\n  constructor(settings) {\n    this.settings = settings;\n    this.options = settings.options;\n    this.setup();\n  }\n\n  setup() {\n    this.rootNode = this.settings.rootNode;\n    this.setupOptions();\n  }\n\n  setupOptions() {\n    if (this.options.animationModule) {\n      // ...\n    }\n  }\n\n  traverse() {\n    // ...\n  }\n}\n\nconst $ = new DOMTraverser({\n  rootNode: document.getElementsByTagName(\"body\"),\n  options: {\n    animationModule() {}\n  }\n});\n```\n\n\n### Dependency Inversion Principle (DIP)\n\nThis principle states two essential things:\n\n- **High-level modules should not depend on low-level modules. Both should depend on abstractions.**\n- **Abstractions should not depend upon details. Details should depend on abstractions.**\n\nThis can be hard to understand at first, but **if you've worked with AngularJS, you've seen an implementation of this principle in the form of Dependency Injection (DI).** While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. **A huge benefit of this is that it reduces the coupling between modules**. \n\n> Coupling is a very bad development pattern because it makes your code hard to refactor.\n\nAs stated previously, **JavaScript doesn't have interfaces so the abstractions that are depended upon are implicit contracts**. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an InventoryTracker will have a requestItems method.\n\n*Bad:*\n```\nclass InventoryRequester {\n  constructor() {\n    this.REQ_METHODS = [\"HTTP\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryTracker {\n  constructor(items) {\n    this.items = items;\n\n    // BAD: We have created a dependency on a specific request implementation.\n    // We should just have requestItems depend on a request method: `request`\n    this.requester = new InventoryRequester();\n  }\n\n  requestItems() {\n    this.items.forEach(item => {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nconst inventoryTracker = new InventoryTracker([\"apples\", \"bananas\"]);\ninventoryTracker.requestItems();\n```\n*Good:*\n```\nclass InventoryTracker {\n  constructor(items, requester) {\n    this.items = items;\n    this.requester = requester;\n  }\n\n  requestItems() {\n    this.items.forEach(item => {\n      this.requester.requestItem(item);\n    });\n  }\n}\n\nclass InventoryRequesterV1 {\n  constructor() {\n    this.REQ_METHODS = [\"HTTP\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\nclass InventoryRequesterV2 {\n  constructor() {\n    this.REQ_METHODS = [\"WS\"];\n  }\n\n  requestItem(item) {\n    // ...\n  }\n}\n\n// By constructing our dependencies externally and injecting them, we can easily\n// substitute our request module for a fancy new one that uses WebSockets.\nconst inventoryTracker = new InventoryTracker(\n  [\"apples\", \"bananas\"],\n  new InventoryRequesterV2()\n);\ninventoryTracker.requestItems();\n```\n\n","references":"- [Clean Code Javascript - Ryan McDermott](https://github.com/ryanmcdermott/clean-code-javascript)","featured_image_url":"https://codersnack.com/assets/images/js-clean-code.png","slug":"js-clean-code-solid-principles","weblink":"https://codersnack.com/js-clean-code-solid-principles","featured_image_preview":{"id":152,"name":"js-clean-code.png","hash":"75c7bbc3969c4b7f9f8f1e453d7f90a0","sha256":"xG1ZUgpoSUQSgzFrWMe9UqoanD8UEN-VKcE-VgLW4LU","ext":".png","mime":"image/png","size":40.99,"url":"/uploads/75c7bbc3969c4b7f9f8f1e453d7f90a0.png","provider":"local","provider_metadata":null,"created_at":"2021-11-28T22:48:49.144Z","updated_at":"2021-11-28T22:48:49.144Z"}},"codersnacks_category":{"id":20,"header":"Javascript Clean Code","description":"Software engineering principles, from Robert C. Martin's book Clean Code, adapted for JavaScript. This is not a style guide. It's a guide to producing readable, reusable, and refactorable software in JavaScript.","snacks_by_cat_json_filename":"js-clean-code.snacks.json","key":"js-clean-code","image_url":"https://codersnack.com/assets/images/js-clean-code.jpeg","created_at":"2021-11-28T10:45:27.298Z","updated_at":"2021-11-28T11:20:10.522Z","image_preview":{"id":148,"name":"js-clean-code.jpeg","hash":"d9f94d8104b84a19a32d509613355da0","sha256":"jJKEfBpKyFNnDM8OmMY7xC47tnXdfIykHNivXhM0kFE","ext":".jpeg","mime":"image/jpeg","size":18.63,"url":"/uploads/d9f94d8104b84a19a32d509613355da0.jpeg","provider":"local","provider_metadata":null,"created_at":"2021-11-28T10:45:27.312Z","updated_at":"2021-11-28T10:45:27.312Z"}},"title":"Javascript Clean Code - SOLID principles","created_at":"2021-11-28T22:49:19.042Z","updated_at":"2021-11-28T22:49:19.050Z"}]