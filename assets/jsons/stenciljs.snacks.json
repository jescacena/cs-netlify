[{"id":175,"codersnack":{"id":67,"header":"StencilJS Introduction","created_at":"2020-04-14T14:12:10.274Z","updated_at":"2020-06-16T15:21:43.792Z","explanation":"**Stencil is a compiler that generates Web Components** (more specifically, Custom Elements). Stencil combines the best concepts of the most popular frameworks into a simple build-time tool.\nStencil takes features such as\n\t- **Virtual DOM**\n\t- **Async rendering (inspired by React Fiber)**\n\t- **Reactive data-binding**\n\t- **TypeScript**\n\t- **JSX**\nand then generates standards-based Web Components with these features baked in.\n\nSince Stencil **generates standards-compliant web components**, they **can work with many popular frameworks right out of the box**, and can be used without a framework because they are just web components. Stencil also enables a number of key **capabilities on top of Web Components,** in particular, **pre-rendering**, and **objects-as-properties** (instead of just strings).\n\n**Compared to using Custom Elements directly, Stencil provides extra APIs** that makes writing fast components simpler. APIs like **Virtual DOM**, **JSX**, and **async rendering** make fast, powerful components easy to create, while still maintaining 100% compatibility with Web Components.\n\nThe developer experience is also tuned, and comes with **live reload** and a **small dev server** baked in to the compiler.\n\n### Why Stencil?\n\nStencil was **created by the Ionic Framework team** to help build faster, more capable components that worked across all major frameworks.\n\nWhile Ionic primarily targeted Cordova apps, the emergence of Progressive Web Apps as a rapidly growing target for web developers demanded a different approach to web app development performance. With Ionic's classic use of traditional frameworks and bundling techniques, **the team was struggling to meet latency and code size demands for Progressive Web Apps** that ran equally well on fast and slow networks, across a diversity of platforms and devices.\n\nAdditionally, **framework fragmentation had created a web development interoperability nightmare**, where components built for one framework didn't work with another framework.\n\n**Web Components offered a solution to both problems**, pushing more work to the browser for better performance, and targeting a standards-based component model that all frameworks could use.\n\nHowever,**Web Components by themselves weren't enough**. Building fast web apps required innovations that were previously locked up inside of traditional web frameworks. **Stencil was built to pull these features out of traditional frameworks and bring them to the fast emerging Web Component standard**\n\n## Stencil Goals And Objectives\nStencil aims to combine the best concepts of the most popular frontend frameworks into a compile-time tool rather than run-time tool. It's important to stress that **Stencil's goal is to not become or be seen as a \"framework\",** but rather our goal is to provide a great developer experience and tooling expected from a framework, while using web-standards within the browser at run-time. In many cases, Stencil can be used as a drop in replacement for traditional frontend frameworks given the capabilities now available in the browser, though using it as such is certainly not required.\n\n#### Web Standards\n**Components generated by Stencil in the end are built on top of web components**, so they work in any major framework or with no framework at all. Additionally, other standards heavily relied on include ES Modules and dynamic imports which have proven to replace traditional bundlers which add unnecessary complexities and run-time JavaScript. By using web-standards, developers can learn and adopt a standard API documented across the world, rather than custom framework APIs that continue to change.\n\n#### Automatic Optimizations\nThere are countless optimizations and tweaks developers must do to improve performance of components and websites. With a compiler, **Stencil is able to analyze component code as an input, and generate optimized components as an output.**\n\n#### Future-Friendly\nAs the world of software development continues to evolve, so too can the compiler. Instead of requiring complete rewrites of components, the compiler can continue to make optimizations using the standard component model as the common input. **The compiler allows developers to create future-friendly components, while still staying up-to-date on the latest optimizations without starting over again and again**. Additionally, if something changes about any API, the compiler is able to make automatic adjustments and notify the developer exactly what needs to be updated.\n\n#### Run-time Performance\nInstead of writing custom client-side JavaScript which every user needs to download and parse for the app to work, **Stencil instead prefers to use the already amazing APIs built directly within the browser**. These APIs include **Custom Elements**\n\n#### Tiny API\n**Stencil purposely does not come with a large custom API which needs to be learned and re-learned, but rather heavily relies on, you guessed it, web-standards**. Again, our goal is to not create yet-another-framework, but rather provide tooling for developers to generate future-friendly components using APIs already baked within the browser. The smaller the API, the easier to learn, and the less that can be broken.\n\n#### Framework Features During Development\nIf you haven't noticed already we think web-standards are great and offer many benefits. While using web-standards without any structure is certainly possible, and there are actually many use-cases where this would be appropriate, we found that **as apps and teams scale it quickly becomes difficult to manage. Developers often gravitate to frameworks because of their great tooling, defined structure, and ability to allow developers to build apps quickly**. One of the largest goals of Stencil is to be that intersection of having great framework features and first-class tooling during development but generating future-proof web-standard code, rather than custom framework specific code.\n\n#### Wide Browser Support\n**For the small minority of browsers that do not support modern browser features and APIs, Stencil will automatically polyfill them on-demand**. What this means is that for browsers that already support the feature natively, they will not have to download and parse any unnecessary JavaScript. The great news is that in today's web landscape, most modern APIs are already shipping for what Stencil requires. Out-of-the-box browser support includes IE11 and up.\n","references":"- [stenciljs.com Introduction](https://stenciljs.com/docs/introduction)\n- [stenciljs.com Goals](https://stenciljs.com/docs/goals-and-objectives)","featured_image_url":"https://codersnack.com/assets/images/stenciljs-icon.png","slug":"stenciljs-introduction","weblink":"https://codersnack.com/stenciljs-introduction/","featured_image_preview":{"id":86,"name":"stenciljs-icon.png","hash":"2772179d41214a189ff99bc2d39657b0","sha256":"mzIt3i4QEDB9hP6wQaYm8PowHkAUxTuOsHw3dx0gd7k","ext":".png","mime":"image/png","size":5.58,"url":"/uploads/2772179d41214a189ff99bc2d39657b0.png","provider":"local","provider_metadata":null,"created_at":"2020-04-14T15:04:06.864Z","updated_at":"2020-04-14T15:04:06.864Z"}},"codersnacks_category":{"id":26,"header":"StencilJS","description":"Stencil is a toolchain for building reusable, scalable Design Systems. Generate small, blazing fast, and 100% standards based Web Components that run in every browser.","snacks_by_cat_json_filename":"stenciljs.snacks.json","key":"stenciljs","image_url":"https://codersnack.com/assets/images/stenciljs-icon.png","created_at":"2022-04-26T07:48:02.574Z","updated_at":"2022-04-26T07:48:02.574Z","image_preview":{"id":213,"name":"stenciljs-icon.png","hash":"429500e6b9aa4fbe869fbeb83ee57e5d","sha256":"mzIt3i4QEDB9hP6wQaYm8PowHkAUxTuOsHw3dx0gd7k","ext":".png","mime":"image/png","size":5.58,"url":"/uploads/429500e6b9aa4fbe869fbeb83ee57e5d.png","provider":"local","provider_metadata":null,"created_at":"2022-04-26T07:48:02.590Z","updated_at":"2022-04-26T07:48:02.590Z"}},"title":"Stencils Js - Introduction (Stencil label)","created_at":"2022-04-26T07:49:26.344Z","updated_at":"2022-04-26T07:49:26.350Z"},{"id":176,"codersnack":{"id":68,"header":"StencilJS Hello World","created_at":"2020-04-14T15:04:41.891Z","updated_at":"2020-04-14T15:04:41.891Z","explanation":"## Getting Started\n\n#### Starting a new project\nStencil requires a **recent LTS version of NodeJS and npm**. Make sure you've installed and/or updated Node before continuing.\n\n> Note that you will need to use npm 6 or higher.\n\n```\nnpm init stencil\n``` \n\n**Stencil can be used to create standalone components, or entire apps**. After running init you will be provided with a prompt so that you can choose the type of project to start.\n\n```\n? Pick a starter › - Use arrow-keys. Return to submit.\n\n❯  ionic-pwa     Everything you need to build fast, production ready PWAs\n   app           Minimal starter for building a Stencil app or website\n   component     Collection of web components that can be used anywhere\n```\n#### Updating Stencil\nTo get the latest version of @stencil/core you can run:\n\n```\nnpm install @stencil/core@latest --save-exact\n```\n\n## My First Component\n**Stencil components are created by adding a new file with a .tsx extension**, such as my-first-component.tsx, and placing them in the src/components directory. The .tsx extension is required since **Stencil components are built using JSX and TypeScript**.\n\nHere is an example of what a Stencil component looks like:\n\n```\nimport { Component, Prop, h } from '@stencil/core';\n\n@Component({\n  tag: 'my-first-component',\n})\nexport class MyComponent {\n\n  // Indicate that name should be a public property on the component\n  @Prop() name: string;\n\n  render() {\n    return (\n      <p>\n        My name is {this.name}\n      </p>\n    );\n  }\n}\n```\nDon't fully understand what's going on? Don't worry, we'll explain each piece in detail later on.\n\nOnce compiled, this component can be used in HTML just like any other tag.\n\n```\n<my-first-component name=\"Max\"></my-first-component>\n```\n**Web Components must have a - in the tag**. firstComponent would not be a valid tag name.\n\nWhen rendered, the browser will display ```My name is Max```.\n\n## So what is really going on here?\nLet's dive in.\n\nThe first piece we see is the ```@Component``` decorator. This decorator provides **metadata about our component** to the Stencil compiler. Information, such as the **tag** to use, and **external styles**, can be set here and picked up by the compiler.\n\nBelow the @Component() decorator, we have a **standard JavaScript class**. This is where you'll write the bulk of your code to bring your Stencil component to life. **Here is where you'd write functions or provide business logic**.\n\nIn order for the component to render something to the screen, we must declare a ```render``` function that returns JSX.The quick idea is that our render function needs to return a **representation of the HTML we want to push to the DOM.**\n\nThe **name property** on the class also has a decorator applied to it, ```@Prop()```. This decorator tells the compiler that the property is public to the component, and the user should be setting it. We set this property like so:\n\n```\n<my-first-component name=\"Max\"></my-first-component>\n```\nAny property decorated with ```@Prop()``` is also **automatically watched for changes**. If a user of our component were to change the element's name property, our component would fire its render function again, updating the displayed content.\n\n#### Component Generator\n**The Stencil CLI can generate new components** for you. If you used one of the starters, you can simply run the generate npm script in your project, which will start the **interactive generator**.\n\n```\nnpm run generate\n```\nOr you can invoke the **Stencil CLI directly with the generate command** (g for short). If you don't have stencil installed globally, prefix the command with npx.\n\n```\nstencil generate\n```\nYou can optionally pass the component tag name directly to the command. **Remember that the component tag name needs to be lowercase and contain at least one hyphen**. In the second step, the generator will ask you which files to generate. This allows you to bootstrap a stylesheet as well as spec and e2e tests along with the component file.\n\n**All components will be generated within the *src/components* folder**. Within that, a folder will be created with the same name as the component tag name you provided, and within that folder the files will be generated. It is also possible to specify one or multiple sub-folders to generate the component in.\n\nFor example, if you specify ```pages/page-home``` as the component tag name, the files will be generated in ```src/components/pages/page-home```.\n\n```\nstencil generate pages/page-home\n```\n```\nsrc\n |- components\n     |- pages\n         |- page-home\n             |- page-home.css\n             |- page-home.e2e.ts\n             |- page-home.spec.ts\n             |- page-home.tsx\n```\n","references":"- [stenciljs.com Getting started](https://stenciljs.com/docs/getting-started)\n- [stenciljs.com My first component](https://stenciljs.com/docs/my-first-component)","featured_image_url":"https://codersnack.com/assets/images/stenciljs-icon.png","slug":"stenciljs-hello-world","weblink":"https://codersnack.com/stenciljs-hello-world/","featured_image_preview":{"id":87,"name":"stenciljs-icon.png","hash":"582e637d911f4f3f9fa6ae8212053b07","sha256":"mzIt3i4QEDB9hP6wQaYm8PowHkAUxTuOsHw3dx0gd7k","ext":".png","mime":"image/png","size":5.58,"url":"/uploads/582e637d911f4f3f9fa6ae8212053b07.png","provider":"local","provider_metadata":null,"created_at":"2020-04-14T15:04:41.904Z","updated_at":"2020-04-14T15:04:41.904Z"}},"codersnacks_category":{"id":26,"header":"StencilJS","description":"Stencil is a toolchain for building reusable, scalable Design Systems. Generate small, blazing fast, and 100% standards based Web Components that run in every browser.","snacks_by_cat_json_filename":"stenciljs.snacks.json","key":"stenciljs","image_url":"https://codersnack.com/assets/images/stenciljs-icon.png","created_at":"2022-04-26T07:48:02.574Z","updated_at":"2022-04-26T07:48:02.574Z","image_preview":{"id":213,"name":"stenciljs-icon.png","hash":"429500e6b9aa4fbe869fbeb83ee57e5d","sha256":"mzIt3i4QEDB9hP6wQaYm8PowHkAUxTuOsHw3dx0gd7k","ext":".png","mime":"image/png","size":5.58,"url":"/uploads/429500e6b9aa4fbe869fbeb83ee57e5d.png","provider":"local","provider_metadata":null,"created_at":"2022-04-26T07:48:02.590Z","updated_at":"2022-04-26T07:48:02.590Z"}},"title":"StencilJS - Hello World (Stencil label)","created_at":"2022-04-26T07:50:16.706Z","updated_at":"2022-04-26T07:50:16.715Z"}]