[{"id":6,"codersnack":{"id":5,"header":"What is functional programming?","created_at":"2019-12-31T20:10:18.316Z","updated_at":"2020-01-04T21:15:54.433Z","explanation":"Functional programming is a *programming paradigm* that expresses a computation directly as pure functional transformation of data.\n\n A functional program can be viewed as a declarative program where computations are specified as *pure functions*.\n\n> Pure functions is a function that returns always the same value for the same input and has no side effects.\n\nIn constrast to imperative programming (which describe how to does something) , functional programming **describe what to to instead of how to do it**.\n\nJavascript example using Imperative approach\n\n```\nfunction getFileMapById(files) {\n  const fileMap = {};\n  for (let i = 0; i < files.length; i++) {\n    const file = files[i];\n    fileMap[file.id] = file;\n  }\n  return fileMap\n}\n```\n\nSame example using Declarative/Functional approach\n\n```\nfunction getFileMapById(files) {\n  return lodash.keyBy(files, \"id\")\n}\n```\n","references":"[Why functional programming](https://sookocheff.com/post/fp/why-functional-programming/)\n[Functional Programming Fundamentals](https://www.matthewgerstman.com/tech/functional-programming-fundamentals/)","featured_image_url":"https://codersnack.com/assets/images/fp_lisp.png","slug":"functional-programming.what-is","weblink":"https://codersnack.com/functional-programming.what-is/","featured_image_preview":{"id":9,"name":"fp_lisp.png","hash":"ec0bb99fde554db38747ee63d2561e64","sha256":"nHAsAzYE9OWYIrNWFTj2J9UciSpJ_iDX4YpeoN3NmAQ","ext":".png","mime":"image/png","size":58.71,"url":"/uploads/ec0bb99fde554db38747ee63d2561e64.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T20:10:18.326Z","updated_at":"2019-12-31T20:10:18.326Z"}},"codersnacks_quiz":{"id":6,"question":"Is code that executes asynchronous considered as functional?","response_valid":"No","response_invalid1":"Yes","response_invalid2":"It depends of variables or data involved","created_at":"2019-12-31T20:28:03.371Z","updated_at":"2019-12-31T20:28:03.371Z"},"codersnacks_category":{"id":4,"header":"Functional programming","description":"Functional programming","snacks_by_cat_json_filename":"functional-programming.snacks.json","key":"functional-programming","image_url":"https://codersnack.com/assets/images/functional-programming.png","created_at":"2019-12-31T19:54:16.670Z","updated_at":"2020-01-04T11:09:10.552Z","image_preview":{"id":6,"name":"functional-programming.png","hash":"7e7ea3aa34db4132bea6170855fb1b1b","sha256":"1fFlKySlujSnKGjQYTfpZMXAqdewwvZNh_wdn-wHkhc","ext":".png","mime":"image/png","size":10.27,"url":"/uploads/7e7ea3aa34db4132bea6170855fb1b1b.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:54:16.680Z","updated_at":"2019-12-31T19:54:16.680Z"}},"title":"Functional programming - what is functional - is code that ...","created_at":"2019-12-31T20:34:55.525Z","updated_at":"2019-12-31T20:34:55.529Z"},{"id":9,"codersnack":{"id":8,"header":"Functional programming - Side Effects","created_at":"2020-01-06T18:55:47.401Z","updated_at":"2020-01-08T21:42:51.101Z","explanation":"### Side Effects\n\n**The no side-effects bit is particularly important, because this is what allows us to trust that a function will always behave the same in any environment**. \n\nNow side-effects aren't inherently bad, but you should isolate them to parts of your codebase where you can easily identify them.\n\nLet's take a look a some examples of side effects.\n\n\n#### Mutation\nModifying the argument that’s passed in.\n```\n// Mutates the given array\nfunction pop(arr) {\n  return arr.splice(0, 1);\n}\n\nconst arr = [1,2,3,4];\npop(arr);\nconsole.log(arr); // [2, 3, 4]; \n```\n\nIn this example above, we're changing the value of *arr* at the reference it lives at. As a result, we can't predict what this function will return at any point. What happens when *arr* runs out of values?\n\n\n#### Shared State\nUsing some form of global state.\n```\n\n// These have different values every time you call them.\nlet i = 0;\nfunction increment() {\n return i++;\n}\n\nfunction decrement() {\n  return i--;\n}\n```\nIn this example, we can't predict what these functions will return because they depend on some external value. The order of the function calls will matter.\n\nFurthermore what happens if someone else changes the value of *i*? Do you feel like googling what *string++* is?\n\n\n#### Asynchronous Code\nCode that doesn't execute immediately.\n```\nlet i = 0;\nfunction incrementAsync(obj) {\n  setTimeout(() => {\n    i++;\n  }, 0)\n}\nincrementAsync();\nconsole.log(i); // 0\n// later\nconsole.log(i); // 1\n```\nThis one deserves an extra mention because its a necessity. We have to do some things asynchronously. We have to hit APIs; we have to fetch data.\n\nThis brings me back to my earlier point. Side effects aren't inherently bad, but they should be properly isolated to make your code more predictable.\n\n\n#### Example Time\n```\n// This is a pure function\nfunction clone(obj) {\n  return {...obj};\n}\n\n// This mutates the given object\nfunction killParents(wizard) {\n  wizard.parents = \"Dead\";\n  return wizard;\n}\n\n// This mutates the given object\nfunction addScar(wizard) {\n  wizard.scar = true;\n}\n\nconst a = {name: \"Harry Potter\"};\nconst b = clone(a);\nconst c = killParents(b);\nconst d = addScar(c);\n```\nLooking at the code above, we would expect it to produce the following:\n```\n\n// In a pure function world.\n\nconsole.log(a) // {Name: \"Harry Potter\"};\nconsole.log(b) // {Name: \"Harry Potter\"};\nconsole.log(c) // {Name: \"Harry Potter\", parents: \"Dead\"};\nconsole.log(d) // {Name: \"Harry Potter\", scar: true, parents: \"Dead\"};\n```\n\nUnfortunately, this isn't what we get. This is:\n```\n// Actual results\nconsole.log(a) // {Name: \"Harry Potter\"};\nconsole.log(b) // {Name: \"Harry Potter\", scar: true, parents: \"Dead\"};\nconsole.log(c) // {Name: \"Harry Potter\", scar: true, parents: \"Dead\"};\nconsole.log(d) // undefined\n```\n\nWhat happened?\n\nWell the first function, *clone* is a pure function and works as expected. It produced a new object at a new reference.\n\n*killParents* is not a pure function. It mutates the given argument and marks the parent as dead. It does however return the object so it appears we're getting a new copy.\n\n*addScar* really doesn't care. It mutates the original object, and then returns nothing, so *addScar(c)* returns undefined even though it also modifies *c*.\n\nAs a result *a* is pointing to the original reference, *b* and *c* are pointing to the cloned copy (with dead parents and a scar), and *d* is pointing to nothing.\n\n","references":"[Functional programming fundamentals](https://www.matthewgerstman.com/tech/functional-programming-fundamentals/?utm_campaign=React%2BNewsletter&utm_medium=email&utm_source=React_Newsletter_147)","featured_image_url":"https://codersnack.com/assets/images/functional-programming.png","slug":"functional-programming-side-effects","weblink":"https://codersnack.com/functional-programming-side-effects/","featured_image_preview":{"id":11,"name":"螢幕快照_2016-12-10_下午5.26.11_mgc7al.png","hash":"9a1b55f0b2b64eee8dc471752a3abfdb","sha256":"1fFlKySlujSnKGjQYTfpZMXAqdewwvZNh_wdn-wHkhc","ext":".png","mime":"image/png","size":10.27,"url":"/uploads/9a1b55f0b2b64eee8dc471752a3abfdb.png","provider":"local","provider_metadata":null,"created_at":"2020-01-06T18:55:47.412Z","updated_at":"2020-01-06T18:55:47.412Z"}},"codersnacks_quiz":{"id":9,"question":"[Functional programming] Which of these are side effects scenearios?","response_valid":"mutation, shared state, asynchronous code","response_invalid1":"composition, inheritance, singleton pattern","response_invalid2":"importing modules, passing arguments to functions, shared state","created_at":"2020-01-06T19:00:35.309Z","updated_at":"2020-01-06T19:00:35.309Z"},"codersnacks_category":{"id":4,"header":"Functional programming","description":"Functional programming","snacks_by_cat_json_filename":"functional-programming.snacks.json","key":"functional-programming","image_url":"https://codersnack.com/assets/images/functional-programming.png","created_at":"2019-12-31T19:54:16.670Z","updated_at":"2020-01-04T11:09:10.552Z","image_preview":{"id":6,"name":"functional-programming.png","hash":"7e7ea3aa34db4132bea6170855fb1b1b","sha256":"1fFlKySlujSnKGjQYTfpZMXAqdewwvZNh_wdn-wHkhc","ext":".png","mime":"image/png","size":10.27,"url":"/uploads/7e7ea3aa34db4132bea6170855fb1b1b.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:54:16.680Z","updated_at":"2019-12-31T19:54:16.680Z"}},"title":"functional programming side effects","created_at":"2020-01-06T19:01:27.271Z","updated_at":"2020-01-06T19:01:27.277Z"}]