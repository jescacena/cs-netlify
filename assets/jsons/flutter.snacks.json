[{"id":27,"codersnack":{"id":28,"header":"Introduction to Flutter","created_at":"2020-01-28T11:52:00.968Z","updated_at":"2020-04-20T19:19:06.669Z","explanation":"#### What is Flutter?\nFlutter is a Google's portable UI toolkit. In other words, it’s a **comprehensive app Software Development Kit (SDK)**, complete with widgets and tools.\n\n#### What's Flutter for?\nFlutter **enables cross-platform app development**. It gives developers an easy way to build and deploy visually attractive, natively-compiled applications for mobile (iOS, Android), web, and desktop , all using a single codebase.\n\n#### Who created Flutter?\nA **team at Google built Flutter**. But as an **open-source** project, both Google and the Flutter community contribute to its development. A brief history:\n- February 2018, Mobile World Congress .First beta release of Flutter\n- September 2019, Flutter 1.9 release\n\nFlutter is now **one of the top 20 active software repositories** on GitHub (16th place as of December 11, 2019), which proves the developer community uses it and continues to contribute to its improvement.\n\n#### A little more about Flutter\n\n- It's **free** and **open source**\n- It's based on **Dart** , a fast, object-oriented programming language (Google released Dart 2.3 with new support for UI-as-code features , note that Dart is now in its 2.6 version). Dart is relatively new, and is easy to learn , especially for experienced developers more familiar with Java and C#\n- The architecture is based on the very popular **reactive programming** (it follows the same style as React)\n- It provides its **own widgets, drawn from its own high-performance rendering engine** , these are fast, attractive and customizable\n- Thanks to the widget experience,**Flutter apps have a great look and feel** (while you can still create your own custom app design using readily-available UI elements that follow specific platform guidelines)","references":"- [TheDroidsOnRoids - Flutter vs React Native](https://www.thedroidsonroids.com/blog/flutter-vs-react-native-what-to-choose-in-2020#whatisflutter)\n- [Official Flutter website](https://flutter.dev/)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-introduction","weblink":"https://codersnack.com/flutter-introduction/","featured_image_preview":{"id":36,"name":"flutter-icon.png","hash":"f8b80dc3442a4e2a915af3c32dbd0cd9","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/f8b80dc3442a4e2a915af3c32dbd0cd9.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:52:00.990Z","updated_at":"2020-01-28T11:52:00.990Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter introduction","created_at":"2020-01-28T11:52:30.012Z","updated_at":"2020-01-28T11:52:30.015Z"},{"id":68,"codersnack":{"id":69,"header":"Write your first flutter app I","created_at":"2020-04-20T20:16:58.264Z","updated_at":"2020-04-20T20:16:58.264Z","explanation":"## What you’ll build\n> **Tip**: This codelab walks you through writing your first Flutter app on mobile. You might prefer to try writing your first Flutter app on the web. Note that if you have enabled web, the completed app just works on all of these devices!\n\nThis is a guide to creating your first Flutter app. If you are familiar with object-oriented code and basic programming concepts such as variables, loops, and conditionals, you can complete this tutorial. **You don’t need previous experience with Dart, mobile, or web programming**.\n\nYou’ll implement **a simple mobile app that generates proposed names for a startup company**. The user can select and unselect names, saving the best ones. The code lazily generates names. As the user scrolls, more names are generated. There is no limit to how far a user can scroll.\n\nThe animated GIF shows how the app works at the completion.\n\n![startup namer part 1](https://codersnack.com/assets/images/startup-namer-part-1-flutter.gif)\n\n\n## What you’ll learn\n- How to write a Flutter app that looks natural on iOS, Android, and the web.\n- **Basic structure** of a Flutter app.\n- Finding and using packages to extend functionality.\n- Using **hot reload** for a quicker development cycle.\n- How to implement a **stateful widget**.\n- How to create an **infinite, lazily loaded list**.\n\n## What you'll use\nYou need two pieces of software to complete this lab: the **Flutter SDK** and an **editor**.\n\nYou can run this codelab using any of the following devices:\n\n- A physical device (Android or iOS) connected to your computer and set to developer mode\n- The iOS simulator\n- The Android emulator\n- A browser (Chrome is required for debugging)\n\n## Step 1: Create the starter Flutter app\nCreate a simple, templated Flutter app, using the instructions in [Flutter.dev -> Getting Started with your first Flutter app](https://flutter.dev/docs/get-started/test-drive?tab=terminal#create-app). Name the project **startup_namer** (instead of myapp).\n\n > **Tip**: If you don’t see “New Flutter Project” as an option in your IDE, make sure you have the plugins installed for Flutter and Dart.\n\nIn this codelab, you’ll mostly be editing **lib/main.dart**, where the Dart code lives.\n\nReplace the contents of lib/main.dart. Delete all of the code from lib/main.dart. Replace with the following code, which displays \"Hello World\" in the center of the screen.\n\n*lib/main.dart*\n\n```\n// Copyright 2018 The Flutter team. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Welcome to Flutter'),\n        ),\n        body: Center(\n          child: Text('Hello World'),\n        ),\n      ),\n    );\n  }\n}\n```\n> **Tip**: When pasting code into your app, indentation can become skewed. You can fix this automatically with the Flutter tools:\n> Android Studio and IntelliJ IDEA: Right-click the code and select Reformat Code with dartfmt.\n> VS Code: Right-click and select Format Document.\n> Terminal: Run flutter format <filename>.\n\n**Run the app in the way your IDE describes**. You should see either Android, iOS, or web output, depending on your device.\n\n![Android](https://codersnack.com/assets/images/flutter-first-app-android.png)\nAndroid\n![Android](https://codersnack.com/assets/images/flutter-first-app-ios.png)\niOS\n\n> Tip: The first time you run on a physical device, **it can take a while to load**. After this, you can use hot reload for quick updates. Save also performs a hot reload if the app is running.\n\n### Observations\n- This example creates a **Material** app. Material is a **visual design language that is standard on mobile and the web**. Flutter offers a rich set of Material widgets.\n- The ```main()``` method uses arrow (=>) notation. **Use arrow notation for one-line functions or methods**.\n- The app extends ```StatelessWidget``` which makes the **app itself a widget**. In Flutter, almost everything is a widget, including alignment, padding, and layout.\n- The ```Scaffold``` widget, from the Material library, provides a **default app bar, title, and a body property that holds the widget tree for the home screen**. The widget subtree can be quite complex.\n- A widget's main job is to provide a ```build()``` method that describes how to display the widget in terms of other, lower level widgets.\n- The body for this example consists of a ```Center``` widget containing a ```Text``` child widget. The ```Center``` widget aligns its widget subtree to the center of the screen.\n\n## Step 2: Use an external package\nIn this step, you’ll start using an open-source package named **english_words**, which *contains a few thousand of the most used English words plus some utility functions*. You can find the english_words package, as well as many other open source packages, on pub.dev.\n\nThe **pubspec.yaml** file manages the *assets* and *dependencies* for a Flutter app. In pubspec.yaml, add english_words (3.1.5 or higher) to the dependencies list:\n\n**{step1_base → step2_use_package}/pubspec.yaml**\n```\n\t  dependencies:\n\t    flutter:\n\t      sdk: flutter\n\t    cupertino_icons: ^0.1.2\n\t+   english_words: ^3.1.0\n```\nWhile viewing the pubspec.yaml file in Android Studio’s editor view, click Packages get. This pulls the package into your project. You should see the following in the console:\n\n```\nflutter pub get\nRunning \"flutter pub get\" in startup_namer...\nProcess finished with exit code 0\n```\n> Performing Packages get also auto-generates the **pubspec.lock** file with a list of all packages pulled into the project and their version numbers.\n\nIn lib/main.dart, import the new package:\n\n**lib/main.dart**\n\n```\nimport 'package:flutter/material.dart';\n+ import 'package:english_words/english_words.dart';\n```\nAs you type, Android Studio gives you suggestions for libraries to import. It then renders the import string in gray, letting you know that the imported library is unused (so far).\n\nUse the English words package to generate the text instead of using the string “Hello World”:\n\n**{step1_base → step2_use_package}/lib/main.dart**\n```\n// Copyright 2018 The Flutter team. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\nimport 'package:english_words/english_words.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final wordPair = WordPair.random();\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Welcome to Flutter'),\n        ),\n        body: Center(\n          child: Text(wordPair.asPascalCase),\n        ),\n      ),\n    );\n  }\n}\n```\n Note: \"Pascal case\" (also known as \"upper camel case\"), means that each word in the string, including the first one, begins with an uppercase letter. So, \"uppercamelcase\" becomes \"UpperCamelCase\".\n\nIf the app is running, hot reload to update the running app. Each time you click hot reload, or save the project, you should see a different word pair, chosen at random, in the running app. This is because the word pairing is generated inside the build method, which is run each time the MaterialApp requires rendering, or when toggling the Platform in Flutter Inspector.\n\n## Problems?\nIf your app is not running correctly, look for typos. If you want to try some of Flutter's debugging tools, check out the **DevTools** suite of debugging and profiling tools. If needed, use the code at the following links to get back on track.\n\n[pubspec.yaml](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step2_use_package/pubspec.yaml)\n[lib/main.dart](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step2_use_package/lib/main.dart)\n\n\n\n\n\n","references":"- [Flutter.dev - Write your first flutter app](https://flutter.dev/docs/get-started/codelab)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-write-first-app-1","weblink":"https://codersnack.com/flutter-write-first-app-1/","featured_image_preview":{"id":96,"name":"flutter-icon.png","hash":"7b2f9dd6d5d04f8b84a1c9f5fd91c07d","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/7b2f9dd6d5d04f8b84a1c9f5fd91c07d.png","provider":"local","provider_metadata":null,"created_at":"2020-04-20T20:16:58.279Z","updated_at":"2020-04-20T20:16:58.279Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter - Write first app 1","created_at":"2020-04-20T20:17:52.296Z","updated_at":"2020-04-20T20:17:52.310Z"},{"id":69,"codersnack":{"id":70,"header":"Write your first app II","created_at":"2020-04-21T21:13:07.477Z","updated_at":"2020-04-21T21:45:14.341Z","explanation":"### Step 3: Add a Stateful widget\n\n**Stateless widgets are immutable**, meaning that their properties can’t change: all values are final.\n\n**Stateful widgets maintain state** that might change during the lifetime of the widget. Implementing a stateful widget requires at least two classes:  a **StatefulWidget** class that creates an instance of a **State** class. The **StatefulWidget** class is, itself, immutable, but the **State class persists over the lifetime of the widget**.\n\nIn this step, you’ll add a stateful widget, **RandomWords**, which creates its **State** class, **RandomWordsState**. You’ll then use **RandomWords** as a child inside the existing **MyApp** stateless widget.\n\nCreate a minimal state class. Add the following to the bottom of main.dart:\n\n**lib/main.dart (RandomWordsState)**\n\n```\nclass RandomWordsState extends State<RandomWords> {\n  // TODO Add build() method\n}\n```\nNotice the declaration ```State<RandomWords>```. This indicates that we’re using the generic **State** class specialized for use with **RandomWords**. Most of the app’s logic and state resides here: it maintains the state for the **RandomWords** widget. This class saves the generated word pairs, which grows infinitely as the user scrolls, and favorite word pairs (in part 2), as the user adds or removes them from the list by toggling the heart icon.\n\n**RandomWordsState** depends on the **RandomWords** class. You’ll add that next.\n\nAdd the stateful **RandomWords** widget to **main.dart.** The **RandomWords** widget does little else beside creating its **State** class:\n\n**lib/main.dart (RandomWords)**\n\n```\nclass RandomWords extends StatefulWidget {\n  @override\n  RandomWordsState createState() => RandomWordsState();\n}\n```\nAfter adding the state class, the IDE complains that the class is missing a build method. Next, you’ll add a basic **build method** that generates the word pairs by moving the word generation code from MyApp to **RandomWordsState**.\n\nAdd the **build()** method to **RandomWordsState**:\n\n**lib/main.dart (RandomWordsState)**\n\n```\nclass RandomWordsState extends State<RandomWords> {\n  @override\n  Widget build(BuildContext context) {\n    final wordPair = WordPair.random();\n    return Text(wordPair.asPascalCase);\n  }\n}\n```\nRemove the word generation code from MyApp by making the changes shown in the following diff:\n\n**{step2_use_package → step3_stateful_widget}/lib/main.dart**\n```\n\t  class MyApp extends StatelessWidget {\n\t    @override\n\t    Widget build(BuildContext context) {\n\t-     final wordPair = WordPair.random();\n\t      return MaterialApp(\n\t        title: 'Welcome to Flutter',\n\t        home: Scaffold(\n\t            title: Text('Welcome to Flutter'),\n\t          ),\n\t          body: Center(\n\t-           child: Text(wordPair.asPascalCase),\n\t+           child: RandomWords(),\n\t          ),\n\t        ),\n\t      );\n\t    }\n```\nRestart the app. The app should behave as before, displaying a word pairing each time you hot reload or save the app.\n\n### Problems?\nIf your app is not running correctly, look for typos. If you want to try some of Flutter’s debugging tools, check out the DevTools suite of debugging and profiling tools. If needed, use the code at the following link to get back on track.\n\n- [lib/main.dart](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step3_stateful_widget/lib/main.dart)\n\n### Step 4: Create an infinite scrolling ListView\nIn this step, you’ll expand **RandomWordsState** to generate and **display a list of word pairings.** As the user scrolls, the list displayed in a **ListView** widget, grows infinitely. **ListView’s builder factory constructor allows you to build a list view lazily, on demand**.\n\nAdd a **_suggestions** list to the **RandomWordsState** class for saving suggested word pairings. Also, add a **_biggerFont** variable for making the font size larger.\n\n**lib/main.dart**\n```\nclass RandomWordsState extends State<RandomWords> {\n  final _suggestions = <WordPair>[];\n  final _biggerFont = const TextStyle(fontSize: 18.0);\n  // ···\n}\n```\n> Note: Prefixing an identifier with an underscore enforces privacy in the Dart language.\n\nNext, you’ll add a **_buildSuggestions()** function to the **RandomWordsState** class. This method builds the **ListView** that displays the suggested word pairing.\n\nThe **ListView** class provides a **builder** property, **itemBuilder**, that’s a factory builder and callback function specified as an anonymous function. Two parameters are passed to the function: the **BuildContext**, and the **row iterator**, i. The iterator begins at 0 and increments each time the function is called. It increments twice for every suggested word pairing: once for the **ListTile**, and once for the **Divider**. This model allows the **suggested list to grow infinitely as the user scrolls**.\n\nAdd a **_buildSuggestions()** function to the **RandomWordsState** class:\n\n**lib/main.dart (_buildSuggestions)**\n```\nWidget _buildSuggestions() {\n  return ListView.builder(\n      padding: const EdgeInsets.all(16.0),\n      itemBuilder: /*1*/ (context, i) {\n        if (i.isOdd) return Divider(); /*2*/\n\n        final index = i ~/ 2; /*3*/\n        if (index >= _suggestions.length) {\n          _suggestions.addAll(generateWordPairs().take(10)); /*4*/\n        }\n        return _buildRow(_suggestions[index]);\n      });\n}\n```\n1.The **itemBuilder** callback is called once per suggested word pairing, and places each suggestion into a **ListTile** row. For even rows, the function adds a **ListTile** row for the word pairing. For odd rows, the function adds a **Divider** widget to visually separate the entries. Note that the divider might be difficult to see on smaller devices.\n\n2.Add a one-pixel-high divider widget before each row in the **ListView**.\n\n3.The expression ```i ~/ 2``` divides i by 2 and returns an integer result. For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2. This calculates the actual number of word pairings in the **ListView**, minus the divider widgets.\nIf you’ve reached the end of the available word pairings, then generate 10 more and add them to the suggestions list.\nThe **_buildSuggestions()** function calls **_buildRow()** once per word pair. This function displays each new pair in a **ListTile**, which allows you to make the rows more attractive in the next step.\n\n4.Add a **_buildRow()** function to **RandomWordsState**:\n\n**lib/main.dart (_buildRow)**\n```\nWidget _buildRow(WordPair pair) {\n  return ListTile(\n    title: Text(\n      pair.asPascalCase,\n      style: _biggerFont,\n    ),\n  );\n}\n```\n\n5.In the **RandomWordsState** class, update the **build()** method to use **_buildSuggestions()**, rather than directly calling the word generation library. (Scaffold implements the basic Material Design visual layout.) Replace the method body with the highlighted code:\n\n**lib/main.dart (build)**\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Startup Name Generator'),\n    ),\n    body: _buildSuggestions(),\n  );\n}\n```\n7.In the **MyApp** class, update the **build()** method by changing the title, and changing the home to be a **RandomWords** widget:\n\n**{step3_stateful_widget → step4_infinite_list}/lib/main.dart**\n\n```\n\t  class MyApp extends StatelessWidget {\n\t    @override\n\t    Widget build(BuildContext context) {\n\t      return MaterialApp(\n\t-       title: 'Welcome to Flutter',\n\t-       home: Scaffold(\n\t+       title: 'Startup Name Generator',\n\t+       home: RandomWords(),\n\t-         appBar: AppBar(\n\t-           title: Text('Welcome to Flutter'),\n\t-         ),\n\t-         body: Center(\n\t-           child: RandomWords(),\n\t-         ),\n\t-       ),\n\t      );\n\t    }\n```\nRestart the app. You should see a list of word pairings no matter how far you scroll.\n\n\n### Problems?\nIf your app is not running correctly, look for typos. If you want to try some of Flutter’s debugging tools, check out the DevTools suite of debugging and profiling tools. If needed, use the code at the following link to get back on track.\n\n[lib/main.dart](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step4_infinite_list/lib/main.dart)\n\n> Important: Do not test the performance of your app with debug and hot reload enabled.\n> So far you’ve been running your app in debug mode. Debug mode trades performance for useful developer  features such as hot reload and step debugging. It’s not unexpected to see slow performance and janky  animations in debug mode. Once you are ready to analyze performance or release your app, you’ll want to use Flutter’s “profile” or “release” build modes. For more details, see Flutter’s build modes.\n\n > Important: If you’re concerned about the package size of your app, see Measuring your app’s size.\n\n![startup namer part 2](https://codersnack.com/assets/images/flutter-first-app-list-android.png)\n","references":"- [Flutter.dev - Write your first flutter app](https://flutter.dev/docs/get-started/codelab)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-write-your-first-app-2","weblink":"https://codersnack.com/flutter-write-your-first-app-2/","featured_image_preview":{"id":97,"name":"flutter-icon.png","hash":"7582bfbddbcc49089b31cf9d411f4151","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/7582bfbddbcc49089b31cf9d411f4151.png","provider":"local","provider_metadata":null,"created_at":"2020-04-21T21:13:07.495Z","updated_at":"2020-04-21T21:13:07.495Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter - Write First app 2","created_at":"2020-04-21T21:13:42.743Z","updated_at":"2020-04-21T21:13:42.747Z"},{"id":71,"codersnack":{"id":72,"header":"Flutter - Introduction to declarative UI","created_at":"2020-04-22T19:40:02.285Z","updated_at":"2020-04-23T21:28:01.181Z","explanation":"> This introduction describes the conceptual difference between the declarative style used by Flutter, and the imperative style used by many other UI frameworks.\n\n### Why a declarative UI?\nFrameworks from Win32 to web to Android and iOS typically use an imperative style of UI programming. This might be the style **you’re most familiar with; where you manually construct a full-functioned UI entity, such as a UIView or equivalent, and later mutate it using methods and setters when the UI changes**.\n\nIn order to lighten the burden on developers from having to program how to transition between various UI states, **Flutter, by contrast, lets the developer describe the current UI state and leaves the transitioning to the framework.**\n\nThis, however, requires a slight shift in thinking for how to manipulate UI.\n\n### How to change UI in a declarative framework\nConsider a simplified example below:\n\n![flutter-declarative-ui-changes](https://codersnack.com/assets/images/flutter-declarative-ui-changes.png)\n\n*View B (contained by view A) morphs from containing two views, c1 and c2, to containing only view c3*\n\nIn the **imperative style**, you would typically go to ViewB’s owner and retrieve the instance b using selectors or with findViewById or similar, and invoke mutations on it (and implicitly invalidate it). For example:\n\n```\n// Imperative style\nb.setColor(red)\nb.clearChildren()\nViewC c3 = new ViewC(...)\nb.add(c3)\n```\n\nYou might also need to replicate this configuration in the constructor of ViewB since the source of truth for the UI might outlive instance b itself.\n\nIn the **declarative style**, **view configurations (such as Flutter’s Widgets) are immutable** and are only lightweight \"blueprints\". **To change the UI, a widget triggers a rebuild on itself (most commonly by calling setState() on StatefulWidgets in Flutter) and constructs a new Widget subtree**.\n\n```\n// Declarative style\nreturn ViewB(\n  color: red,\n  child: ViewC(...),\n)\n```\n**Here, rather than mutating an old instance b when the UI changes, Flutter constructs new Widget instances**. The **framework manages** many of the responsibilities of a traditional UI object (such as maintaining the state of the layout) **behind the scenes** with **RenderObjects**. *RenderObjects persist between frames and Flutter’s lightweight Widgets tell the framework to mutate the RenderObjects between states*. The Flutter framework handles the rest.","references":"- [Flutter.dev - Introduction to declarative UI](https://flutter.dev/docs/get-started/flutter-for/declarative)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-declarative-ui","weblink":"https://codersnack.com/flutter-declarative-ui/","featured_image_preview":{"id":99,"name":"flutter-icon.png","hash":"13d1f3a61f094047b0eb41bc1fb6b6c0","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/13d1f3a61f094047b0eb41bc1fb6b6c0.png","provider":"local","provider_metadata":null,"created_at":"2020-04-22T19:40:02.301Z","updated_at":"2020-04-22T19:40:02.301Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter declarative UI","created_at":"2020-04-22T19:40:28.752Z","updated_at":"2020-04-22T19:40:28.757Z"},{"id":72,"codersnack":{"id":73,"header":"Dart Language Overview By Example I","created_at":"2020-04-23T20:47:59.352Z","updated_at":"2020-04-23T20:50:36.949Z","explanation":"This collection is not exhaustive—it’s just a brief introduction to the language **for people who like to learn by example**. You might also want to check out the language and library tours, or the [Dart cheatsheet codelab](https://dart.dev/codelabs/dart-cheatsheet).\n\n### Hello World\nEvery app has a **main()** function. To display text on the console, you can use the top-level **print()** function:\n```\nvoid main() {\n  print('Hello, World!');\n}\n```\n\n### Variables\nEven in type-safe Dart code, **most variables don’t need explicit types**, thanks to type inference:\n\n```\nvar name = 'Voyager I';\nvar year = 1977;\nvar antennaDiameter = 3.7;\nvar flybyObjects = ['Jupiter', 'Saturn', 'Uranus', 'Neptune'];\nvar image = {\n  'tags': ['saturn'],\n  'url': '//path/to/saturn.jpg'\n};\n```\n\nRead more about variables in Dart, including default values, the final and const keywords, and static types.\n\n### Control flow statements\nDart supports the usual control flow statements:\n\n```\nif (year >= 2001) {\n  print('21st century');\n} else if (year >= 1901) {\n  print('20th century');\n}\n\nfor (var object in flybyObjects) {\n  print(object);\n}\n\nfor (int month = 1; month <= 12; month++) {\n  print(month);\n}\n\nwhile (year < 2016) {\n  year += 1;\n}\n```\n\nRead more about control flow statements in Dart, including break and continue, switch and case, and assert.\n\n### Functions\nWe recommend **specifying the types of each function’s arguments and return value**:\n\n```\nint fibonacci(int n) {\n  if (n == 0 || n == 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nvar result = fibonacci(20);\n```\nA shorthand ```=>```  (arrow) syntax is **handy for functions that contain a single statement**. This syntax is especially useful when passing **anonymous functions** as arguments:\n\n```\nflybyObjects.where((name) => name.contains('turn')).forEach(print);\n```\nBesides showing an anonymous function (the argument to where()), this code shows that you can use a function as an argument: the top-level print() function is an argument to forEach().\n\nRead more about functions in Dart, including **optional parameters, default parameter values**, and lexical scope.\n\n### Comments\nDart comments usually start with //.\n\n```\n// This is a normal, one-line comment.\n\n/// This is a documentation comment, used to document libraries,\n/// classes, and their members. Tools like IDEs and dartdoc treat\n/// doc comments specially.\n\n/* Comments like these are also supported. */\n```\nRead more about comments in Dart, including how the documentation tooling works.\n\n### Imports\nTo access APIs defined in other libraries, use import.\n\n```\n// Importing core libraries\nimport 'dart:math';\n\n// Importing libraries from external packages\nimport 'package:test/test.dart';\n\n// Importing files\nimport 'path/to/my_other_file.dart';\n```\n\nRead more about libraries and visibility in Dart, including library prefixes, show and hide, and **lazy loading** through the deferred keyword.\n\n### Classes\nHere’s an example of a class with three properties, two constructors, and a method. One of the properties can’t be set directly, so it’s defined using a getter method (instead of a variable).\n\n```\nclass Spacecraft {\n  String name;\n  DateTime launchDate;\n\n  // Constructor, with syntactic sugar for assignment to members.\n  Spacecraft(this.name, this.launchDate) {\n    // Initialization code goes here.\n  }\n\n  // Named constructor that forwards to the default one.\n  Spacecraft.unlaunched(String name) : this(name, null);\n\n  int get launchYear =>\n      launchDate?.year; // read-only non-final property\n\n  // Method.\n  void describe() {\n    print('Spacecraft: $name');\n    if (launchDate != null) {\n      int years =\n          DateTime.now().difference(launchDate).inDays ~/\n              365;\n      print('Launched: $launchYear ($years years ago)');\n    } else {\n      print('Unlaunched');\n    }\n  }\n}\n```\nYou might use the Spacecraft class like this:\n\n```\nvar voyager = Spacecraft('Voyager I', DateTime(1977, 9, 5));\nvoyager.describe();\n\nvar voyager3 = Spacecraft.unlaunched('Voyager III');\nvoyager3.describe();\n```\n\nRead more about classes in Dart, including initializer lists, optional new and const, redirecting constructors, factory constructors, getters, setters, and much more.\n\n### Inheritance\nDart has **single inheritance**.\n\n```\nclass Orbiter extends Spacecraft {\n  num altitude;\n  Orbiter(String name, DateTime launchDate, this.altitude)\n      : super(name, launchDate);\n}\n```\n\nRead more about extending classes, the optional **@override annotation**, and more.\n\n### Mixins\nMixins are a way of **reusing code in multiple class hierarchies**. The following class can act as a mixin:\n\n```\nclass Piloted {\n  int astronauts = 1;\n  void describeCrew() {\n    print('Number of astronauts: $astronauts');\n  }\n}\n```\n\nTo add a mixin’s capabilities to a class, just extend the class with the mixin.\n\n```\nclass PilotedCraft extends Spacecraft with Piloted {\n  // ···\n}\n```\nPilotedCraft now has the astronauts field as well as the describeCrew() method.\n\nRead more about mixins.\n\n### Interfaces and abstract classes\nDart has no interface keyword. Instead, **all classes implicitly define an interface**. Therefore, you can implement any class.\n\n```\nclass MockSpaceship implements Spacecraft {\n  // ···\n}\n```\nRead more about implicit interfaces.\n\nYou can create an **abstract class** to be extended (or implemented) by a concrete class. Abstract classes can contain **abstract methods** (with empty bodies).\n\n```\nabstract class Describable {\n  void describe();\n\n  void describeWithEmphasis() {\n    print('=========');\n    describe();\n    print('=========');\n  }\n}\n```\nAny class extending Describable has the describeWithEmphasis() method, which calls the extender’s implementation of describe().\n\nRead more about abstract classes and methods.\n\n### Async\n**Avoid callback hell and make your code much more readable by using async and await**.\n\n```\nconst oneSecond = Duration(seconds: 1);\n// ···\nFuture<void> printWithDelay(String message) async {\n  await Future.delayed(oneSecond);\n  print(message);\n}\n```\nThe method above is equivalent to:\n\n```\nFuture<void> printWithDelay(String message) {\n  return Future.delayed(oneSecond).then((_) {\n    print(message);\n  });\n}\n```\nAs the next example shows, **async** and **await** help make asynchronous code easy to read.\n\n```\nFuture<void> createDescriptions(Iterable<String> objects) async {\n  for (var object in objects) {\n    try {\n      var file = File('$object.txt');\n      if (await file.exists()) {\n        var modified = await file.lastModified();\n        print(\n            'File for $object already exists. It was modified on $modified.');\n        continue;\n      }\n      await file.create();\n      await file.writeAsString('Start describing $object in this file.');\n    } on IOException catch (e) {\n      print('Cannot create description for $object: $e');\n    }\n  }\n}\n```\n\nYou can also use ```async*```, which gives you a nice, readable way to build streams.\n\n\n```\nStream<String> report(Spacecraft craft, Iterable<String> objects) async* {\n  for (var object in objects) {\n    await Future.delayed(oneSecond);\n    yield '${craft.name} flies by $object';\n  }\n}\n```\nRead more about asynchrony support, including async functions, Future, Stream, and the asynchronous loop (await for).\n\n### Exceptions\nTo raise an exception, use throw:\n\n```\nif (astronauts == 0) {\n  throw StateError('No astronauts.');\n}\n```\nTo catch an exception, use a try statement with on or catch (or both):\n\n```\ntry {\n  for (var object in flybyObjects) {\n    var description = await File('$object.txt').readAsString();\n    print(description);\n  }\n} on IOException catch (e) {\n  print('Could not describe object: $e');\n} finally {\n  flybyObjects.clear();\n}\n```\nNote that the code above is asynchronous; try works for both synchronous code and code in an async function.\n\nRead more about exceptions, including stack traces, rethrow, and the difference between Error and Exception.\n","references":"- [Dart.dev - Samples](https://dart.dev/samples)","featured_image_url":"https://codersnack.com/assets/images/dart-icon.png","slug":"dart-language-overview-1","weblink":"https://codersnack.com/dart-language-overview-1/","featured_image_preview":{"id":100,"name":"dart-icon.png","hash":"450f53d16cb14160a61af54f334ac68d","sha256":"eT9eLCApRwZngyZnohtK9-VcCLjFFBVzuxSe7GCQhPg","ext":".png","mime":"image/png","size":32.59,"url":"/uploads/450f53d16cb14160a61af54f334ac68d.png","provider":"local","provider_metadata":null,"created_at":"2020-04-23T20:47:59.387Z","updated_at":"2020-04-23T20:47:59.387Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter Dar Overview by example","created_at":"2020-04-23T20:48:34.084Z","updated_at":"2020-04-23T20:48:34.094Z"},{"id":73,"codersnack":{"id":74,"header":"Dart Language Overview By Example II","created_at":"2020-04-23T21:08:11.336Z","updated_at":"2020-04-23T21:08:11.336Z","explanation":"### String interpolation\nTo put the value of an expression inside a string, use ```${expression}```. If the expression is an identifier, you can omit the {}.\n\nHere are some examples of using string interpolation:\n\n'${3 + 2}'\t \t                -------->           '5'\n'${\"word\".toUpperCase()}' -------->\t       'WORD'\n'$myObject'\t \t            -------->            The value of myObject.toString()\n\n### Conditional property access\nTo guard access to a property or method of an object that might be null, **put a question mark (?) before the dot** (.):\n\n```\nmyObject?.someProperty\n```\nThe preceding code is equivalent to the following:\n\n```\n(myObject != null) ? myObject.someProperty : null\n```\nYou can chain multiple uses of ?. together in a single expression:\n\n```\nmyObject?.someProperty?.someMethod()\n```\nThe preceding code returns null (and never calls someMethod()) if either myObject or myObject.someProperty is null.\n\n### Collection literals\nDart has built-in support for **lists**, **maps**, and **sets**. You can create them using literals:\n\n```\nfinal aListOfStrings = ['one', 'two', 'three'];\nfinal aSetOfStrings = {'one', 'two', 'three'};\nfinal aMapOfStringsToInts = {\n  'one': 1,\n  'two': 2,\n  'three': 3,\n};\n```\n**Dart’s type inference can assign types** to these variables for you. In this case, the inferred types are ```List<String>```, ```Set<String>```, and ```Map<String, int>```.\n\nOr you can specify the type yourself:\n\n```\nfinal aListOfInts = <int>[];\nfinal aSetOfInts = <int>{};\nfinal aMapOfIntToDouble = <int, double>{};\n```\nSpecifying types is handy when you initialize a list with contents of a subtype, but still want the list to be List<BaseType>:\n\n```\nfinal aListOfBaseType = <BaseType>[SubType(), SubType()];\n```\n\n### Getters and setters\nYou can define getters and setters whenever you need more control over a property than a simple field allows.\n\nFor example, you can make sure a property’s value is valid:\n\n```\nclass MyClass {\n  int _aProperty = 0;\n\n  int get aProperty => _aProperty;\n\n  set aProperty(int value) {\n    if (value >= 0) {\n      _aProperty = value;\n    }\n  }\n}\n```\nYou can also use a getter to define a **computed property**:\n\n```\nclass MyClass {\n  List<int> _values = [];\n\n  void addValue(int value) {\n    _values.add(value);\n  }\n\n  // A computed property.\n  int get count {\n    return _values.length;\n  }\n}\n```\n\n### Optional positional parameters\n**Dart has two kinds of function parameters: positional and named**. \n\n**Positional parameters** are the kind you’re likely familiar with:\n\n```\nint sumUp(int a, int b, int c) {\n  return a + b + c;\n}\n// ···\n  int total = sumUp(1, 2, 3);\n```\n\nWith Dart, **you can make these positional parameters optional by wrapping them in brackets**:\n\n```\nint sumUpToFive(int a, [int b, int c, int d, int e]) {\n  int sum = a;\n  if (b != null) sum += b;\n  if (c != null) sum += c;\n  if (d != null) sum += d;\n  if (e != null) sum += e;\n  return sum;\n}\n// ···\n  int total = sumUpToFive(1, 2);\n  int otherTotal = sumUpToFive(1, 2, 3, 4, 5);\n```\n\n**Optional positional parameters are always last in a function’s parameter list**. Their default value is null unless you provide another default value:\n\n```\nint sumUpToFive(int a, [int b = 2, int c = 3, int d = 4, int e = 5]) {\n// ···\n}\n// ···\n  int newTotal = sumUpToFive(1);\n  print(newTotal); // <-- prints 15\n```\n\n### Optional named parameters\n**Using a curly brace syntax**, you can define optional parameters that have names.\n\n```\nvoid printName(String firstName, String lastName, {String suffix}) {\n  print('$firstName $lastName ${suffix ?? ''}');\n}\n// ···\n  printName('Avinash', 'Gupta');\n  printName('Poshmeister', 'Moneybuckets', suffix: 'IV');\n```\nAs you might expect, the value of these parameters is null by default, but you can provide default values:\n\n```\nvoid printName(String firstName, String lastName, {String suffix = ''}) {\n  print('$firstName $lastName $suffix');\n}\n```\n> A function can’t have both optional positional and optional named parameters.","references":"- [Dart.dev cheatsheet](https://dart.dev/codelabs/dart-cheatsheet)","featured_image_url":"https://codersnack.com/assets/images/dart-icon.png","slug":"dart-language-overview-2","weblink":"https://codersnack.com/dart-language-overview-2/","featured_image_preview":{"id":101,"name":"dart-icon.png","hash":"714dba9c32c24730b364962ce1540586","sha256":"eT9eLCApRwZngyZnohtK9-VcCLjFFBVzuxSe7GCQhPg","ext":".png","mime":"image/png","size":32.59,"url":"/uploads/714dba9c32c24730b364962ce1540586.png","provider":"local","provider_metadata":null,"created_at":"2020-04-23T21:08:11.352Z","updated_at":"2020-04-23T21:08:11.352Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter Dart Overview by example 2","created_at":"2020-04-23T21:08:48.707Z","updated_at":"2020-04-23T21:08:48.712Z"},{"id":74,"codersnack":{"id":75,"header":"Flutter - Introduction to widgets","created_at":"2020-05-05T21:16:02.295Z","updated_at":"2020-05-05T21:21:19.453Z","explanation":"### Introduction to widgets\n\nFlutter widgets are built using a modern framework that takes **inspiration from React**. The central idea is that you build your UI out of widgets. **Widgets describe what their view should look like given their current configuration and state**. When a widget's state changes, the widget rebuilds its description, which the **framework diffs against the previous description in order to determine the minimal changes needed** in the underlying render tree to transition from one state to the next.\n\n> Note: If you would like to become better acquainted with Flutter by diving into some code, check out the basic layout codelab, building layouts, and adding interactivity to your Flutter app.\n\n#### Hello world\nThe **minimal Flutter** app simply calls the ```runApp()``` function with a widget:\n\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    Center(\n      child: Text(\n        'Hello, world!',\n        textDirection: TextDirection.ltr,\n      ),\n    ),\n  );\n}\n```\n\nThe ```runApp()``` function takes the given ```Widget``` and makes it the **root of the widget tree**. In this example, the widget tree consists of two widgets, the ```Center``` widget and its child, the ```Text``` widget. The framework **forces the root widget to cover the screen**, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.\n\nWhen writing an app, **you’ll commonly author new widgets that are subclasses of either StatelessWidget or StatefulWidget**, depending on whether your widget manages any state. A widget’s main job is to implement a ```build()``` function, which describes the widget in terms of other, lower-level widgets. The framework builds those widgets in turn until the process bottoms out in widgets that represent the underlying ```RenderObject```, which computes and describes the geometry of the widget.\n\n#### Basic widgets\nFlutter comes with a **suite of powerful basic widgets**, of which the following are commonly used:\n\n**Text**\nThe Text widget lets you create a run of **styled text** within your application.\n\n**Row, Column**\nThese flex widgets let you create **flexible layouts** in both the horizontal (Row) and vertical (Column) directions. The design of these objects is based on the web’s **flexbox layout model.**\n\n**Stack**\nInstead of being linearly oriented (either horizontally or vertically), a **Stack** widget lets you place widgets on top of each other in paint order. You can then use the **Positioned** widget on children of a Stack to position them relative to the top, right, bottom, or left edge of the stack. Stacks are based on the web’s **absolute positioning layout model**.\n\n**Container**\nThe **Container** widget lets you create a **rectangular visual element**. A container can be decorated with a **BoxDecoration**, such as a background, a border, or a shadow. A **Container** can also have margins, padding, and constraints applied to its size. In addition, a **Container** can be transformed in three dimensional space using a matrix.\nBelow are some simple widgets that combine these and other widgets:\n\n```\nimport 'package:flutter/material.dart';\n\nclass MyAppBar extends StatelessWidget {\n  MyAppBar({this.title});\n\n  // Fields in a Widget subclass are always marked \"final\".\n\n  final Widget title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      height: 56.0, // in logical pixels\n      padding: const EdgeInsets.symmetric(horizontal: 8.0),\n      decoration: BoxDecoration(color: Colors.blue[500]),\n      // Row is a horizontal, linear layout.\n      child: Row(\n        // <Widget> is the type of items in the list.\n        children: <Widget>[\n          IconButton(\n            icon: Icon(Icons.menu),\n            tooltip: 'Navigation menu',\n            onPressed: null, // null disables the button\n          ),\n          // Expanded expands its child to fill the available space.\n          Expanded(\n            child: title,\n          ),\n          IconButton(\n            icon: Icon(Icons.search),\n            tooltip: 'Search',\n            onPressed: null,\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass MyScaffold extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    // Material is a conceptual piece of paper on which the UI appears.\n    return Material(\n      // Column is a vertical, linear layout.\n      child: Column(\n        children: <Widget>[\n          MyAppBar(\n            title: Text(\n              'Example title',\n              style: Theme.of(context).primaryTextTheme.title,\n            ),\n          ),\n          Expanded(\n            child: Center(\n              child: Text('Hello, world!'),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nvoid main() {\n  runApp(MaterialApp(\n    title: 'My app', // used by the OS task switcher\n    home: MyScaffold(),\n  ));\n}\n```\nBe sure to have a **uses-material-design**: true entry in the flutter section of your **pubspec.yaml** file. It allows you to use the predefined set of Material icons.\n\n```\nname: my_app\nflutter:\n  uses-material-design: true\n```\nMany Material Design widgets need to be inside of a MaterialApp to display properly, in order to inherit theme data. Therefore, run the application with a MaterialApp.\n\nThe **MyAppBar** widget creates a **Container** with a height of 56 device-independent pixels with an internal padding of 8 pixels, both on the left and the right. Inside the container, MyAppBar uses a Row layout to organize its children. The middle child, the title widget, is marked as Expanded, which means it expands to fill any remaining available space that hasn’t been consumed by the other children. You can have multiple Expanded children and determine the ratio in which they consume the available space using the flex argument to Expanded.\n\nThe **MyScaffold** widget organizes its children in a vertical column. At the top of the column it places an instance of MyAppBar, passing the app bar a Text widget to use as its title. Passing widgets as arguments to other widgets is a powerful technique that lets you create generic widgets that can be reused in a wide variety of ways. Finally, MyScaffold uses an Expanded to fill the remaining space with its body, which consists of a centered message.\n\n### Using Material Components\n**Flutter provides a number of widgets that help you build apps that follow Material Design**. A Material app starts with the **MaterialApp** widget, which builds a number of useful widgets at the root of your app, including a **Navigator**, which manages a stack of widgets identified by strings, also known as \"routes\". The **Navigator** lets you transition smoothly between screens of your application. **Using the MaterialApp widget is entirely optional but a good practice**.\n\n```\nimport 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(MaterialApp(\n    title: 'Flutter Tutorial',\n    home: TutorialHome(),\n  ));\n}\n\nclass TutorialHome extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    // Scaffold is a layout for the major Material Components.\n    return Scaffold(\n      appBar: AppBar(\n        leading: IconButton(\n          icon: Icon(Icons.menu),\n          tooltip: 'Navigation menu',\n          onPressed: null,\n        ),\n        title: Text('Example title'),\n        actions: <Widget>[\n          IconButton(\n            icon: Icon(Icons.search),\n            tooltip: 'Search',\n            onPressed: null,\n          ),\n        ],\n      ),\n      // body is the majority of the screen.\n      body: Center(\n        child: Text('Hello, world!'),\n      ),\n      floatingActionButton: FloatingActionButton(\n        tooltip: 'Add', // used by assistive technologies\n        child: Icon(Icons.add),\n        onPressed: null,\n      ),\n    );\n  }\n}\n```\n\nNow that the code has switched from MyAppBar and MyScaffold to the **AppBar** and **Scaffold** widgets, and from material.dart, the app is starting to look at bit more Material. For example, the app bar has a shadow and the title text inherits the correct styling automatically. A floating action button is also added.\n\nNotice that widgets are passed as arguments to other widgets. The Scaffold widget takes a number of different widgets as named arguments, each of which are placed in the Scaffold layout in the appropriate place. Similarly, the AppBar widget lets you pass in widgets for the leading widget, and the actions of the title widget. This pattern recurs throughout the framework and is something you might consider when designing your own widgets.\n\nFor more information, see Material Components widgets.\n\n>Note: Material is one of the 2 bundled designs included with Flutter. To create an iOS-centric design, see the **Cupertino components** package, which has its own versions of CupertinoApp, and CupertinoNavigationBar.\n\n\n","references":"- [Flutter.dev - Intro to widgets](https://flutter.dev/docs/development/ui/widgets-intro)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-widget-introduction","weblink":"https://codersnack.com/flutter-widget-introduction/","featured_image_preview":{"id":102,"name":"flutter-icon.png","hash":"d36ccc55b7794c3d9a5ab25b887db61d","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/d36ccc55b7794c3d9a5ab25b887db61d.png","provider":"local","provider_metadata":null,"created_at":"2020-05-05T21:16:02.322Z","updated_at":"2020-05-05T21:16:02.322Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter Widget introduction","created_at":"2020-05-05T21:16:37.628Z","updated_at":"2020-05-05T21:16:37.632Z"},{"id":138,"codersnack":{"id":135,"header":"Flutter - Essential animation concepts and classes","created_at":"2022-01-24T20:27:28.025Z","updated_at":"2022-01-24T20:27:28.025Z","explanation":"### What's the point?\n- ***Animation***, a core class in Flutter’s animation library, **interpolates the values used to guide an animation**.\n- An *Animation* object **knows the current state of an animation** (for example, whether it’s started, stopped, or moving forward or in reverse), but doesn’t know anything about what appears onscreen.\n- An ***AnimationController* manages the Animation**.\n- A ***CurvedAnimation*** defines **progression as a non-linear curve**.\n- A ***Tween*** **interpolates between the range of data as used by the object being animated**. For example, a Tween might define an interpolation from red to blue, or from 0 to 255.\n- Use ***Listeners*** and ***StatusListeners*** to **monitor animation state changes**.\n\n**The animation system in Flutter is based on typed *Animation* objects**. Widgets can either incorporate these animations in their build functions directly by reading their current value and listening to their state changes or they can use the animations as the basis of more elaborate animations that they pass along to other widgets.\n\n\n### Animation ```<double>```\n\nIn Flutter, **an *Animation* object knows nothing about what is onscreen**. An Animation is an abstract class that **understands its current value and its state** (completed or dismissed). One of the more commonly used animation types is **```Animation<double>```** .\n\n**An Animation object sequentially generates interpolated numbers between two values over a certain duration**. The output of an Animation object might be linear, a curve, a step function, or any other mapping you can devise. **Depending on how the Animation object is controlled, it could run in reverse**, or even switch directions in the middle.\n\nAnimations can also interpolate types other than double, such as **```Animation<Color>```** or **```Animation<Size>```**.\n\nAn Animation object **has state**. Its current value is always available in the .value member.\n\n> An Animation object knows nothing about rendering or build() functions.\n\n### Curved­Animation\n\nA CurvedAnimation **defines the animation’s progress as a non-linear curve**.\n\n```\nanimation = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n```\n\n > Note: The Curves class defines many commonly used curves, or you can create your own. For example:\n\n```\nimport 'dart:math';\n\nclass ShakeCurve extends Curve {\n  @override\n  double transform(double t) => sin(t * pi * 2);\n}\n```\n> Browse the Curves documentation for a complete listing (with visual previews) of the Curves constants that ship with Flutter.\n\n**CurvedAnimation** and AnimationController (described in the next section) are both of type ```Animation<double>```, so you can pass them interchangeably. The **CurvedAnimation wraps the object it’s modifying**—you don’t subclass AnimationController to implement a curve.\n\n### Animation­Controller\n\n**AnimationController is a special Animation object that generates a new value whenever the hardware is ready for a new frame**. By default, an AnimationController linearly produces the numbers from 0.0 to 1.0 during a given duration. For example, this code creates an Animation object, but does not start it running:\n\n```\ncontroller =\n    AnimationController(duration: const Duration(seconds: 2), vsync: this);\n```\n\n***AnimationController* derives from ```Animation<double>```** , so it can be used wherever an Animation object is needed. However, the AnimationController has **additional methods to control the animation**. For example, **you start an animation with the *.forward()* method**. The generation of numbers is tied to the screen refresh, so typically 60 numbers are generated per second. **After each number is generated, each *Animation* object calls the attached *Listener* objects**. To create a custom display list for each child, see *RepaintBoundary*.\n\n**When creating an *AnimationController*, you pass it a *vsync* argument**. The presence of vsync **prevents offscreen animations from consuming unnecessary resources**. You **can use your stateful object as the vsync by adding *SingleTickerProviderStateMixin* to the class definition**. You can see an example of this in animate1 on GitHub.\n\n>**Note**: In some cases, a position might exceed the AnimationController’s 0.0-1.0 range. For example, the fling() function allows you to provide velocity, force, and position (via the Force object). The position can be anything and so can be outside of the 0.0 to 1.0 range.\nA CurvedAnimation can also exceed the 0.0 to 1.0 range, even if the AnimationController doesn’t. Depending on the curve selected, the output of the CurvedAnimation can have a wider range than the input. For example, elastic curves such as Curves.elasticIn significantly overshoots or undershoots the default range.\n\n### Tween\n\nBy default, the AnimationController object ranges from 0.0 to 1.0. If you need a different range or a different data type, **you can use a *Tween* to configure an animation to interpolate to a different range or data type**. For example, the following Tween goes from -200.0 to 0.0:\n\n```\ntween = Tween<double>(begin: -200, end: 0);\n```\n\n**A *Tween* is a *stateless* object that takes only begin and end**. The sole job of a Tween is to **define a mapping from an input range to an output range**. The input range is commonly 0.0 to 1.0, but that’s not a requirement.\n\n**A Tween inherits from ```Animatable<T>```**, not from ```Animation<T>```. An Animatable, like Animation, **doesn’t have to output double**. For example, ColorTween specifies a progression between two colors.\n\n```\ncolorTween = ColorTween(begin: Colors.transparent, end: Colors.black54);\n```\n\n**A Tween object does not store any state**. Instead, it provides the **evaluate(```Animation<double>``` animation) method** that applies the mapping function to the current value of the animation. The current value of the Animation object can be found in the .value method. The evaluate function also performs some housekeeping, such as ensuring that begin and end are returned when the animation values are 0.0 and 1.0, respectively.\n\n#### Tween.animate\n\n**To use a Tween object, call animate() on the Tween, passing in the controller object**. For example, the following code generates the integer values from 0 to 255 over the course of 500 ms.\n\n```\nAnimationController controller = AnimationController(\n    duration: const Duration(milliseconds: 500), vsync: this);\nAnimation<int> alpha = IntTween(begin: 0, end: 255).animate(controller);\n```\n>  **Note**: The animate() method returns an Animation, not an Animatable.\n\nThe following example shows a controller, a curve, and a Tween:\n\n```\nAnimationController controller = AnimationController(\n    duration: const Duration(milliseconds: 500), vsync: this);\nfinal Animation<double> curve =\n    CurvedAnimation(parent: controller, curve: Curves.easeOut);\nAnimation<int> alpha = IntTween(begin: 0, end: 255).animate(curve);\n```\n\n### Animation notifications\n\n**An *Animation* object can have *Listeners* and *StatusListeners*, defined with *addListener*() and *addStatusListener*()**. \n\nA *Listener* is **called whenever the value of the animation changes**. The most common behavior of a Listener is to **call setState() to cause a rebuild**. \n\nA *StatusListener* is **called when an animation begins, ends, moves forward, or moves reverse**, as defined by *AnimationStatus*. The next section has an example of the addListener() method, and Monitoring the progress of the animation shows an example of addStatusListener().\n\n","references":"- [Flutter - Animations Tutorial](https://docs.flutter.dev/development/ui/animations/tutorial)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-animations-essencials","weblink":"https://codersnack.com/flutter-animations-essencials","featured_image_preview":{"id":172,"name":"flutter-icon.png","hash":"a283e79c245c45e2afb3b7a1f4923dcd","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/a283e79c245c45e2afb3b7a1f4923dcd.png","provider":"local","provider_metadata":null,"created_at":"2022-01-24T20:27:28.040Z","updated_at":"2022-01-24T20:27:28.040Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter - Animations Essencials","created_at":"2022-01-24T20:27:57.117Z","updated_at":"2022-01-24T20:27:57.123Z"},{"id":139,"codersnack":{"id":136,"header":"Flutter - Animation Examples I","created_at":"2022-01-26T12:18:27.665Z","updated_at":"2022-01-26T12:20:28.493Z","explanation":"This section walks you through 5 animation examples. Each section provides a link to the source code for that example.\n\n### Rendering animations\n\n> **What's the point?**\n- How to add basic animation to a widget using addListener() and setState().\n- Every time the Animation generates a new number, the addListener() function calls setState().\n- How to define an AnimationController with the required vsync parameter.\n- Understanding the “..” syntax in “..addListener”, also known as Dart’s cascade notation.\n- To make a class private, start its name with an underscore (_).\n\n**So far you’ve learned how to generate a sequence of numbers over time**. Nothing has been rendered to the screen. **To render with an Animation object, store the Animation object as a member of your widget, then use its value to decide how to draw**.\n\nConsider the following app that draws the Flutter logo without animation:\n\n```\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({Key? key}) : super(key: key);\n\n  @override\n  _LogoAppState createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State<LogoApp> {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: 300,\n        width: 300,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n```\n\nApp source: [animate0](https://github.com/flutter/website/tree/main/examples/animation/animate0)\n\n**The following shows the same code modified to animate the logo to grow from nothing to full size**. When defining an *AnimationController*, you must pass in a *vsync* object. The vsync parameter is described in the AnimationController section.\n\nThe changes from the non-animated example are highlighted:\n\n**{animate0 → animate1}/lib/main.dart**\n```\n Viewed\n@@ -9,16 +9,39 @@\n99\t    _LogoAppState createState() => _LogoAppState();\n1010\t  }\n11\t- class _LogoAppState extends State<LogoApp> {\n11\t+ class _LogoAppState extends State<LogoApp> with SingleTickerProviderStateMixin {\n12\t+   late Animation<double> animation;\n13\t+   late AnimationController controller;\n14\t+ \n15\t+   @override\n16\t+   void initState() {\n17\t+     super.initState();\n18\t+     controller =\n19\t+         AnimationController(duration: const Duration(seconds: 2), vsync: this);\n20\t+     animation = Tween<double>(begin: 0, end: 300).animate(controller)\n21\t+       ..addListener(() {\n22\t+         setState(() {\n23\t+           // The state that has changed here is the animation object’s value.\n24\t+         });\n25\t+       });\n26\t+     controller.forward();\n27\t+   }\n28\t+ \n1229\t    @override\n1330\t    Widget build(BuildContext context) {\n1431\t      return Center(\n1532\t        child: Container(\n1633\t          margin: const EdgeInsets.symmetric(vertical: 10),\n17\t-         height: 300,\n18\t-         width: 300,\n34\t+         height: animation.value,\n35\t+         width: animation.value,\n1936\t          child: const FlutterLogo(),\n2037\t        ),\n2138\t      );\n2239\t    }\n40\t+ \n41\t+   @override\n42\t+   void dispose() {\n43\t+     controller.dispose();\n44\t+     super.dispose();\n45\t+   }\n2346\t  }\n```\n\nApp source: [animate1](https://github.com/flutter/website/tree/main/examples/animation/animate1)\n\nThe addListener() function calls setState(), **so every time the Animation generates a new number, the current frame is marked dirty, which forces build() to be called again**. **In build(), the container changes size because its height and width now use animation.value instead of a hardcoded value**. Dispose of the controller when the State object is discarded to prevent memory leaks.\n\nWith these few changes, you’ve created your first animation in Flutter!\n\n> **Dart language tricks**: You might not be familiar with Dart’s cascade notation—the two dots in ..addListener(). This syntax means that the addListener() method is called with the return value from animate(). Consider the following example:\n\n```\nanimation = Tween<double>(begin: 0, end: 300).animate(controller)\n  ..addListener(() {\n    // ···\n  });\n```\n\n> This code is equivalent to:\n\n```\nanimation = Tween<double>(begin: 0, end: 300).animate(controller);\nanimation.addListener(() {\n    // ···\n  });\n```\n\n> You can learn more about cascade notation in the Dart Language Tour.\n\n","references":"- [Flutter.dev - Animations Tutorial](https://docs.flutter.dev/development/ui/animations/tutorial)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-animations-examples-1","weblink":"https://codersnack.com/flutter-animations-examples-1","featured_image_preview":{"id":173,"name":"flutter-icon.png","hash":"b53a597106ed407a949b596bf1f68676","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/b53a597106ed407a949b596bf1f68676.png","provider":"local","provider_metadata":null,"created_at":"2022-01-26T12:18:27.741Z","updated_at":"2022-01-26T12:18:27.741Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter - Animations Examples I","created_at":"2022-01-26T12:18:55.385Z","updated_at":"2022-01-26T12:18:55.390Z"},{"id":140,"codersnack":{"id":137,"header":"Flutter - Animation Examples II","created_at":"2022-01-26T12:38:46.458Z","updated_at":"2022-01-26T15:38:21.241Z","explanation":"\n###  Simplifying with Animated­Widget\n\n\n> **What's the point?**\n- How to use the **AnimatedWidget** helper class (instead of addListener() and setState()) to **create a widget that animates**.\n- Use **AnimatedWidget** to create a widget that performs a **reusable animation**. To separate the transition from the widget, use an **AnimatedBuilder**, as shown in the Refactoring with AnimatedBuilder section.\n- Examples of **AnimatedWidgets** in the Flutter API: **AnimatedBuilder, AnimatedModalBarrier, DecoratedBoxTransition, FadeTransition, PositionedTransition, RelativePositionedTransition, RotationTransition, ScaleTransition, SizeTransition, SlideTransition.**\n\nThe **AnimatedWidget** base class **allows you to separate out the core widget code from the animation code**. AnimatedWidget **doesn’t need to maintain a State object to hold the animation**. Add the following AnimatedLogo class:\n\n**lib/main.dart (AnimatedLogo)**\n```\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({Key? key, required Animation<double> animation})\n      : super(key: key, listenable: animation);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation<double>;\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n```\n\nAnimatedLogo uses the current value of the animation when drawing itself.\n\n**The LogoApp still manages the AnimationController and the Tween**, and it passes the Animation object to AnimatedLogo:\n\n**{animate1 → animate2}/lib/main.dart**\n```\n Viewed\n@@ -1,10 +1,28 @@\n11\t  import 'package:flutter/material.dart';\n22\t  void main() => runApp(const LogoApp());\n3\t+ class AnimatedLogo extends AnimatedWidget {\n4\t+   const AnimatedLogo({Key? key, required Animation<double> animation})\n5\t+       : super(key: key, listenable: animation);\n6\t+ \n7\t+   @override\n8\t+   Widget build(BuildContext context) {\n9\t+     final animation = listenable as Animation<double>;\n10\t+     return Center(\n11\t+       child: Container(\n12\t+         margin: const EdgeInsets.symmetric(vertical: 10),\n13\t+         height: animation.value,\n14\t+         width: animation.value,\n15\t+         child: const FlutterLogo(),\n16\t+       ),\n17\t+     );\n18\t+   }\n19\t+ }\n20\t+ \n321\t  class LogoApp extends StatefulWidget {\n422\t    const LogoApp({Key? key}) : super(key: key);\n523\t    @override\n624\t    _LogoAppState createState() => _LogoAppState();\n725\t  }\n@@ -15,32 +33,18 @@\n1533\t    @override\n1634\t    void initState() {\n1735\t      super.initState();\n1836\t      controller =\n1937\t          AnimationController(duration: const Duration(seconds: 2), vsync: this);\n20\t-     animation = Tween<double>(begin: 0, end: 300).animate(controller)\n21\t-       ..addListener(() {\n22\t-         setState(() {\n23\t-           // The state that has changed here is the animation object’s value.\n24\t-         });\n25\t-       });\n38\t+     animation = Tween<double>(begin: 0, end: 300).animate(controller);\n2639\t      controller.forward();\n2740\t    }\n2841\t    @override\n29\t-   Widget build(BuildContext context) {\n30\t-     return Center(\n31\t-       child: Container(\n32\t-         margin: const EdgeInsets.symmetric(vertical: 10),\n33\t-         height: animation.value,\n34\t-         width: animation.value,\n35\t-         child: const FlutterLogo(),\n36\t-       ),\n37\t-     );\n38\t-   }\n42\t+   Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n3943\t    @override\n4044\t    void dispose() {\n4145\t      controller.dispose();\n4246\t      super.dispose();\n4347\t    }\n```\n\nApp source: [animate2](https://github.com/flutter/website/tree/main/examples/animation/animate2)\n\n\n### Monitoring the progress of the animation\n\n> **What's the point?**\n- Use addStatusListener() for notifications of changes to the animation’s state, such as starting, stopping, or reversing direction.\n- Run an animation in an infinite loop by reversing direction when the animation has either completed or returned to its starting state.\n\nIt’s often helpful to know when an animation changes state, such as finishing, moving forward, or reversing. You can get notifications for this with **addStatusListener()**. The following code modifies the previous example so that **it listens for a state change and prints an update**. The highlighted line shows the change:\n\n```\nclass _LogoAppState extends State<LogoApp> with SingleTickerProviderStateMixin {\n  late Animation<double> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween<double>(begin: 0, end: 300).animate(controller)\n      ..addStatusListener((state) => print('$state'));\n    controller.forward();\n  }\n  // ...\n}\n```\n\nRunning this code produces this output:\n\n```\nAnimationStatus.forward\nAnimationStatus.completed\n```\n\nNext, **use *addStatusListener*() to reverse the animation at the beginning or the end**. This creates a “breathing” effect:\n\n**{animate2 → animate3}/lib/main.dart**\n```\n Viewed\n@@ -35,7 +35,15 @@\n3535\t    void initState() {\n3636\t      super.initState();\n3737\t      controller =\n3838\t          AnimationController(duration: const Duration(seconds: 2), vsync: this);\n39\t-     animation = Tween<double>(begin: 0, end: 300).animate(controller);\n39\t+     animation = Tween<double>(begin: 0, end: 300).animate(controller)\n40\t+       ..addStatusListener((status) {\n41\t+         if (status == AnimationStatus.completed) {\n42\t+           controller.reverse();\n43\t+         } else if (status == AnimationStatus.dismissed) {\n44\t+           controller.forward();\n45\t+         }\n46\t+       })\n47\t+       ..addStatusListener((state) => print('$state'));\n4048\t      controller.forward();\n4149\t    }\n```\nApp source: [animate3](https://github.com/flutter/website/tree/main/examples/animation/animate3)\n\n","references":"- [Flutter.dev - Animations Tutorial](https://docs.flutter.dev/development/ui/animations/tutorial)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-animations-examples-2","weblink":"https://codersnack.com/flutter-animations-examples-2","featured_image_preview":{"id":174,"name":"flutter-icon.png","hash":"ae0e86a9bf9f4ff98d6a7ef16b2cad65","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/ae0e86a9bf9f4ff98d6a7ef16b2cad65.png","provider":"local","provider_metadata":null,"created_at":"2022-01-26T12:38:46.472Z","updated_at":"2022-01-26T12:38:46.472Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter animation examples II","created_at":"2022-01-26T12:44:08.044Z","updated_at":"2022-01-26T12:44:08.049Z"},{"id":141,"codersnack":{"id":138,"header":"Flutter - Animations Examples III","created_at":"2022-01-26T16:22:49.464Z","updated_at":"2022-01-26T17:32:05.008Z","explanation":"### Refactoring with AnimatedBuilder\n\n\n> **What's the point?**\n- An **AnimatedBuilder** understands **how to render the transition**.\n- An **AnimatedBuilder** doesn’t know how to render the widget, nor does it manage the Animation object.\n- Use **AnimatedBuilder** to describe an animation as part of a build method for another widget. If you simply want to define a widget with a reusable animation, use an AnimatedWidget, as shown in the Simplifying with AnimatedWidget section.\n- Examples of AnimatedBuilders in the Flutter API: **BottomSheet, ExpansionTile, PopupMenu, ProgressIndicator, RefreshIndicator, Scaffold, SnackBar, TabBar, TextField**.\n\nOne problem with the code in the animate3 example, is that changing the animation required changing the widget that renders the logo. A better solution is to **separate responsibilities into different classes**:\n\n- **Render the logo**\n- **Define the Animation object**\n- **Render the transition**\n\nYou can **accomplish this separation with the help of the *AnimatedBuilder* class**. An AnimatedBuilder is a separate class in the render tree. Like AnimatedWidget, **AnimatedBuilder automatically listens to notifications from the Animation object, and marks the widget tree dirty as necessary**, so you don’t need to call addListener().\n\nThe widget tree for the [animate4](https://github.com/flutter/website/tree/main/examples/animation/animate4) example looks like this:\n\n![AnimatedBuilder-WidgetTree](https://codersnack.com/assets/images/AnimatedBuilder-WidgetTree.png)\n*AnimatedBuilder widget tree*\n\nStarting from the bottom of the widget tree, the code for rendering the logo is straightforward:\n\n```\nclass LogoWidget extends StatelessWidget {\n  const LogoWidget({Key? key}) : super(key: key);\n\n  // Leave out the height and width so it fills the animating parent\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.symmetric(vertical: 10),\n      child: const FlutterLogo(),\n    );\n  }\n}\n```\n\n**The middle three blocks in the diagram are all created in the build() method in *GrowTransition***, shown below. The GrowTransition widget itself is stateless and holds the set of final variables necessary to define the transition animation. The build() function creates and returns the AnimatedBuilder, which takes the (Anonymous builder) method and the LogoWidget object as parameters. The work of rendering the transition actually happens in the (Anonymous builder) method, which creates a Container of the appropriate size to force the LogoWidget to shrink to fit.\n\nOne tricky point in the code below is that the child looks like it’s specified twice. What’s happening is that the outer reference of child is passed to AnimatedBuilder, which passes it to the anonymous closure, which then uses that object as its child. The net result is that the AnimatedBuilder is inserted in between the two widgets in the render tree.\n\n```\nclass GrowTransition extends StatelessWidget {\n  const GrowTransition({required this.child, required this.animation, Key? key})\n      : super(key: key);\n\n  final Widget child;\n  final Animation<double> animation;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: AnimatedBuilder(\n        animation: animation,\n        builder: (context, child) {\n          return SizedBox(\n            height: animation.value,\n            width: animation.value,\n            child: child,\n          );\n        },\n        child: child,\n      ),\n    );\n  }\n}\n```\nFinally, the code to initialize the animation looks very similar to the animate2 example. The initState() method creates an AnimationController and a Tween, then binds them with animate(). **The magic happens in the build() method, which returns a GrowTransition object with a LogoWidget as a child, and an animation object to drive the transition**. These are the three elements listed in the bullet points above.\n\n***{animate2 → animate4}/lib/main.dart***\n```\n Viewed\n@@ -1,27 +1,47 @@\n11\t  import 'package:flutter/material.dart';\n22\t  void main() => runApp(const LogoApp());\n3\t- class AnimatedLogo extends AnimatedWidget {\n4\t-   const AnimatedLogo({Key? key, required Animation<double> animation})\n5\t-       : super(key: key, listenable: animation);\n3\t+ class LogoWidget extends StatelessWidget {\n4\t+   const LogoWidget({Key? key}) : super(key: key);\n5\t+ \n6\t+   // Leave out the height and width so it fills the animating parent\n7\t+   @override\n8\t+   Widget build(BuildContext context) {\n9\t+     return Container(\n10\t+       margin: const EdgeInsets.symmetric(vertical: 10),\n11\t+       child: const FlutterLogo(),\n12\t+     );\n13\t+   }\n14\t+ }\n15\t+ \n16\t+ class GrowTransition extends StatelessWidget {\n17\t+   const GrowTransition({required this.child, required this.animation, Key? key})\n18\t+       : super(key: key);\n19\t+ \n20\t+   final Widget child;\n21\t+   final Animation<double> animation;\n622\t    @override\n723\t    Widget build(BuildContext context) {\n8\t-     final animation = listenable as Animation<double>;\n924\t      return Center(\n10\t-       child: Container(\n11\t-         margin: const EdgeInsets.symmetric(vertical: 10),\n12\t-         height: animation.value,\n13\t-         width: animation.value,\n14\t-         child: const FlutterLogo(),\n25\t+       child: AnimatedBuilder(\n26\t+         animation: animation,\n27\t+         builder: (context, child) {\n28\t+           return SizedBox(\n29\t+             height: animation.value,\n30\t+             width: animation.value,\n31\t+             child: child,\n32\t+           );\n33\t+         },\n34\t+         child: child,\n1535\t        ),\n1636\t      );\n1737\t    }\n1838\t  }\n1939\t  class LogoApp extends StatefulWidget {\n2040\t    const LogoApp({Key? key}) : super(key: key);\n2141\t    @override\n2242\t    _LogoAppState createState() => _LogoAppState();\n@@ -34,18 +54,23 @@\n3454\t    @override\n3555\t    void initState() {\n3656\t      super.initState();\n3757\t      controller =\n3858\t          AnimationController(duration: const Duration(seconds: 2), vsync: this);\n3959\t      animation = Tween<double>(begin: 0, end: 300).animate(controller);\n4060\t      controller.forward();\n4161\t    }\n4262\t    @override\n43\t-   Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n63\t+   Widget build(BuildContext context) {\n64\t+     return GrowTransition(\n65\t+       child: const LogoWidget(),\n66\t+       animation: animation,\n67\t+     );\n68\t+   }\n4469\t    @override\n4570\t    void dispose() {\n4671\t      controller.dispose();\n4772\t      super.dispose();\n4873\t    }\n4974\t  }\n```\n\nApp source: [animate4](https://github.com/flutter/website/tree/main/examples/animation/animate4)\n\n### Simultaneous animations\n\n> **What's the point?**\n- The **Curves** class defines an array of commonly used curves that you can use with a **CurvedAnimation**.\n\nIn this section, you’ll build on the example from monitoring the progress of the animation (animate3), which used AnimatedWidget to animate in and out continuously. **Consider the case where you want to animate in and out while the opacity animates from transparent to opaque.**\n\n > **Note**: This example shows how to use multiple tweens on the same animation controller, where each tween manages a different effect in the animation. It is for illustrative purposes only. If you were tweening opacity and size in production code, you’d probably use **FadeTransition** and **SizeTransition** instead.\n\nEach **tween manages an aspect of the animation**. For example:\n\n```\ncontroller =\n    AnimationController(duration: const Duration(seconds: 2), vsync: this);\nsizeAnimation = Tween<double>(begin: 0, end: 300).animate(controller);\nopacityAnimation = Tween<double>(begin: 0.1, end: 1).animate(controller);\n```\n\nYou can get the size with sizeAnimation.value and the opacity with opacityAnimation.value, but **the constructor for AnimatedWidget only takes a single Animation object. To solve this problem, the example creates its own Tween objects and explicitly calculates the values.**\n\n**Change AnimatedLogo to encapsulate its own Tween objects**, and its build() method calls Tween.evaluate() on the parent’s animation object to calculate the required size and opacity values. The following code shows the changes with highlights:\n\n```\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({Key? key, required Animation<double> animation})\n      : super(key: key, listenable: animation);\n\n  // Make the Tweens static because they don't change.\n  static final _opacityTween = Tween<double>(begin: 0.1, end: 1);\n  static final _sizeTween = Tween<double>(begin: 0, end: 300);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation<double>;\n    return Center(\n      child: Opacity(\n        opacity: _opacityTween.evaluate(animation),\n        child: Container(\n          margin: const EdgeInsets.symmetric(vertical: 10),\n          height: _sizeTween.evaluate(animation),\n          width: _sizeTween.evaluate(animation),\n          child: const FlutterLogo(),\n        ),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({Key? key}) : super(key: key);\n\n  @override\n  _LogoAppState createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State<LogoApp> with SingleTickerProviderStateMixin {\n  late Animation<double> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = CurvedAnimation(parent: controller, curve: Curves.easeIn)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      });\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\nApp source: [animate5](https://github.com/flutter/website/tree/main/examples/animation/animate5)\n\n","references":"- [Flutter.dev - Animations Tutorial](https://docs.flutter.dev/development/ui/animations/tutorial)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-animations-examples-3","weblink":"https://codersnack.com/flutter-animations-examples-3","featured_image_preview":{"id":175,"name":"flutter-icon.png","hash":"6bc505c125d24152847f849480f54a3b","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/6bc505c125d24152847f849480f54a3b.png","provider":"local","provider_metadata":null,"created_at":"2022-01-26T16:22:49.481Z","updated_at":"2022-01-26T16:22:49.481Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter - Animations Examples III","created_at":"2022-01-26T16:23:15.033Z","updated_at":"2022-01-26T16:23:15.040Z"},{"id":144,"codersnack":{"id":141,"header":"Flutter - Implicit animation - Fade-in text effect","created_at":"2022-01-27T22:27:39.303Z","updated_at":"2022-01-27T22:35:01.018Z","explanation":"\n### What are implicit animations?\n\nWith Flutter’s animation library, you can add motion and create visual effects for the widgets in your UI. One widget set in the library manages animations for you. These widgets are collectively referred to as implicit animations, or implicitly animated widgets, deriving their name from the ImplicitlyAnimatedWidget class that they implement. **With implicit animations, you can animate a widget property by setting a target value; whenever that target value changes, the widget animates the property from the old value to the new one. In this way, implicit animations trade control for convenience—they manage animation effects so that you don’t have to.**\n\n\n### Example: Fade-in text effect\n\n**The following example shows how to add a fade-in effect to existing UI using an implicitly animated widget called *AnimatedOpacity***. The example begins with no animation code—it consists of a Material App home screen containing:\n\n- A photograph of an owl.\n- One Show details button that does nothing when clicked.\n- Description text of the owl in the photograph.\n\n*Fade-in (starter code)*\n\n```\nimport 'package:flutter/material.dart';\n\nconst owl_url = 'https://raw.githubusercontent.com/flutter/website/master/src/images/owl.jpg';\n\nclass FadeInDemo extends StatefulWidget {\n  _FadeInDemoState createState() => _FadeInDemoState();\n}\n\nclass _FadeInDemoState extends State<FadeInDemo> {\n  @override\n  Widget build(BuildContext context) {\n    return Column(children: <Widget>[\n      Image.network(owl_url),\n      TextButton(\n        child: Text(\n          'Show details',\n          style: TextStyle(color: Colors.blueAccent),\n        ),\n        onPressed: () => null,\n      ),\n      Container(\n        child: Column(\n          children: <Widget>[\n            Text('Type: Owl'),\n            Text('Age: 39'),\n            Text('Employment: None'),\n          ],\n        ),\n      )\n    ]);\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: Scaffold(\n        body: Center(\n          child: FadeInDemo(),\n        ),\n      ),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    MyApp(),\n  );\n}\n\n```\n\n\n### Animate opacity with AnimatedOpacity widget\n\nThis section contains a list of steps you can use to add an implicit animation to the fade-in starter code. After the steps, you can also run the fade-in complete code with the the changes already made. The steps outline how to use the **AnimatedOpacity** widget to add the following animation feature:\n\n- The owl’s description text remains hidden until the user clicks the Show details button.\n- When the user clicks the Show details button, the owl’s description text fades in.\n\n\n#### 1. 1. Pick a widget property to animate\n\n**To create a fade-in effect, you can animate the *opacity* property using the *AnimatedOpacity* widget**. Change the Container widget to an AnimatedOpacity widget:\n\n*{opacity1 → opacity2}/lib/main.dart*\n```\n22\t  // Use of this source code is governed by a BSD-style license\n33\t  // that can be found in the LICENSE file.\n4\t+ // ignore_for_file: missing_required_argument\n5\t+ \n46\t  import 'package:flutter/material.dart';\n57\t  const owlUrl =\n@@ -25,12 +27,14 @@\n2527\t              style: TextStyle(color: Colors.blueAccent),\n2628\t            ),\n2729\t            onPressed: () => {}),\n28\t-       Column(\n29\t-         children: const [\n30\t-           Text('Type: Owl'),\n31\t-           Text('Age: 39'),\n32\t-           Text('Employment: None'),\n33\t-         ],\n30\t+       AnimatedOpacity(\n31\t+         child: Column(\n32\t+           children: const [\n33\t+             Text('Type: Owl'),\n34\t+             Text('Age: 39'),\n35\t+             Text('Employment: None'),\n36\t+           ],\n37\t+         ),\n3438\t        )\n3539\t      ]);\n3640\t    }\n```\n> You can reference the line numbers in the example code to help track where to make these changes.\n\n\n#### 2. Initialize a state variable for the animated property\n\nTo hide the text before the user clicks Show details, **set the starting value for opacity to zero:**\n\n*{opacity2 → opacity3}/lib/main.dart*\n```\n22\t  // Use of this source code is governed by a BSD-style license\n33\t  // that can be found in the LICENSE file.\n4\t- // ignore_for_file: missing_required_argument\n5\t- \n64\t  import 'package:flutter/material.dart';\n75\t  const owlUrl =\n@@ -17,6 +15,8 @@\n1715\t  }\n1816\t  class _FadeInDemoState extends State<FadeInDemo> {\n17\t+   double opacity = 0.0;\n18\t+ \n1919\t    @override\n2020\t    Widget build(BuildContext context) {\n2121\t      return Column(children: <Widget>[\n@@ -28,6 +28,8 @@\n2828\t            ),\n2929\t            onPressed: () => {}),\n3030\t        AnimatedOpacity(\n31\t+         duration: const Duration(seconds: 3),\n32\t+         opacity: opacity,\n3133\t          child: Column(\n3234\t            children: const [\n3335\t              Text('Type: Owl'),\n```\n\n\n### 3. Set up a trigger for the animation, and choose an end value\n\n**Configure the animation to trigger when the user clicks the Show details button**. To do this, *change opacity state* using the *onPressed()* handler for *TextlButton*. To make the *FadeInDemo* widget become fully visible when the user clicks the Show details button, use the *onPressed()* handler to *set opacity to 1*:\n\n*{opacity4 → opacity5}/lib/main.dart*\n```\n2222\t      return Column(children: <Widget>[\n2323\t        Image.network(owlUrl),\n2424\t        TextButton(\n25\t-           child: const Text(\n26\t-             'Show Details',\n27\t-             style: TextStyle(color: Colors.blueAccent),\n28\t-           ),\n29\t-           onPressed: () => {}),\n25\t+         child: const Text(\n26\t+           'Show Details',\n27\t+           style: TextStyle(color: Colors.blueAccent),\n28\t+         ),\n29\t+         onPressed: () => setState(() {\n30\t+           opacity = 1;\n31\t+         }),\n32\t+       ),\n3033\t        AnimatedOpacity(\n3134\t          duration: const Duration(seconds: 2),\n3235\t          opacity: opacity,\n```\n\n> Notice that you only need to set the start and end values of opacity. The AnimatedOpacity widget manages everything in between.\n\n\n#### 4. Set the duration of the animation\n\nIn addition to an opacity parameter, AnimatedOpacity requires a duration to use for its animation. For this example, you can start with 2 seconds:\n\n*{opacity3 → opacity4}/lib/main.dart*\n```\n\n2828\t            ),\n2929\t            onPressed: () => {}),\n3030\t        AnimatedOpacity(\n31\t-         duration: const Duration(seconds: 3),\n31\t+         duration: const Duration(seconds: 2),\n3232\t          opacity: opacity,\n3333\t          child: Column(\n3434\t            children: const [\n```\n\n\n#### Putting it all together\n\nThe Fade-in text effect example demonstrates the following features of AnimatedOpacity:\n\n- ***AnimatedOpacity*** **listens for state changes in its opacity property**.\n- **Whenever opacity changes, AnimatedOpacity automatically animates the widget’s transition to the new value for opacity**.\n- ***AnimatedOpacity*** **requires a duration parameter** to define the time it takes to animate the transition between an old opacity value and a new one.\n\n> **Note that Implicit animations can only animate properties of a parent StatefulWidget**, so this example begins with the FadeInDemo widget that extends StatefulWidget.\n\n---\n\n> **Notice also that AnimatedOpacity animates a single property: opacity**. Some implicitly animated widgets can animate many properties, as the following example illustrates.\n\n","references":"- [Flutter.dev - Implicit animations](https://docs.flutter.dev/codelabs/implicit-animations)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-implicit-animations-fadein-text-effect","weblink":"https://codersnack.com/flutter-implicit-animations-fadein-text-effect","featured_image_preview":{"id":178,"name":"flutter-icon.png","hash":"d8c6c1a55717458c825a17fb8c1283c2","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/d8c6c1a55717458c825a17fb8c1283c2.png","provider":"local","provider_metadata":null,"created_at":"2022-01-27T22:27:39.335Z","updated_at":"2022-01-27T22:27:39.335Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter animations - implicit fadein text effect","created_at":"2022-01-27T22:28:07.603Z","updated_at":"2022-01-27T22:28:07.612Z"},{"id":146,"codersnack":{"id":143,"header":"Flutter - Implicit animation - Shape-shifting effect effect","created_at":"2022-01-28T12:25:24.891Z","updated_at":"2022-01-28T12:30:35.106Z","explanation":"The following example shows how to use the **AnimatedContainer** widget to **animate multiple properties (margin, borderRadius, and color) with different types (double and Color).** The example begins with no animation code—it starts with a Material App home screen that contains:\n\n- A Container with borderRadius, margin, and color properties that are different each time you run the example.\n- A Change button that does nothing when clicked.\n\n*Shape-shifting (starter code)*\n*lib/main.dart*\n```\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\n\ndouble randomBorderRadius() {\n  return Random().nextDouble() * 64;\n}\n\ndouble randomMargin() {\n  return Random().nextDouble() * 64;\n}\n\nColor randomColor() {\n  return Color(0xFFFFFFFF & Random().nextInt(0xFFFFFFFF));\n}\n\nclass AnimatedContainerDemo extends StatefulWidget {\n  _AnimatedContainerDemoState createState() => _AnimatedContainerDemoState();\n}\n\nclass _AnimatedContainerDemoState extends State<AnimatedContainerDemo> {\n  late Color color;\n  late double borderRadius;\n  late double margin;\n\n  @override\n  initState() {\n    super.initState();\n    color = randomColor();\n    borderRadius = randomBorderRadius();\n    margin = randomMargin();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          children: <Widget>[\n            SizedBox(\n              width: 128,\n              height: 128,\n              child: Container(\n                margin: EdgeInsets.all(margin),\n                decoration: BoxDecoration(\n                  color: color,\n                  borderRadius: BorderRadius.circular(borderRadius),\n                ),\n              ),\n            ),\n            ElevatedButton(\n              child: Text('change'),\n              onPressed: () => null,\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      home: AnimatedContainerDemo(),\n    );\n  }\n}\n\nvoid main() {\n  runApp(\n    MyApp(),\n  );\n}\n\n```\n\n\n### Animate color, borderRadius, and margin with AnimatedContainer\n\nThis section contains a list of steps you can use to add an implicit animation to the shape-shifting starter code. After the steps, you can also run the shape-shifting complete example with the changes already made.\n\nIn the shape-shifting starter code, each property in the Container widget (color, borderRadius, and margin) is assigned a value by an associated function (randomColor(), randomBorderRadius(), and randomMargin() respectively). By using an AnimatedContainer widget, you can refactor this code to do the following:\n\n- **Generate new values for color, borderRadius, and margin whenever the user clicks the Change button**.\n- **Animate the transition to the new values for color, borderRadius, and margin whenever they are set.**\n\n\n#### 1. Add an implicit animation\n\n**Change the Container widget to an AnimatedContainer widget**:\n\n*{container1 → container2}/lib/main.dart*\n```\n22\t  // Use of this source code is governed by a BSD-style license\n33\t  // that can be found in the LICENSE file.\n4\t+ // ignore_for_file: missing_required_argument\n5\t+ \n46\t  import 'dart:math';\n57\t  import 'package:flutter/material.dart';\n@@ -47,7 +49,7 @@\n4749\t              SizedBox(\n4850\t                width: 128,\n4951\t                height: 128,\n50\t-               child: Container(\n52\t+               child: AnimatedContainer(\n5153\t                  margin: EdgeInsets.all(margin),\n5254\t                  decoration: BoxDecoration(\n5355\t                    color: color,\n```\n > You can reference the line numbers in the example code to help track where to make these changes in shape-shifting starter code\n\n\n#### 2. Set starting values for animated properties\n\n**AnimatedContainer automatically animates between old and new values of its properties when they change**. Create a *change() method* that defines the behavior *triggered when the user clicks* the Change button. The change() method can use **setState() to set new values** for the color, borderRadius, and margin state variables:\n\n*{container2 → container3}/lib/main.dart*\n```\n4040\t      margin = randomMargin();\n4141\t    }\n42\t+   void change() {\n43\t+     setState(() {\n44\t+       color = randomColor();\n45\t+       borderRadius = randomBorderRadius();\n46\t+       margin = randomMargin();\n47\t+     });\n48\t+   }\n49\t+ \n4250\t    @override\n4351\t    Widget build(BuildContext context) {\n4452\t      return Scaffold(\n```\n\n#### 1. 3. Set up a trigger for the animation\n\nTo set the animation to trigger whenever the user presses the Change button, **invoke the change() method in the onPressed() handler**:\n\n*{container3 → container4}/lib/main.dart*\n```\n6767\t              ),\n6868\t              ElevatedButton(\n6969\t                child: const Text('change'),\n70\t-               onPressed: () => {},\n70\t+               onPressed: () => change(),\n7171\t              ),\n7272\t            ],\n7373\t          ),\n```\n\n\n#### 4. Set duration\n\nFinally, set the duration of the animation that powers the transition between the old and new values:\n\n*{container4 → container5}/lib/main.dart*\n```\n22\t  // Use of this source code is governed by a BSD-style license\n33\t  // that can be found in the LICENSE file.\n4\t- // ignore_for_file: missing_required_argument\n5\t- \n64\t  import 'dart:math';\n75\t  import 'package:flutter/material.dart';\n6\t+ const _duration = Duration(milliseconds: 400);\n7\t+ \n88\t  double randomBorderRadius() {\n99\t    return Random().nextDouble() * 64;\n1010\t  }\n@@ -63,6 +63,7 @@\n6363\t                    color: color,\n6464\t                    borderRadius: BorderRadius.circular(borderRadius),\n6565\t                  ),\n66\t+                 duration: _duration,\n6667\t                ),\n6768\t              ),\n6869\t              ElevatedButton(\n```\n\nrun the code and click the Change button to trigger the animation. Notice that each time you click the Change button, the shape animates to its new values for margin, borderRadius, and color.\n\n\n### Using animation curves\n\nThe preceding examples show how implicit animations allow you to animate changes in values for specific widget properties, and how the duration parameter allows you to set the amount of time an animation takes to complete. **Implicit animations also allow you to control changes to the rate of an animation within the duration**. The parameter you **use to define this change in rate is *curve***.\n\nThe preceding examples **do not specify a curve, so the implicit animations apply a linear animation curve** by default. **Add a curve parameter to the shape-shifting complete** and watch how the animation changes when you pass the **easeInOutBack** constant for curve:\n\n*{container5 → container6}/lib/main.dart*\n```\n6464\t                    borderRadius: BorderRadius.circular(borderRadius),\n6565\t                  ),\n6666\t                  duration: _duration,\n67\t+                 curve: Curves.easeInOutBack,\n6768\t                ),\n6869\t              ),\n6970\t              ElevatedButton(\n```\nNow that you have passed easeInOutBack as the value for curve to AnimatedContainer, **notice that the rates of change for margin, borderRadius, and color follow the curve defined by the easeInOutBack curve**: [video](https://flutter.github.io/assets-for-api-docs/assets/animation/curve_ease_in_out_back.mp4)\n\nThe easeInOutBack constant is only one of many that you can pass for the curve parameter. Explore the list of curve constants to discover more ways to use curve to modify the look and feel of your animations.\n\n\n### Putting it all together\n\nThe shape-shifting complete example animates transitions between values for margin, borderRadius, and color properties. Note that AnimatedContainer animates changes to any of its properties, including those you didn’t use such as padding, transform, and even child and alignment! The shape-shifting complete example builds upon fade-in complete by showing additional capabilities of implicit animations:\n\n- Some implicit animations (for example, AnimatedOpacity) only animate a single property, while others (like AnimatedContainer) can animate many properties.\n- Implicit animations automatically animate between the old and new values of properties when they change using the provided curve and duration.\n- If you do not specify a curve, implicit animations default to a linear curve.\n\n","references":"- [Flutter.dev - Implicit animations](https://docs.flutter.dev/codelabs/implicit-animations)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-implicit-animations-shape-shifting-effect","weblink":"https://codersnack.com/flutter-implicit-animations-shape-shifting-effect","featured_image_preview":{"id":180,"name":"flutter-icon.png","hash":"d332d695100f46efbcc671eccafeae67","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/d332d695100f46efbcc671eccafeae67.png","provider":"local","provider_metadata":null,"created_at":"2022-01-28T12:25:24.916Z","updated_at":"2022-01-28T12:25:24.916Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter Animations Shape Shifting Example","created_at":"2022-01-28T12:25:52.906Z","updated_at":"2022-01-28T12:25:52.912Z"}]