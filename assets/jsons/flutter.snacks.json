[{"id":27,"codersnack":{"id":28,"header":"Introduction to Flutter","created_at":"2020-01-28T11:52:00.968Z","updated_at":"2020-04-20T19:19:06.669Z","explanation":"#### What is Flutter?\nFlutter is a Google's portable UI toolkit. In other words, it’s a **comprehensive app Software Development Kit (SDK)**, complete with widgets and tools.\n\n#### What's Flutter for?\nFlutter **enables cross-platform app development**. It gives developers an easy way to build and deploy visually attractive, natively-compiled applications for mobile (iOS, Android), web, and desktop , all using a single codebase.\n\n#### Who created Flutter?\nA **team at Google built Flutter**. But as an **open-source** project, both Google and the Flutter community contribute to its development. A brief history:\n- February 2018, Mobile World Congress .First beta release of Flutter\n- September 2019, Flutter 1.9 release\n\nFlutter is now **one of the top 20 active software repositories** on GitHub (16th place as of December 11, 2019), which proves the developer community uses it and continues to contribute to its improvement.\n\n#### A little more about Flutter\n\n- It's **free** and **open source**\n- It's based on **Dart** , a fast, object-oriented programming language (Google released Dart 2.3 with new support for UI-as-code features , note that Dart is now in its 2.6 version). Dart is relatively new, and is easy to learn , especially for experienced developers more familiar with Java and C#\n- The architecture is based on the very popular **reactive programming** (it follows the same style as React)\n- It provides its **own widgets, drawn from its own high-performance rendering engine** , these are fast, attractive and customizable\n- Thanks to the widget experience,**Flutter apps have a great look and feel** (while you can still create your own custom app design using readily-available UI elements that follow specific platform guidelines)","references":"- [TheDroidsOnRoids - Flutter vs React Native](https://www.thedroidsonroids.com/blog/flutter-vs-react-native-what-to-choose-in-2020#whatisflutter)\n- [Official Flutter website](https://flutter.dev/)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-introduction","weblink":"https://codersnack.com/flutter-introduction/","featured_image_preview":{"id":36,"name":"flutter-icon.png","hash":"f8b80dc3442a4e2a915af3c32dbd0cd9","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/f8b80dc3442a4e2a915af3c32dbd0cd9.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:52:00.990Z","updated_at":"2020-01-28T11:52:00.990Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter introduction","created_at":"2020-01-28T11:52:30.012Z","updated_at":"2020-01-28T11:52:30.015Z"},{"id":68,"codersnack":{"id":69,"header":"Write your first flutter app I","created_at":"2020-04-20T20:16:58.264Z","updated_at":"2020-04-20T20:16:58.264Z","explanation":"## What you’ll build\n> **Tip**: This codelab walks you through writing your first Flutter app on mobile. You might prefer to try writing your first Flutter app on the web. Note that if you have enabled web, the completed app just works on all of these devices!\n\nThis is a guide to creating your first Flutter app. If you are familiar with object-oriented code and basic programming concepts such as variables, loops, and conditionals, you can complete this tutorial. **You don’t need previous experience with Dart, mobile, or web programming**.\n\nYou’ll implement **a simple mobile app that generates proposed names for a startup company**. The user can select and unselect names, saving the best ones. The code lazily generates names. As the user scrolls, more names are generated. There is no limit to how far a user can scroll.\n\nThe animated GIF shows how the app works at the completion.\n\n![startup namer part 1](https://codersnack.com/assets/images/startup-namer-part-1-flutter.gif)\n\n\n## What you’ll learn\n- How to write a Flutter app that looks natural on iOS, Android, and the web.\n- **Basic structure** of a Flutter app.\n- Finding and using packages to extend functionality.\n- Using **hot reload** for a quicker development cycle.\n- How to implement a **stateful widget**.\n- How to create an **infinite, lazily loaded list**.\n\n## What you'll use\nYou need two pieces of software to complete this lab: the **Flutter SDK** and an **editor**.\n\nYou can run this codelab using any of the following devices:\n\n- A physical device (Android or iOS) connected to your computer and set to developer mode\n- The iOS simulator\n- The Android emulator\n- A browser (Chrome is required for debugging)\n\n## Step 1: Create the starter Flutter app\nCreate a simple, templated Flutter app, using the instructions in [Flutter.dev -> Getting Started with your first Flutter app](https://flutter.dev/docs/get-started/test-drive?tab=terminal#create-app). Name the project **startup_namer** (instead of myapp).\n\n > **Tip**: If you don’t see “New Flutter Project” as an option in your IDE, make sure you have the plugins installed for Flutter and Dart.\n\nIn this codelab, you’ll mostly be editing **lib/main.dart**, where the Dart code lives.\n\nReplace the contents of lib/main.dart. Delete all of the code from lib/main.dart. Replace with the following code, which displays \"Hello World\" in the center of the screen.\n\n*lib/main.dart*\n\n```\n// Copyright 2018 The Flutter team. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Welcome to Flutter'),\n        ),\n        body: Center(\n          child: Text('Hello World'),\n        ),\n      ),\n    );\n  }\n}\n```\n> **Tip**: When pasting code into your app, indentation can become skewed. You can fix this automatically with the Flutter tools:\n> Android Studio and IntelliJ IDEA: Right-click the code and select Reformat Code with dartfmt.\n> VS Code: Right-click and select Format Document.\n> Terminal: Run flutter format <filename>.\n\n**Run the app in the way your IDE describes**. You should see either Android, iOS, or web output, depending on your device.\n\n![Android](https://codersnack.com/assets/images/flutter-first-app-android.png)\nAndroid\n![Android](https://codersnack.com/assets/images/flutter-first-app-ios.png)\niOS\n\n> Tip: The first time you run on a physical device, **it can take a while to load**. After this, you can use hot reload for quick updates. Save also performs a hot reload if the app is running.\n\n### Observations\n- This example creates a **Material** app. Material is a **visual design language that is standard on mobile and the web**. Flutter offers a rich set of Material widgets.\n- The ```main()``` method uses arrow (=>) notation. **Use arrow notation for one-line functions or methods**.\n- The app extends ```StatelessWidget``` which makes the **app itself a widget**. In Flutter, almost everything is a widget, including alignment, padding, and layout.\n- The ```Scaffold``` widget, from the Material library, provides a **default app bar, title, and a body property that holds the widget tree for the home screen**. The widget subtree can be quite complex.\n- A widget's main job is to provide a ```build()``` method that describes how to display the widget in terms of other, lower level widgets.\n- The body for this example consists of a ```Center``` widget containing a ```Text``` child widget. The ```Center``` widget aligns its widget subtree to the center of the screen.\n\n## Step 2: Use an external package\nIn this step, you’ll start using an open-source package named **english_words**, which *contains a few thousand of the most used English words plus some utility functions*. You can find the english_words package, as well as many other open source packages, on pub.dev.\n\nThe **pubspec.yaml** file manages the *assets* and *dependencies* for a Flutter app. In pubspec.yaml, add english_words (3.1.5 or higher) to the dependencies list:\n\n**{step1_base → step2_use_package}/pubspec.yaml**\n```\n\t  dependencies:\n\t    flutter:\n\t      sdk: flutter\n\t    cupertino_icons: ^0.1.2\n\t+   english_words: ^3.1.0\n```\nWhile viewing the pubspec.yaml file in Android Studio’s editor view, click Packages get. This pulls the package into your project. You should see the following in the console:\n\n```\nflutter pub get\nRunning \"flutter pub get\" in startup_namer...\nProcess finished with exit code 0\n```\n> Performing Packages get also auto-generates the **pubspec.lock** file with a list of all packages pulled into the project and their version numbers.\n\nIn lib/main.dart, import the new package:\n\n**lib/main.dart**\n\n```\nimport 'package:flutter/material.dart';\n+ import 'package:english_words/english_words.dart';\n```\nAs you type, Android Studio gives you suggestions for libraries to import. It then renders the import string in gray, letting you know that the imported library is unused (so far).\n\nUse the English words package to generate the text instead of using the string “Hello World”:\n\n**{step1_base → step2_use_package}/lib/main.dart**\n```\n// Copyright 2018 The Flutter team. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'package:flutter/material.dart';\nimport 'package:english_words/english_words.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final wordPair = WordPair.random();\n    return MaterialApp(\n      title: 'Welcome to Flutter',\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Welcome to Flutter'),\n        ),\n        body: Center(\n          child: Text(wordPair.asPascalCase),\n        ),\n      ),\n    );\n  }\n}\n```\n Note: \"Pascal case\" (also known as \"upper camel case\"), means that each word in the string, including the first one, begins with an uppercase letter. So, \"uppercamelcase\" becomes \"UpperCamelCase\".\n\nIf the app is running, hot reload to update the running app. Each time you click hot reload, or save the project, you should see a different word pair, chosen at random, in the running app. This is because the word pairing is generated inside the build method, which is run each time the MaterialApp requires rendering, or when toggling the Platform in Flutter Inspector.\n\n## Problems?\nIf your app is not running correctly, look for typos. If you want to try some of Flutter's debugging tools, check out the **DevTools** suite of debugging and profiling tools. If needed, use the code at the following links to get back on track.\n\n[pubspec.yaml](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step2_use_package/pubspec.yaml)\n[lib/main.dart](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step2_use_package/lib/main.dart)\n\n\n\n\n\n","references":"- [Flutter.dev - Write your first flutter app](https://flutter.dev/docs/get-started/codelab)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-write-first-app-1","weblink":"https://codersnack.com/flutter-write-first-app-1/","featured_image_preview":{"id":96,"name":"flutter-icon.png","hash":"7b2f9dd6d5d04f8b84a1c9f5fd91c07d","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/7b2f9dd6d5d04f8b84a1c9f5fd91c07d.png","provider":"local","provider_metadata":null,"created_at":"2020-04-20T20:16:58.279Z","updated_at":"2020-04-20T20:16:58.279Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter - Write first app 1","created_at":"2020-04-20T20:17:52.296Z","updated_at":"2020-04-20T20:17:52.310Z"},{"id":69,"codersnack":{"id":70,"header":"Write your first app II","created_at":"2020-04-21T21:13:07.477Z","updated_at":"2020-04-21T21:45:14.341Z","explanation":"### Step 3: Add a Stateful widget\n\n**Stateless widgets are immutable**, meaning that their properties can’t change: all values are final.\n\n**Stateful widgets maintain state** that might change during the lifetime of the widget. Implementing a stateful widget requires at least two classes:  a **StatefulWidget** class that creates an instance of a **State** class. The **StatefulWidget** class is, itself, immutable, but the **State class persists over the lifetime of the widget**.\n\nIn this step, you’ll add a stateful widget, **RandomWords**, which creates its **State** class, **RandomWordsState**. You’ll then use **RandomWords** as a child inside the existing **MyApp** stateless widget.\n\nCreate a minimal state class. Add the following to the bottom of main.dart:\n\n**lib/main.dart (RandomWordsState)**\n\n```\nclass RandomWordsState extends State<RandomWords> {\n  // TODO Add build() method\n}\n```\nNotice the declaration ```State<RandomWords>```. This indicates that we’re using the generic **State** class specialized for use with **RandomWords**. Most of the app’s logic and state resides here: it maintains the state for the **RandomWords** widget. This class saves the generated word pairs, which grows infinitely as the user scrolls, and favorite word pairs (in part 2), as the user adds or removes them from the list by toggling the heart icon.\n\n**RandomWordsState** depends on the **RandomWords** class. You’ll add that next.\n\nAdd the stateful **RandomWords** widget to **main.dart.** The **RandomWords** widget does little else beside creating its **State** class:\n\n**lib/main.dart (RandomWords)**\n\n```\nclass RandomWords extends StatefulWidget {\n  @override\n  RandomWordsState createState() => RandomWordsState();\n}\n```\nAfter adding the state class, the IDE complains that the class is missing a build method. Next, you’ll add a basic **build method** that generates the word pairs by moving the word generation code from MyApp to **RandomWordsState**.\n\nAdd the **build()** method to **RandomWordsState**:\n\n**lib/main.dart (RandomWordsState)**\n\n```\nclass RandomWordsState extends State<RandomWords> {\n  @override\n  Widget build(BuildContext context) {\n    final wordPair = WordPair.random();\n    return Text(wordPair.asPascalCase);\n  }\n}\n```\nRemove the word generation code from MyApp by making the changes shown in the following diff:\n\n**{step2_use_package → step3_stateful_widget}/lib/main.dart**\n```\n\t  class MyApp extends StatelessWidget {\n\t    @override\n\t    Widget build(BuildContext context) {\n\t-     final wordPair = WordPair.random();\n\t      return MaterialApp(\n\t        title: 'Welcome to Flutter',\n\t        home: Scaffold(\n\t            title: Text('Welcome to Flutter'),\n\t          ),\n\t          body: Center(\n\t-           child: Text(wordPair.asPascalCase),\n\t+           child: RandomWords(),\n\t          ),\n\t        ),\n\t      );\n\t    }\n```\nRestart the app. The app should behave as before, displaying a word pairing each time you hot reload or save the app.\n\n### Problems?\nIf your app is not running correctly, look for typos. If you want to try some of Flutter’s debugging tools, check out the DevTools suite of debugging and profiling tools. If needed, use the code at the following link to get back on track.\n\n- [lib/main.dart](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step3_stateful_widget/lib/main.dart)\n\n### Step 4: Create an infinite scrolling ListView\nIn this step, you’ll expand **RandomWordsState** to generate and **display a list of word pairings.** As the user scrolls, the list displayed in a **ListView** widget, grows infinitely. **ListView’s builder factory constructor allows you to build a list view lazily, on demand**.\n\nAdd a **_suggestions** list to the **RandomWordsState** class for saving suggested word pairings. Also, add a **_biggerFont** variable for making the font size larger.\n\n**lib/main.dart**\n```\nclass RandomWordsState extends State<RandomWords> {\n  final _suggestions = <WordPair>[];\n  final _biggerFont = const TextStyle(fontSize: 18.0);\n  // ···\n}\n```\n> Note: Prefixing an identifier with an underscore enforces privacy in the Dart language.\n\nNext, you’ll add a **_buildSuggestions()** function to the **RandomWordsState** class. This method builds the **ListView** that displays the suggested word pairing.\n\nThe **ListView** class provides a **builder** property, **itemBuilder**, that’s a factory builder and callback function specified as an anonymous function. Two parameters are passed to the function: the **BuildContext**, and the **row iterator**, i. The iterator begins at 0 and increments each time the function is called. It increments twice for every suggested word pairing: once for the **ListTile**, and once for the **Divider**. This model allows the **suggested list to grow infinitely as the user scrolls**.\n\nAdd a **_buildSuggestions()** function to the **RandomWordsState** class:\n\n**lib/main.dart (_buildSuggestions)**\n```\nWidget _buildSuggestions() {\n  return ListView.builder(\n      padding: const EdgeInsets.all(16.0),\n      itemBuilder: /*1*/ (context, i) {\n        if (i.isOdd) return Divider(); /*2*/\n\n        final index = i ~/ 2; /*3*/\n        if (index >= _suggestions.length) {\n          _suggestions.addAll(generateWordPairs().take(10)); /*4*/\n        }\n        return _buildRow(_suggestions[index]);\n      });\n}\n```\n1.The **itemBuilder** callback is called once per suggested word pairing, and places each suggestion into a **ListTile** row. For even rows, the function adds a **ListTile** row for the word pairing. For odd rows, the function adds a **Divider** widget to visually separate the entries. Note that the divider might be difficult to see on smaller devices.\n\n2.Add a one-pixel-high divider widget before each row in the **ListView**.\n\n3.The expression ```i ~/ 2``` divides i by 2 and returns an integer result. For example: 1, 2, 3, 4, 5 becomes 0, 1, 1, 2, 2. This calculates the actual number of word pairings in the **ListView**, minus the divider widgets.\nIf you’ve reached the end of the available word pairings, then generate 10 more and add them to the suggestions list.\nThe **_buildSuggestions()** function calls **_buildRow()** once per word pair. This function displays each new pair in a **ListTile**, which allows you to make the rows more attractive in the next step.\n\n4.Add a **_buildRow()** function to **RandomWordsState**:\n\n**lib/main.dart (_buildRow)**\n```\nWidget _buildRow(WordPair pair) {\n  return ListTile(\n    title: Text(\n      pair.asPascalCase,\n      style: _biggerFont,\n    ),\n  );\n}\n```\n\n5.In the **RandomWordsState** class, update the **build()** method to use **_buildSuggestions()**, rather than directly calling the word generation library. (Scaffold implements the basic Material Design visual layout.) Replace the method body with the highlighted code:\n\n**lib/main.dart (build)**\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text('Startup Name Generator'),\n    ),\n    body: _buildSuggestions(),\n  );\n}\n```\n7.In the **MyApp** class, update the **build()** method by changing the title, and changing the home to be a **RandomWords** widget:\n\n**{step3_stateful_widget → step4_infinite_list}/lib/main.dart**\n\n```\n\t  class MyApp extends StatelessWidget {\n\t    @override\n\t    Widget build(BuildContext context) {\n\t      return MaterialApp(\n\t-       title: 'Welcome to Flutter',\n\t-       home: Scaffold(\n\t+       title: 'Startup Name Generator',\n\t+       home: RandomWords(),\n\t-         appBar: AppBar(\n\t-           title: Text('Welcome to Flutter'),\n\t-         ),\n\t-         body: Center(\n\t-           child: RandomWords(),\n\t-         ),\n\t-       ),\n\t      );\n\t    }\n```\nRestart the app. You should see a list of word pairings no matter how far you scroll.\n\n\n### Problems?\nIf your app is not running correctly, look for typos. If you want to try some of Flutter’s debugging tools, check out the DevTools suite of debugging and profiling tools. If needed, use the code at the following link to get back on track.\n\n[lib/main.dart](https://raw.githubusercontent.com/flutter/codelabs/master/startup_namer/step4_infinite_list/lib/main.dart)\n\n> Important: Do not test the performance of your app with debug and hot reload enabled.\n> So far you’ve been running your app in debug mode. Debug mode trades performance for useful developer  features such as hot reload and step debugging. It’s not unexpected to see slow performance and janky  animations in debug mode. Once you are ready to analyze performance or release your app, you’ll want to use Flutter’s “profile” or “release” build modes. For more details, see Flutter’s build modes.\n\n > Important: If you’re concerned about the package size of your app, see Measuring your app’s size.\n\n![startup namer part 2](https://codersnack.com/assets/images/flutter-first-app-list-android.png)\n","references":"- [Flutter.dev - Write your first flutter app](https://flutter.dev/docs/get-started/codelab)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-write-your-first-app-2","weblink":"https://codersnack.com/flutter-write-your-first-app-2/","featured_image_preview":{"id":97,"name":"flutter-icon.png","hash":"7582bfbddbcc49089b31cf9d411f4151","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/7582bfbddbcc49089b31cf9d411f4151.png","provider":"local","provider_metadata":null,"created_at":"2020-04-21T21:13:07.495Z","updated_at":"2020-04-21T21:13:07.495Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter - Write First app 2","created_at":"2020-04-21T21:13:42.743Z","updated_at":"2020-04-21T21:13:42.747Z"},{"id":71,"codersnack":{"id":72,"header":"Flutter - Introduction to declarative UI","created_at":"2020-04-22T19:40:02.285Z","updated_at":"2020-04-22T19:40:02.285Z","explanation":"> This introduction describes the conceptual difference between the declarative style used by Flutter, and the imperative style used by many other UI frameworks.\n\n### Why a declarative UI?\nFrameworks from Win32 to web to Android and iOS typically use an imperative style of UI programming. This might be the style **you’re most familiar with; where you manually construct a full-functioned UI entity, such as a UIView or equivalent, and later mutate it using methods and setters when the UI changes**.\n\nIn order to lighten the burden on developers from having to program how to transition between various UI states, **Flutter, by contrast, lets the developer describe the current UI state and leaves the transitioning to the framework.**\n\nThis, however, requires a slight shift in thinking for how to manipulate UI.\n\n### How to change UI in a declarative framework\nConsider a simplified example below:\n\n![flutter-declarative-ui-changes](https://codersnack.com/assets/images/flutter-declarative-ui-changes)\n\n*View B (contained by view A) morphs from containing two views, c1 and c2, to containing only view c3*\n\nIn the **imperative style**, you would typically go to ViewB’s owner and retrieve the instance b using selectors or with findViewById or similar, and invoke mutations on it (and implicitly invalidate it). For example:\n\n```\n// Imperative style\nb.setColor(red)\nb.clearChildren()\nViewC c3 = new ViewC(...)\nb.add(c3)\n```\n\nYou might also need to replicate this configuration in the constructor of ViewB since the source of truth for the UI might outlive instance b itself.\n\nIn the **declarative style**, **view configurations (such as Flutter’s Widgets) are immutable** and are only lightweight “blueprints”. **To change the UI, a widget triggers a rebuild on itself (most commonly by calling setState() on StatefulWidgets in Flutter) and constructs a new Widget subtree**.\n\n```\n// Declarative style\nreturn ViewB(\n  color: red,\n  child: ViewC(...),\n)\n```\n**Here, rather than mutating an old instance b when the UI changes, Flutter constructs new Widget instances**. The **framework manages** many of the responsibilities of a traditional UI object (such as maintaining the state of the layout) **behind the scenes** with **RenderObjects**. *RenderObjects persist between frames and Flutter’s lightweight Widgets tell the framework to mutate the RenderObjects between states*. The Flutter framework handles the rest.","references":"- [Flutter.dev - Introduction to declarative UI](https://flutter.dev/docs/get-started/flutter-for/declarative)","featured_image_url":"https://codersnack.com/assets/images/flutter-icon.png","slug":"flutter-declarative-ui","weblink":"https://codersnack.com/flutter-declarative-ui/","featured_image_preview":{"id":99,"name":"flutter-icon.png","hash":"13d1f3a61f094047b0eb41bc1fb6b6c0","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/13d1f3a61f094047b0eb41bc1fb6b6c0.png","provider":"local","provider_metadata":null,"created_at":"2020-04-22T19:40:02.301Z","updated_at":"2020-04-22T19:40:02.301Z"}},"codersnacks_category":{"id":6,"header":"Flutter","description":"Google's UI toolkit for building beautiful, natively compiled applications for mobile, web, and desktop from a single codebase","snacks_by_cat_json_filename":"flutter.snacks.json","key":"flutter","image_url":"https://codersnack.com/assets/images/flutter-icon.png","created_at":"2020-01-28T11:35:43.152Z","updated_at":"2020-01-28T20:51:19.717Z","image_preview":{"id":35,"name":"flutter-icon.png","hash":"c9fbe91f87954d58b76ca53c8524cbfe","sha256":"yaVsbcnLjjeqMcEIIRkabwrUwbN_FxEGtX4+XCfenu8","ext":".png","mime":"image/png","size":8.14,"url":"/uploads/c9fbe91f87954d58b76ca53c8524cbfe.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T11:35:43.164Z","updated_at":"2020-01-28T11:35:43.164Z"}},"title":"Flutter declarative UI","created_at":"2020-04-22T19:40:28.752Z","updated_at":"2020-04-22T19:40:28.757Z"}]