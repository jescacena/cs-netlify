[{"id":191,"codersnack":{"id":172,"header":"Single-spa: Introduction","created_at":"2022-04-28T19:22:55.682Z","updated_at":"2022-04-28T19:38:46.463Z","explanation":"single-spa is **a framework for bringing together multiple JavaScript microfrontends in a frontend application**. Architecting your frontend using single-spa enables many **benefits**, such as:\n\n- **Use multiple frameworks on the same page without page refreshing** (React, AngularJS, Angular, Ember, or whatever you're using)\n- **Deploy** your microfrontends **independently**\n- Write code using a new framework, **without rewriting your existing app**\n- **Lazy load code** for improved initial load time\n\n###  Demos and Examples\n\nSee our [examples page](https://single-spa.js.org/docs/examples/).\n\n\n###  Architectural Overview\n\n**single-spa takes inspiration from modern framework component lifecycles by abstracting lifecycles for entire applications**. \n\nBorn out of Canopy's desire to use React + react-router instead of being forever stuck with our AngularJS + ui-router application, single-spa is now a mature library that enables frontend microservices architecture aka \"microfrontends\". \n\nMicrofrontends enable many benefits such as independent deployments, migration and experimentation, and resilient applications.\n\nsingle-spa apps consist of the following:\n\n1. A **[single-spa root config](https://single-spa.js.org/docs/configuration/)**, which **renders the HTML page** and the JavaScript that **registers applications**. Each application is registered with three things:\n\n- A ***name***\n- A ***function* to load the application's code**\n- A ***function* that determines when the application is active/inactive**\n\n2. **[Applications](https://single-spa.js.org/docs/building-applications/)** which can be thought of as single-page applications packaged up into modules. **Each application must know how to bootstrap, mount, and unmount itself from the DOM**. \n\n**The main difference between a traditional SPA and single-spa applications is that they must be able to *coexist with other applications*** as **they do *not each have their own HTML page.***\n\nFor example, your React or Angular SPAs are applications. **When *active*, they can listen to url routing events and put content on the DOM**. When ***inactive*, they do not listen to url routing events and are totally removed from the DOM.**\n\n\n###   The Recommended Setup\n\nThe single-spa core team has put together documentation, tools, and videos showing the currently encouraged best practices with single-spa. Check out [these docs](https://single-spa.js.org/docs/recommended-setup/) for more information.\n\n\n###   How hard will it be to use single-spa?\n\nsingle-spa works with ES5, ES6+, TypeScript, Webpack, SystemJS, Gulp, Grunt, Bower, ember-cli, or really any build system available. You can npm install it or even just use a ```<script>```  tag if you prefer.\n\nWhile our objective is to make using single-spa as easy as possible, **we should also note that this is an advanced architecture that is different from how front-end applications are typically done**. This will require changes to existing paradigms as well as understanding of underlying tools.\n\nIf you're not starting your application from scratch, you'll have to [migrate your SPA](https://single-spa.js.org/docs/migrating-existing-spas/) to become a single-spa application.\n\nsingle-spa works in Chrome, Firefox, Safari, Edge, and IE11 (with polyfills).\n\n**Isn't single-spa sort of a redundant name?**\n\nYep.","references":"- [Single-spa: getting started](https://single-spa.js.org/docs/getting-started-overview/)","featured_image_url":"https://codersnack.com/assets/images/single-spa-logo.png","slug":"single-spa-introduction","weblink":"https://codersnack.com/single-spa-introduction","featured_image_preview":{"id":216,"name":"single-spa-logo.png","hash":"d040b59afcaa44c4ae4fb8fac76c4930","sha256":"Hh88YlaBXjRr1wz5W5Hj-azxwFxNO7RA1CLau5vlugA","ext":".png","mime":"image/png","size":67.73,"url":"/uploads/d040b59afcaa44c4ae4fb8fac76c4930.png","provider":"local","provider_metadata":null,"created_at":"2022-04-28T19:22:55.692Z","updated_at":"2022-04-28T19:22:55.692Z"}},"codersnacks_category":{"id":28,"header":"Single-spa","description":"single-spa is a framework for bringing together multiple JavaScript microfrontends in a frontend application.","snacks_by_cat_json_filename":"single-spa.snacks.json","key":"single-spa","image_url":"https://codersnack.com/assets/images/single-spa-logo.png","created_at":"2022-04-28T18:51:55.878Z","updated_at":"2022-04-28T19:37:55.149Z","image_preview":{"id":215,"name":"single-spa-logo.png","hash":"3ef5557012f24731bc2d7e16bc556ba6","sha256":"Hh88YlaBXjRr1wz5W5Hj-azxwFxNO7RA1CLau5vlugA","ext":".png","mime":"image/png","size":67.73,"url":"/uploads/3ef5557012f24731bc2d7e16bc556ba6.png","provider":"local","provider_metadata":null,"created_at":"2022-04-28T18:51:55.896Z","updated_at":"2022-04-28T18:51:55.896Z"}},"title":"Single-spa: Getting started","created_at":"2022-04-28T19:23:38.878Z","updated_at":"2022-04-28T19:23:38.884Z"}]