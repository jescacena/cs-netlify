[{"id":5,"codersnack":{"id":4,"header":"What is React?","created_at":"2019-12-31T20:04:40.879Z","updated_at":"2020-01-20T15:00:42.381Z","explanation":"React is a free, unlicensed JS library focused in **UI management**.\n\nCreated by **Facebook**,React was initially released in 2013.\n\nReact has some unique core concepts. It has a virtual DOM, JSX components, input properties, and props. Also, each React component has a state and a lifecycle.\n\n#### Virtual DOM\nInstead of constantly having to work with the real DOM, which is very expensive, everything is handled virtually until we absolutely need to update the DOM.\n\n#### JSX \nIt is officially an XML-like syntax that is close to HTML, but not quite HTML. It is actually JavaScript with HTML sprinkled in.\n\nExample\n\n```\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n","references":"- [Fun with React - A quick overview](https://www.telerik.com/blogs/fun-with-react-a-quick-overview)","featured_image_url":"https://codersnack.com/assets/images/logo-reactjs.png","slug":"react-what-is","weblink":"https://codersnack.com/react-what-is/","featured_image_preview":{"id":8,"name":"logo-reactjs.png","hash":"51404cadac89402c960c70f6a9cc9b4a","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/51404cadac89402c960c70f6a9cc9b4a.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T20:04:40.889Z","updated_at":"2019-12-31T20:04:40.889Z"}},"codersnacks_quiz":{"id":5,"question":"How does React manage DOM changes?","response_valid":"By using a Virtual DOM","response_invalid1":"Accessing directly the browser DOM","response_invalid2":"It doesn't manage DOM changes","created_at":"2019-12-31T20:27:15.788Z","updated_at":"2019-12-31T20:27:15.788Z"},"codersnacks_category":{"id":2,"header":"ReactJS","description":"Javascript library for building user interfaces","snacks_by_cat_json_filename":"reactjs.snacks.json","key":"reactjs","image_url":"https://codersnack.com/assets/images/logo-reactjs.png","created_at":"2019-12-31T19:51:23.456Z","updated_at":"2020-01-27T20:11:40.554Z","image_preview":{"id":4,"name":"logo-reactjs.png","hash":"184e26e835dc4e16ad7789a8ca97d25d","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/184e26e835dc4e16ad7789a8ca97d25d.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:51:23.474Z","updated_at":"2019-12-31T19:51:23.474Z"}},"title":"Reactjs - What is reactjs -- how does react manage ","created_at":"2019-12-31T20:33:25.234Z","updated_at":"2019-12-31T20:33:25.237Z"},{"id":10,"codersnack":{"id":9,"header":"ReactJS - Introducing JSX","created_at":"2020-01-09T19:50:14.060Z","updated_at":"2020-01-20T15:04:09.637Z","explanation":"Consider this variable declaration:\n\n```\nconst element = <h1>Hello, world!</h1>;\n```\n\nThis funny tag syntax is neither a string nor HTML.\n\nIt is called JSX, and it is a **syntax extension to JavaScript**. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.\n\n**JSX produces React \"elements\"**.\n\n\n### Why JSX?\n\n**React embraces the fact that rendering logic is inherently coupled** with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.\n\nInstead of artificially separating technologies by putting markup and logic in separate files, **React separates concerns with loosely coupled units called \"components\" that contain both**. We will come back to components in a further section, but if you’re not yet comfortable putting markup in JS, this talk - https://www.youtube.com/watch?v=x7cQ3mrcKaY -  might convince you otherwise.\n\nReact doesn't require using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.\n\n### JSX Represents Objects\nBabel compiles JSX down to React.createElement() calls.\n\nThese two examples are identical:\n```\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n\n```\n**React.createElement()** *performs a few checks to help you write bug-free code* but essentially it creates an object like this:\n\n```\n// Note: this structure is simplified\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world!'\n  }\n};\n```\n\n**These objects are called React elements.**. You can think of them as *descriptions of what you want to see on the screen*. React reads these objects and uses them to construct the DOM and keep it up to date.\n","references":"- [Reactjs.org - Introducing JSX](https://reactjs.org/docs/introducing-jsx.html)\n- [Why Jsx talk](https://www.youtube.com/watch?v=x7cQ3mrcKaY)","featured_image_url":"https://codersnack.com/assets/images/logo-reactjs.png","slug":"reactjs-introducing-jsx","weblink":"https://codersnack.com/reactjs-introducing-jsx","featured_image_preview":{"id":12,"name":"logo-reactjs.png","hash":"39731a1caf194ab78276d07a65d53f50","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/39731a1caf194ab78276d07a65d53f50.png","provider":"local","provider_metadata":null,"created_at":"2020-01-09T19:50:14.078Z","updated_at":"2020-01-09T19:50:14.078Z"}},"codersnacks_quiz":{"id":10,"question":"Choose one of the reasons of using JSX in  ReactJS?","response_valid":"Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with loosely coupled units called “components” that contain both.","response_invalid1":"Using a more advanced template engine","response_invalid2":"Adding HTML5 features","created_at":"2020-01-09T19:54:07.163Z","updated_at":"2020-01-09T19:54:07.163Z"},"codersnacks_category":{"id":2,"header":"ReactJS","description":"Javascript library for building user interfaces","snacks_by_cat_json_filename":"reactjs.snacks.json","key":"reactjs","image_url":"https://codersnack.com/assets/images/logo-reactjs.png","created_at":"2019-12-31T19:51:23.456Z","updated_at":"2020-01-27T20:11:40.554Z","image_preview":{"id":4,"name":"logo-reactjs.png","hash":"184e26e835dc4e16ad7789a8ca97d25d","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/184e26e835dc4e16ad7789a8ca97d25d.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:51:23.474Z","updated_at":"2019-12-31T19:51:23.474Z"}},"title":"reactjs - introducing jsx - choose reason jsx","created_at":"2020-01-09T19:54:43.214Z","updated_at":"2020-01-09T19:54:43.219Z"},{"id":11,"codersnack":{"id":10,"header":"ReactJS - Components and Props","created_at":"2020-01-09T20:24:47.496Z","updated_at":"2020-01-20T14:58:00.472Z","explanation":"> Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. \n\n**Conceptually, components are like JavaScript functions**. They accept arbitrary inputs (called *props*) and return React elements describing what should appear on the screen.\n\n### Function and Class Components\nThe simplest way to define a component is to write a JavaScript function:\n```\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\nThis function is a valid React component because it accepts a single *props* (which stands for properties) object argument with data and *returns a React element*. We call such components *function components* because they are literally JavaScript functions.\n\nYou can also *use an ES6 class to define a component*:\n```\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\nThe above two components are equivalent from Reacts point of view.\n\n*Classes have some additional features* that we will discuss in the next sections. Until then, we will use function components for their conciseness.\n\n### Props are Read-Only\nWhether you declare a component as a function or a class, it must *never modify its own props*. Consider this sum function:\n```\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\nSuch functions are called *pure* because they do not attempt to change their inputs, and always return the same result for the same inputs.\n\nIn contrast, *this function is impure* because it changes its own input:\n```\nfunction withdraw(account, amount) {\n  account.total -= amount;\n}\n```\n\nReact is pretty flexible but it has a single strict rule:\n\n> All React components must act like pure functions with respect to their props.\n\nOf course, *application UIs are dynamic and change over time*. In the next section,*we will introduce a new concept of state*. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.","references":"- [ReactJS - Components and props](https://reactjs.org/docs/components-and-props.html)","featured_image_url":"https://codersnack.com/assets/images/logo-reactjs.png","slug":"reactjs-components-and-props","weblink":"https://codersnack.com/reactjs-components-and-props","featured_image_preview":{"id":14,"name":"logo-reactjs.png","hash":"f3090bf35fe04b8e8b7caa565a5a52bb","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/f3090bf35fe04b8e8b7caa565a5a52bb.png","provider":"local","provider_metadata":null,"created_at":"2020-01-09T20:24:47.507Z","updated_at":"2020-01-09T20:24:47.507Z"}},"codersnacks_quiz":{"id":11,"question":"Reactjs Comp & Props - Choose what sentence is true","response_valid":"Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.","response_invalid1":"The only way of creating React elements is using ES6 classes","response_invalid2":"Changing props allows components to render dinamically","created_at":"2020-01-09T20:29:57.969Z","updated_at":"2020-01-09T20:29:57.969Z"},"codersnacks_category":{"id":2,"header":"ReactJS","description":"Javascript library for building user interfaces","snacks_by_cat_json_filename":"reactjs.snacks.json","key":"reactjs","image_url":"https://codersnack.com/assets/images/logo-reactjs.png","created_at":"2019-12-31T19:51:23.456Z","updated_at":"2020-01-27T20:11:40.554Z","image_preview":{"id":4,"name":"logo-reactjs.png","hash":"184e26e835dc4e16ad7789a8ca97d25d","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/184e26e835dc4e16ad7789a8ca97d25d.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:51:23.474Z","updated_at":"2019-12-31T19:51:23.474Z"}},"title":"reactjs - comp & props - choose true","created_at":"2020-01-09T20:30:56.263Z","updated_at":"2020-01-09T20:30:56.266Z"},{"id":12,"codersnack":{"id":11,"header":"ReactJS - States","created_at":"2020-01-09T21:11:21.628Z","updated_at":"2020-01-20T15:06:43.073Z","explanation":"> State is similar to props, but it is private and fully controlled by the component.\n\nConsider this ticking clock example. By now, we only call *ReactDOM.render()* to change the rendered output:\n```\nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  ReactDOM.render(\n    element,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n\n```\n\nIn this snack, we will learn how to make the *Clock* component truly reusable and encapsulated. It will set up its own timer and update itself every second.\n\nWe can start by encapsulating how the clock looks:\n\n```\nfunction Clock(props) {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {props.date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n\nfunction tick() {\n  ReactDOM.render(\n    <Clock date={new Date()} />,\n    document.getElementById('root')\n  );\n}\n\nsetInterval(tick, 1000);\n```\nHowever, it misses a crucial requirement: the fact that the *Clock sets up a timer and updates the UI every second should be an implementation detail of the Clock*.\n\nIdeally we want to write this once and have the Clock update itself:\n\n```\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\nTo implement this, *we need to add \"state\" to the Clock component*.\n\n**State is similar to props, but it is private and fully controlled by the component.**\n\n### Converting a Function to a Class\nYou can convert a function component like Clock to a class in five steps:\n- Create an **ES6 class**, with the same name, that extends React.Component.- \n- Add a single empty method to it called **render()**. \n- Move the body of the function into the render() method. \n- *Replace props with this.props* in the render() body. \n- Delete the remaining empty function declaration.\n\n```\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\nClock is now defined as a class rather than a function.\n\n**The render method will be called each time an update happens**, but as long as we render <Clock /> into the same DOM node, only a single instance of the Clock class will be used. This lets us use additional features such as local state and lifecycle methods.\n\n### Adding Local State to a Class\nWe will move the date from props to state in three steps:\n\n1.- Replace this.props.date with **this.state.date** in the render() method:\n```\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n2.-**Add a class constructor that assigns the initial this.state**:\n```\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\nNote how we pass props to the base constructor:\n\n```\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n```\n\n> Class components should always call the base constructor with props.\n\n3.- Remove the date prop from the <Clock /> element:\n```\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\nWe will later add the timer code back to the component itself.\n\nThe result looks like this:\n\n```\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n","references":"- [ReactJS - State and Lifecycle](https://reactjs.org/docs/state-and-lifecycle.html)","featured_image_url":"https://codersnack.com/assets/images/logo-reactjs.png","slug":"reactjs-states","weblink":"https://codersnack.com/reactjs-states","featured_image_preview":{"id":15,"name":"logo-reactjs.png","hash":"dafd60fe7d604cde80f742be9647a01a","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/dafd60fe7d604cde80f742be9647a01a.png","provider":"local","provider_metadata":null,"created_at":"2020-01-09T21:11:21.659Z","updated_at":"2020-01-09T21:11:21.659Z"}},"codersnacks_quiz":{"id":12,"question":"What are React states for ?","response_valid":"It is a way of rendering a component dinamically depending on network responses , user actions, etc","response_invalid1":"React only use state in combination with Redux","response_invalid2":"For persistance data in localstorage","created_at":"2020-01-09T21:16:40.974Z","updated_at":"2020-01-09T21:16:40.974Z"},"codersnacks_category":{"id":2,"header":"ReactJS","description":"Javascript library for building user interfaces","snacks_by_cat_json_filename":"reactjs.snacks.json","key":"reactjs","image_url":"https://codersnack.com/assets/images/logo-reactjs.png","created_at":"2019-12-31T19:51:23.456Z","updated_at":"2020-01-27T20:11:40.554Z","image_preview":{"id":4,"name":"logo-reactjs.png","hash":"184e26e835dc4e16ad7789a8ca97d25d","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/184e26e835dc4e16ad7789a8ca97d25d.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:51:23.474Z","updated_at":"2019-12-31T19:51:23.474Z"}},"title":"reactjs - states - what states for","created_at":"2020-01-09T21:17:27.132Z","updated_at":"2020-01-09T21:17:27.135Z"},{"id":27,"codersnack":{"id":30,"header":"ReactJS - Typechecking with PropTypes","created_at":"2020-01-28T15:04:52.787Z","updated_at":"2020-01-28T15:04:52.787Z","explanation":"As your app grows, you can catch a lot of bugs with typechecking. For some applications, you can use JavaScript extensions like Flow or TypeScript to typecheck your whole application. But even if you don’t use those, React has some built-in typechecking abilities. To run typechecking on the props for a component, you can assign the special propTypes property:\n\n\n```\nimport PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};\n```\n\n>Note: React.PropTypes has moved into a different package since React v15.5. Please use the prop-types library instead.\n\n**PropTypes exports a range of validators that can be used to make sure the data you receive is valid**. In this example, we’re using *PropTypes.string*. When an invalid value is provided for a prop, a **warning will be shown in the JavaScript console**. For performance reasons, *propTypes is only checked in development mode*.\n\n#### PropTypes\nHere is an example documenting the different validators provided:\n\n```\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS type. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // A React element type (ie. MyComponent).\n  optionalElementType: PropTypes.elementType,\n  \n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n  \n  // An object with warnings on extra properties\n  optionalObjectWithStrictShape: PropTypes.exact({\n    name: PropTypes.string,\n    quantity: PropTypes.number\n  }),   \n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n#### Requiring Single Child\nWith *PropTypes.element* you can specify that **only a single child can be passed to a component as children**.\n```\nimport PropTypes from 'prop-types';\n\nclass MyComponent extends React.Component {\n  render() {\n    // This must be exactly one element or it will warn.\n    const children = this.props.children;\n    return (\n      <div>\n        {children}\n      </div>\n    );\n  }\n}\n\nMyComponent.propTypes = {\n  children: PropTypes.element.isRequired\n};\n```\n\n#### Default Prop Values\nYou can define **default values for your props** by assigning to the special *defaultProps* property:\n```\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\n// Specifies the default values for props:\nGreeting.defaultProps = {\n  name: 'Stranger'\n};\n\n// Renders \"Hello, Stranger\":\nReactDOM.render(\n  <Greeting />,\n  document.getElementById('example')\n);\n```\nIf you are **using a Babel transform like transform-class-properties** , you can also declare *defaultProps* as static property within a React component class. This syntax has not yet been finalized though and will require a compilation step to work within a browser. For more information, see the class fields proposal.\n\n```\nclass Greeting extends React.Component {\n  static defaultProps = {\n    name: 'stranger'\n  }\n\n  render() {\n    return (\n      <div>Hello, {this.props.name}</div>\n    )\n  }\n}\n```\n\nThe *defaultProps* will be used to ensure that *this.props.name* will have a value if it was not specified by the parent component. The *propTypes* typechecking happens after *defaultProps* are resolved, so typechecking will also apply to the *defaultProps*.","references":"- [Reactjs.org - Typechecking with proptypes](https://reactjs.org/docs/typechecking-with-proptypes.html)","featured_image_url":"https://codersnack.com/assets/images/logo-reactjs.png","slug":"reactjs-typechecking-proptypes","weblink":"https://codersnack.com/reactjs-typechecking-proptypes/","featured_image_preview":{"id":39,"name":"logo-reactjs.png","hash":"469760b168f34a5db684d2eeb92d200f","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/469760b168f34a5db684d2eeb92d200f.png","provider":"local","provider_metadata":null,"created_at":"2020-01-28T15:04:52.807Z","updated_at":"2020-01-28T15:04:52.807Z"}},"codersnacks_quiz":{"id":27,"question":"With ReactJS propTypes you can ...","response_valid":"run typechecking on the props for a component","response_invalid1":"define a new property type for a component","response_invalid2":"validate form input values","created_at":"2020-01-28T15:07:47.884Z","updated_at":"2020-01-28T15:07:47.884Z"},"codersnacks_category":{"id":2,"header":"ReactJS","description":"Javascript library for building user interfaces","snacks_by_cat_json_filename":"reactjs.snacks.json","key":"reactjs","image_url":"https://codersnack.com/assets/images/logo-reactjs.png","created_at":"2019-12-31T19:51:23.456Z","updated_at":"2020-01-27T20:11:40.554Z","image_preview":{"id":4,"name":"logo-reactjs.png","hash":"184e26e835dc4e16ad7789a8ca97d25d","sha256":"ek-ixAp6Ir6UtlIEoswH3vum83sE3lYiacTqgsQHpCI","ext":".png","mime":"image/png","size":10.75,"url":"/uploads/184e26e835dc4e16ad7789a8ca97d25d.png","provider":"local","provider_metadata":null,"created_at":"2019-12-31T19:51:23.474Z","updated_at":"2019-12-31T19:51:23.474Z"}},"title":"Reactjs Proptypes","created_at":"2020-01-28T15:08:24.368Z","updated_at":"2020-01-28T15:08:24.372Z"}]